<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Mujoco - 高场hfield相关</title>
    <url>/2024/09/26/01-Hfield/</url>
    <content><![CDATA[<blockquote>
<p>The <strong>hfield</strong> type defines a height field geom. The
geom must reference the desired height field asset with the hfield
attribute below. The position and orientation of the geom set the
position and orientation of the height field. The size of the geom is
ignored, and the size parameters of the height field asset are used
instead. See the description of the <a class="link" 
 href="https://mujoco.readthedocs.io/en/stable/XMLreference.html#asset-hfield" >hfield<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>
element. Similar to planes, height field geoms can only be attached to
the world body or to static children of the world.</p>
</blockquote>
<ol type="1">
<li><p>可从PNG的灰度图像加载高场数据。每个像素即为一个高度，黑低白高。</p></li>
<li><p>可从bin文件读入，格式如下：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">(int32)   nrow</span><br><span class="line">(int32)   ncol</span><br><span class="line">(float32) data[nrow*ncol]</span><br></pre></td></tr></table></figure></div></li>
<li><p>高度数据可以在编译时保持未定义。</p></li>
</ol>
<ul>
<li>编译器会自动把高度数据归一化到[0,1]</li>
<li>高场的位置和方向由geom确定，空间范围由hfield的size字段决定。（与mesh相同）</li>
<li>高场视为三棱柱的并集，碰撞时首先确认可能碰撞的棱柱网格，然后通过凸面碰撞器计算。高场和geom的碰撞上限限制为50，超过的则被舍弃。</li>
</ul>
<h2 id="参数">参数</h2>
<ul>
<li><strong>name</strong>:
名称，用于引用。如果忽略name，可用不带路径和后缀名的文件名代替引用。</li>
<li><strong>content_type</strong>:
目前支持<code>image/png</code>和<code>image/vnd.mujoco.hfield</code>。</li>
<li><strong>file</strong>:
文件名，若后缀为<code>.png</code>（不区分大小写），则按图像读入；否则以二进制文件读入。</li>
<li><strong>nrow</strong>, <strong>ncol</strong>: 行数和列数。默认值 0
表示将从文件加载数据。</li>
<li><strong>elevation</strong>: 高场，自动归一，默认值0。</li>
<li><strong>size</strong>:
(radius_x、radius_y、elevation_z、base_z)，分别是x、y方向的半径，最大高度，和基础厚度。</li>
</ul>
<h2 id="使用样例">使用样例</h2>
<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mujoco</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">asset</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hfield</span> <span class="attr">file</span>=<span class="string">&quot;./data/height_field.bin&quot;</span> <span class="attr">name</span>=<span class="string">&quot;customTerrain&quot;</span> <span class="attr">ncol</span>=<span class="string">&quot;100&quot;</span> <span class="attr">nrow</span>=<span class="string">&quot;100&quot;</span> <span class="attr">size</span>=<span class="string">&quot;50 50 1 0.1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">asset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">worldbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">geom</span> <span class="attr">hfield</span>=<span class="string">&quot;customTerrain&quot;</span> <span class="attr">pos</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">type</span>=<span class="string">&quot;hfield&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">worldbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mujoco</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>机器仿真</category>
      </categories>
      <tags>
        <tag>mujoco</tag>
        <tag>hfield</tag>
      </tags>
  </entry>
  <entry>
    <title>Mujoco - 碰撞凸几何体要求</title>
    <url>/2024/09/29/02-Mujoco_notes/</url>
    <content><![CDATA[<h2 id="collision">Collision</h2>
<p><a class="link" 
 href="https://mujoco.readthedocs.io/en/stable/computation/index.html#collision" >Computation
- MuJoCo Documentation<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<blockquote>
<p>We have chosen to limit collision detection to <em>convex</em> geoms.
All primitive types are convex. Height fields are not convex but
internally they are treated as unions of triangular prisms (using custom
collision pruning beyond the filters described above). Meshes specified
by the user can be non-convex, and are rendered as such. For collision
purposes however they are replaced with their convex hulls.</p>
</blockquote>
<ul>
<li>碰撞检测限制在<em>凸</em>几何体</li>
<li>所有原始类型都是凸的</li>
<li>高度字段不是凸的，但在内部它们被视为三棱柱的并集</li>
<li>网格可以是非凸的，并且如此渲染。然而，出于碰撞目的，它们被替换为凸包</li>
</ul>
<blockquote>
<p>In order to model a non-convex object other than a height field, the
user must decompose it into a union of convex geoms (which can be
primitive shapes or meshes) and attach them to the same body. Open tools
like the <a class="link"   href="https://github.com/SarahWeiii/CoACD" >CoACD library<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>
can be used outside MuJoCo to automate this process. Finally, all
built-in collision functions can be replaced with custom callbacks. This
can be used to incorporate a general-purpose “triangle soup” collision
detector for example. However we do not recommend such an approach.
Pre-processing the geometry and representing it as a union of convex
geoms takes some work, but it pays off at runtime and yields both faster
and more stable simulation.</p>
<p>为了对高度场以外的非凸对象进行建模，用户必须将其分解为凸几何体（可以是原始形状或网格）的并集并将它们附加到同一实体。可以在
MuJoCo 外部使用<a class="link"   href="https://github.com/SarahWeiii/CoACD" >CoACD
库<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>等开放工具来自动化此过程。最后，所有内置碰撞函数都可以替换为自定义回调。例如，这可用于合并通用“三角汤”碰撞检测器。但是我们不推荐这种方法。预处理几何体并将其表示为凸几何体的联合需要一些工作，但它在运行时得到回报，并产生更快、更稳定的模拟。</p>
</blockquote>
]]></content>
      <categories>
        <category>机器仿真</category>
      </categories>
      <tags>
        <tag>mujoco</tag>
        <tag>collision</tag>
        <tag>convex</tag>
      </tags>
  </entry>
  <entry>
    <title>Mujoco - CoACD简略教程</title>
    <url>/2024/09/29/03-CoACD_notes/</url>
    <content><![CDATA[<p>CoACD是一个凸分解工具，可以将凹模型粗略粗分解为凸几何体的并集。</p>
<h2 id="一源代码编译">一、源代码编译</h2>
<h3 id="安装教程">安装教程</h3>
<h4 id="克隆代码">(1) 克隆代码：</h4>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone --recurse-submodules https://github.com/SarahWeiii/CoACD.git</span><br></pre></td></tr></table></figure></div>
<h4 id="安装依赖">(2) 安装依赖：</h4>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmake &gt;= 3.24</span><br><span class="line">g++ &gt;= 9, &lt; 12</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>在我的Ubuntu22.04中，apt里的cmake包版本是3.22，不能用。用snap成功安装3.30版本。（源码安装好像也行，不过我懒得添加系统变量，就还是用snap安装了。</p>
</blockquote>
<h4 id="编译">(3) 编译</h4>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd CoACD \</span><br><span class="line">&amp;&amp; mkdir build \</span><br><span class="line">&amp;&amp; cd build \</span><br></pre></td></tr></table></figure></div>
<p>​ 然后编译：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmake .. -DCMAKE_BUILD_TYPE=Release \</span><br><span class="line">&amp;&amp; make main -j</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>这里出了很多warning，但是好像不影响使用。</p>
</blockquote>
<h4 id="使用">(4) 使用</h4>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">./main -i PATH_OF_YOUR_MESH -o PATH_OF_OUTPUT</span><br></pre></td></tr></table></figure></div>
<h3 id="参数说明">参数说明</h3>
<ul>
<li><strong>-nm/--no-merge</strong> : 禁用合并后处理，默认为false。</li>
<li><strong>-c/--max-convex-hull</strong> :
凸包上限，默认-1表示无限制。<strong>仅在启用合并时才</strong>有效。</li>
<li><strong>-ex/--extrude</strong> : 沿着重叠面挤出相邻的凸包。</li>
<li><strong>-am/--approximate-mode</strong> :
近似形状类型（“ch”表示凸包，“box”表示立方体）。</li>
<li><strong>--seed</strong> : 随机种子，默认是random()。</li>
</ul>
<p><strong>说明</strong>：</p>
<ol type="1">
<li>大多数情况下，只需调整<code>threshold</code>
（0.01~1）即可平衡细节程度和分解成分的数量。值越高，结果越粗，值越低，结果越细。</li>
<li>默认参数是快速版本。可以牺牲运行时间获取更多组件数量，增加<code>searching depth (-md)</code>
、
<code>searching node (-mn)</code>和<code>searching iteration (-mi)</code>可以获得更好的切割策略。</li>
</ol>
<h2 id="二pypi">二、PyPI</h2>
<h3 id="安装">安装</h3>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pip install coacd</span><br></pre></td></tr></table></figure></div>
<h3 id="使用-1">使用</h3>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> coacd</span><br><span class="line"></span><br><span class="line">mesh = trimesh.load(input_file, force=<span class="string">&quot;mesh&quot;</span>)</span><br><span class="line">mesh = coacd.Mesh(mesh.vertices, mesh.faces)</span><br><span class="line">parts = coacd.run_coacd(mesh) <span class="comment"># a list of convex hulls.</span></span><br></pre></td></tr></table></figure></div>
<h3 id="参数">参数</h3>
<p>官方文档里没有提到详细的参数列表，通过以下指令自己查询了下：
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> inspect</span><br><span class="line"><span class="built_in">print</span>(inspect.getsource(coacd.run_coacd))</span><br></pre></td></tr></table></figure></div></p>
<p>查询到的参数和对应的解释如下：</p>
<ul>
<li><strong>threshold (float)</strong>:
用于决定分解精度的阈值。较低的阈值意味着更精确的分解，但可能需要更多的计算资源。默认值为
<code>0.05</code>。</li>
<li><strong>max_convex_hull (int)</strong>:
最大凸包数量。如果你希望限制生成的凸包数量，可以设置此值。例如，如果设置为
5，则最多生成 5 个凸包，默认值为 <code>-1</code>，表示不限制。</li>
<li><strong>preprocess_mode (str)</strong>:
预处理模式，<code>"on"</code> 启用，<code>"off"</code>
禁用，<code>"auto"</code>
自动选择（推荐）。预处理可能影响分解的速度和结果。</li>
<li><strong>resolution (int)</strong>:
处理网格的分辨率，值越高，结果越精确，但计算量也越大。默认值为
<code>2000</code>。</li>
<li><strong>mcts_nodes (int)</strong>:
MCTS（蒙特卡洛树搜索）中每个节点的最大数量。值越大，搜索的深度越高，可能会增加分解的准确度，但会消耗更多的计算资源。</li>
<li><strong>mcts_iterations (int)</strong>:
MCTS的迭代次数，更多的迭代次数意味着更高的准确性，但会增加计算负担。</li>
<li><strong>pca (bool)</strong>:
是否使用主成分分析（PCA）来减少维度。<code>True</code>
表示启用，<code>False</code> 表示禁用。</li>
<li><strong>merge (bool)</strong>: 是否合并小的凸包。如果设置为
<code>True</code>，可能会减少生成的凸包数量。</li>
<li><strong>decimate (bool)</strong>:
是否在生成凸包时进行简化，减少网格面片的数量。</li>
<li><strong>max_ch_vertex (int)</strong>:
每个凸包允许的最大顶点数量。</li>
<li><strong>extrude (bool)</strong>:
是否对凸包进行拉伸。<code>True</code> 表示拉伸，<code>False</code>
表示不拉伸。</li>
<li><strong>extrude_margin (float)</strong>: 如果 <code>extrude</code>
为 <code>True</code>，设置拉伸的边距。</li>
<li><strong>apx_mode (str)</strong>: 设置近似方式，<code>"ch"</code>
代表使用凸包，<code>"box"</code> 表示使用包围盒。</li>
<li><strong>seed (int)</strong>:
随机种子，设置它可以帮助重现相同的结果。</li>
</ul>
<p>根据参数，一个简要的包含输出的代码如下：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> coacd</span><br><span class="line"><span class="keyword">import</span> trimesh</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">input_file = <span class="string">&quot;input.obj&quot;</span></span><br><span class="line"></span><br><span class="line">mesh = trimesh.load(input_file, force=<span class="string">&quot;mesh&quot;</span>)</span><br><span class="line">mesh = coacd.Mesh(mesh.vertices, mesh.faces)</span><br><span class="line"></span><br><span class="line">parts = coacd.run_coacd(</span><br><span class="line">    mesh,</span><br><span class="line">    threshold=<span class="number">0.05</span>,  <span class="comment"># 精度阈值，默认: 0.05</span></span><br><span class="line">    max_convex_hull=-<span class="number">1</span>,  <span class="comment"># 最大凸包数量，默认: -1 (无限制)</span></span><br><span class="line">    preprocess_mode=<span class="string">&quot;auto&quot;</span>,  <span class="comment"># 预处理模式，默认: &quot;auto&quot;</span></span><br><span class="line">    preprocess_resolution=<span class="number">30</span>,  <span class="comment"># 预处理分辨率，默认: 30</span></span><br><span class="line">    resolution=<span class="number">2000</span>,  <span class="comment"># 分解分辨率，默认: 2000</span></span><br><span class="line">    mcts_nodes=<span class="number">20</span>,  <span class="comment"># MCTS节点数，默认: 20</span></span><br><span class="line">    mcts_iterations=<span class="number">150</span>,  <span class="comment"># MCTS迭代次数，默认: 150</span></span><br><span class="line">    mcts_max_depth=<span class="number">3</span>,  <span class="comment"># MCTS最大深度，默认: 3</span></span><br><span class="line">    pca=<span class="literal">False</span>,  <span class="comment"># 是否启用PCA降维，默认: False</span></span><br><span class="line">    merge=<span class="literal">True</span>,  <span class="comment"># 是否合并小凸包，默认: True</span></span><br><span class="line">    decimate=<span class="literal">False</span>,  <span class="comment"># 是否简化凸包，默认: False</span></span><br><span class="line">    max_ch_vertex=<span class="number">256</span>,  <span class="comment"># 每个凸包的最大顶点数，默认: 256</span></span><br><span class="line">    extrude=<span class="literal">False</span>,  <span class="comment"># 是否拉伸凸包，默认: False</span></span><br><span class="line">    extrude_margin=<span class="number">0.01</span>,  <span class="comment"># 拉伸边距，默认: 0.01</span></span><br><span class="line">    apx_mode=<span class="string">&quot;ch&quot;</span>,  <span class="comment"># 近似模式，默认: &quot;ch&quot; (凸包)</span></span><br><span class="line">    seed=<span class="number">0</span>  <span class="comment"># 随机种子，默认: 0</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">output_dir = <span class="string">&quot;./output_parts/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(output_dir):</span><br><span class="line">    os.makedirs(output_dir)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, part <span class="keyword">in</span> <span class="built_in">enumerate</span>(parts):</span><br><span class="line">    part_mesh = trimesh.Trimesh(vertices=part[<span class="number">0</span>], faces=part[<span class="number">1</span>])</span><br><span class="line">    part_mesh.export(os.path.join(output_dir, <span class="string">f&quot;part_<span class="subst">&#123;i&#125;</span>.obj&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Exported <span class="subst">&#123;<span class="built_in">len</span>(parts)&#125;</span> convex parts to <span class="subst">&#123;output_dir&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>机器仿真</category>
      </categories>
      <tags>
        <tag>mujoco</tag>
        <tag>convex</tag>
        <tag>CoACD</tag>
      </tags>
  </entry>
  <entry>
    <title>NeRF和3DGS对比</title>
    <url>/2024/10/30/04-NeRFvs3DGS/</url>
    <content><![CDATA[<h2 id="nerf">NeRF</h2>
<h3 id="原理">原理</h3>
<p>NeRF（Neural Radiance
Fields）是一种新型的3D场景表示方法，通过神经网络来生成逼真的3D场景。NeRF
的核心思想是利用神经网络来表示一个场景的体素，从而可以实现从不同角度对场景进行渲染，生成高质量的图像。</p>
<p>特点：</p>
<ul>
<li>NeRF中三维模型的信息是以<strong>“隐式”</strong>的方法存储，而非点云、体素、网格等显式的表达方式。</li>
<li>NeRF使用类似<strong>光线追踪</strong>的方式创建新视角的图像。输入是采样点和观测的方向，输出是对应的RGB值和不透明度。</li>
</ul>
<h3 id="流程">流程</h3>
<p><img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/bcbfe7de8a71226465e395e9aca94b72.png"
                      
                ></p>
<ol type="1">
<li><strong>输入信息</strong>：NeRF
将3D空间中的点（例如摄像机的位置）和观察方向作为输入。</li>
<li><strong>神经网络映射</strong>：通过一个MLP（多层感知器）神经网络，将每个3D坐标点和观察方向映射到颜色和体素密度。网络的输出包含颜色（RGB）和体密度（衡量光线穿过该点的透明度）。</li>
<li><strong>体渲染技术</strong>：NeRF
使用体渲染公式，即光线穿过场景的过程。具体来说，它沿着光线方向对多个点进行采样，并根据体密度和颜色计算每个点的贡献，进而得出最终的像素值。</li>
<li><strong>损失函数</strong>：通过多视图监督进行训练，NeRF会在场景中从多个视角捕获图像，将渲染的像素值与真实图像进行对比，并通过优化损失函数不断调整网络参数，逐步逼近真实场景。</li>
<li><strong>生成新视角</strong>：训练完成后，NeRF
能够在未见过的视角上生成图像，实现自由的3D视角切换和逼真的场景合成。</li>
</ol>
<h3 id="网络结构">网络结构</h3>
<p><img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/340d8d0e46ba24f221761300ece496f8.png"
                      
                ></p>
<ul>
<li><strong>不透明度</strong>只和空间位置有关，<strong>颜色</strong>与空间位置和视角有关。</li>
</ul>
<h3 id="实现细节">实现细节</h3>
<h4 id="mlp网络">MLP网络</h4>
<ul>
<li><strong>层数</strong>：NeRF的网络由10个隐藏层组成，前9层包含256个神经元，最后一层包含128个神经元。</li>
<li><strong>分支结构</strong>：NeRF的MLP有一个特定的分支结构。前8层用于处理空间位置信息(x,y,z)，生成了隐变量（latent
features）。这些特征被用来预测体密度（density），以表示该点在场景中的不透明度。</li>
<li><strong>跳跃连接</strong>：位置编码后的输入会与网络中间层（第5层）相连，作为跳跃连接（skip
connection），帮助网络在深层结构中保持空间信息的细节。</li>
</ul>
<h4 id="位置编码">位置编码</h4>
<ul>
<li>NeRF
使用了傅里叶特征来将输入的3D坐标和视角方向进行编码，这种方式称为<strong>位置编码</strong>（Positional
Encoding）。具体来说，它将输入扩展到高频率空间，这样网络就能够学习更细腻的细节。</li>
<li>对于坐标 (x,y,z)(x, y, z)(x,y,z) 和方向
(θ,ϕ)，每个输入维度会生成多个不同频率的正余弦特征，以捕捉场景中的复杂空间结构。</li>
</ul>
<h4 id="体渲染">体渲染</h4>
<p>​
从焦点到一个像素上连的射线为<code>r(t)=o+td</code>，其中其中<code>o</code>是原点，<code>t</code>是距离。距离起点（near
bound）和距离终点（far bound）为<code>tn</code>和<code>tf</code>。</p>
<p>​ 获得像素颜色的公式：</p>
<p>​ <img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/66ccede850b01c372315e2b505c4ec7b.png"
                      
                ></p>
<p>​ 这个式子积分里面是<code>T(t)</code>
、<code>密度 σ(r(t))</code>和颜色<code>c(r(t),d)</code>的乘积，其中<code>T(t)</code>是累积透光率，表示光线射到这“还剩多少光”。实际渲染过程是把射线平均分成N个小区间，每个区间随机采样一个点，对采样得到的点的颜色进行某种加权求和。</p>
<h3 id="相关工作">相关工作</h3>
<h4 id="nerf2mesh">NeRF2Mesh</h4>
<p><img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/9e1ed1cebbf7c2079a3bd129333c9730.png"
                      
                ></p>
<p>最左侧的立方体就是Nerf所构建的三维数据，它包含离散点的三维坐标、不透明度（density）以及rgb色彩。
Nerf2Mesh的整体结构也像图中分为上下两个分支：</p>
<ul>
<li><strong>密度分支 (Density
field)</strong>：首先利用NeRF生成的密度场划分出体素，再用Marching
Cubes生成三角网格，再进行优化。</li>
<li><strong>外观分支 (Appearance
Field)</strong>：Nerf输出的内容（RGB）经过MLP1提取特征，然后分成两个分支分别提取漫反射和镜面反射（镜面反射会多经过一个MLP层）的分量。</li>
</ul>
<h2 id="d-gaussian-splatting">3D Gaussian Splatting</h2>
<h3 id="原理-1">原理</h3>
<p>3D Gaussian Splatting 的核心思想是用高斯分布来表示 3D
空间中的点云，将场景中的点用 3D
高斯函数表示。这些高斯函数即“高斯球”，通过一组参数（均值、协方差矩阵等）来描述位置、方向、大小和形状。相比于单纯的点云，使用高斯分布可以更好地对点的位置和形状进行逼真地表达，使得结果更平滑并且抗噪性更好。</p>
<p>在渲染过程中，场景以相机视角来观察这些高斯分布的点，生成一个图像。每个像素的颜色和透明度是通过聚合沿视线方向的高斯球信息来计算的。这些高斯分布产生的重叠区域，通过数学上的加权平均可以很好地呈现出自然的模糊边缘，避免了传统点云中颗粒状的视觉问题。</p>
<h3 id="流程-1">流程</h3>
<p><img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/b957eb22052d10a72d8d78c8416a0af4.png"
                      
                ></p>
<ol type="1">
<li><strong>点云采样</strong>：使用SfM从一组图像中估计出点云，可以直接调用
<a class="link" 
 href="https://link.zhihu.com/?target=https%3A//colmap.github.io/" >COLMAP<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>
库操作</li>
<li><strong>高斯分布</strong>：将每个点分配一个高斯分布。初始高斯分布通过位置、颜色、透明度和协方差矩阵等参数来定义。</li>
<li><strong>投影变换</strong>：通过投影操作将 3D
高斯分布映射到相机视角下的 2D 图像平面。</li>
<li><strong>光栅化</strong>：对投影后的高斯分布进行渲染。</li>
<li><strong>优化</strong>：通过计算图像与目标图像之间的损失，反向传播梯度（Gradient
Flow）来调整高斯参数。以及自适应地调整高斯分布的密度。</li>
</ol>
<h3 id="实现细节-1">实现细节</h3>
<h4 id="三维高斯属性">三维高斯属性</h4>
<p>用三维高斯分布构建基础元素，属性有中心<code>μ</code>、不透明度<code>α</code>、三维协方差矩阵（表示缩放程度）<code>Σ</code>和颜色<code>c</code>。其中颜色<code>c</code>与视角有关，由球谐函数表示。</p>
<p>球谐函数的示例：</p>
<p><img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/2b098bcc4d5038318f72a2e4fb51ef3b.jpeg"
                      
                ></p>
<p>（图源：<a class="link" 
 href="https://zhuanlan.zhihu.com/p/679809915" >3DGS综述以及对3DGS的理解：A
Survey on 3D Gaussian Splatting - 知乎<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>）</p>
<h4 id="自适应密度控制">自适应密度控制</h4>
<p><img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/d8d3a1e3a41d17eeebed3b751bf58459.png"
                      
                ></p>
<ul>
<li><strong>Under-Reconstruction</strong>:
复制一个当前高斯分布的副本，然后沿着位置梯度方向移动它。</li>
<li><strong>Over-Reconstruction</strong>:
将当前高斯分布分割成两个较小的高斯分布，再对其进行移动。</li>
</ul>
<h4 id="点的剪枝">点的剪枝</h4>
<p>对于冗余的高斯分布，在迭代过程中会逐渐消除。不透明度太低的高斯分布和过大的高斯分布都会在迭代中逐渐消除。以节省资源。</p>
<h4 id="tile">Tile</h4>
<p>为了降低运算成本，3DGS将图像分割为数个不重叠的patch，称为<code>tile</code>，每个<code>tile</code>为<code>16×16</code>像素。在此基础上，3DGS计算投影后的高斯与<code>tile</code>的相交情况。由于高斯可能与多个<code>tile</code>相交，所以对其进行了复制，并为其分配<code>tile</code>的标识符。不同的<code>tile</code>可以在不同的线程或
GPU 核心上同时计算，避免了对同一像素的竞争。</p>
<h2 id="对比">对比</h2>
<h3 id="场景绘制">场景绘制</h3>
<ul>
<li>NeRF使用光线追踪来创建新视点的图像。通过模拟从像素位置发射的光线来计算图像中每个像素的颜色，运行速度较慢。但渲染更真实。</li>
<li>3DGS
使用光栅化来创建新视点的图像，通过Splatting进行渲染，运算速度更快，但3DGS创建了数百万个gaussion，占用的内存比NeRF多数倍。</li>
</ul>
<h3 id="d重建">3D重建</h3>
<ul>
<li>NeRF的输出需要借助其他方法转为显式输出，如NeRF2Mesh。</li>
<li>3DGS训练后最终得到的是一个文件，其中包含每个高斯的高斯参数列表，例如位置、大小、颜色和透明度。3DGS的输出是比较显式的表达。</li>
</ul>
<p>在CSDN上有一个3DGS和NeRF的对比表格，但数据来源并未标明，可靠性存疑（而且他的3DGS怎么是3D
Geometry Sensing的缩写，虽然他给的结构图确实是3D高斯的）：</p>
<table>
<colgroup>
<col style="width: 11%" />
<col style="width: 44%" />
<col style="width: 44%" />
</colgroup>
<thead>
<tr>
<th><strong>对比维度</strong></th>
<th>3DGS (3D Geometry Sensing)</th>
<th>NeRF (Neural Radiance Fields)</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>基本原理</strong></td>
<td>基于几何推断，通过多视角图像、深度传感器、LiDAR等获取显式3D几何信息。</td>
<td>基于神经网络拟合体积辐射场，通过多视角图像学习隐式表示，渲染出场景。</td>
</tr>
<tr>
<td><strong>输入数据</strong></td>
<td>多视角图像、深度信息（LiDAR、ToF相机）、位姿数据、点云。</td>
<td>多视角图像（通常包括相机位姿），不需要显式的几何信息。</td>
</tr>
<tr>
<td><strong>输出结果</strong></td>
<td>点云、网格、三角形模型、深度图、纹理映射等显式几何结构。</td>
<td>通过体积渲染生成逼真图像（视角相关），不直接输出几何模型。</td>
</tr>
<tr>
<td><strong>数据处理方式</strong></td>
<td>使用几何关系（如三角测量、立体视觉等）来显式重建场景结构。</td>
<td>使用神经网络隐式建模颜色和密度，通过体积渲染生成图像。</td>
</tr>
<tr>
<td><strong>几何信息</strong></td>
<td>显式获取3D几何信息，可以精确测量物体的距离和形状。</td>
<td>隐式推断几何信息，主要用于图像渲染，几何结构不直接输出。</td>
</tr>
<tr>
<td><strong>渲染效果</strong></td>
<td>依赖于重建的几何结构，渲染效果有限，尤其在复杂光线场景下效果一般。</td>
<td>渲染效果非常逼真，尤其在反射、遮挡、折射等复杂光照场景表现优异。</td>
</tr>
<tr>
<td><strong>计算资源需求</strong></td>
<td>需要较强的几何计算能力，数据获取通常依赖于多传感器系统（LiDAR等）。</td>
<td>需要高计算资源，特别是训练神经网络的过程计算量大，通常依赖于GPU。</td>
</tr>
<tr>
<td><strong>渲染速度</strong></td>
<td>实时性较好，特别是有深度传感器时可实现快速重建。</td>
<td>渲染速度较慢，尤其在训练阶段耗时长，但有即时渲染版本。</td>
</tr>
<tr>
<td><strong>应用场景</strong></td>
<td>自动驾驶、机器人导航、工业检测、3D建模、AR/VR、精密测量。</td>
<td>电影视觉特效、虚拟旅游、虚拟现实内容生成、复杂光照场景的渲染。</td>
</tr>
<tr>
<td><strong>优点</strong></td>
<td>可以显式建模、精确几何测量、适用于实时应用；深度传感器辅助时重建精度高。</td>
<td>渲染质量极高，能处理复杂的光照、遮挡问题；不需要昂贵的深度传感器。</td>
</tr>
<tr>
<td><strong>缺点</strong></td>
<td>在处理复杂光照（如透明物体、反射面）时效果不佳，依赖昂贵的传感器数据。</td>
<td>渲染速度慢，训练时间长，初始设计不擅长生成明确的几何信息。</td>
</tr>
<tr>
<td><strong>几何建模精度</strong></td>
<td>高，适合用于需要精确几何信息的场景（如测量、导航、物理模拟等）。</td>
<td>几何建模是隐式的，主要依赖于神经网络推断，不适合用于测量等任务。</td>
</tr>
<tr>
<td><strong>光照处理</strong></td>
<td>处理复杂光线条件较困难，通常需要额外的算法来应对光线反射和折射。</td>
<td>对复杂光照场景处理效果出色，能够处理反射、折射、遮挡等问题。</td>
</tr>
<tr>
<td><strong>实时性</strong></td>
<td>实时性较强，特别是在配合LiDAR等传感器时。</td>
<td>需要较长的时间进行训练和渲染，不适合实时应用（加速版本除外）。</td>
</tr>
<tr>
<td><strong>数据获取成本</strong></td>
<td>高，需要多视角相机或昂贵的深度传感器（如LiDAR）。</td>
<td>低，仅需多视角图像数据，不依赖于专门的传感器。</td>
</tr>
</tbody>
</table>
<p>（表源：<a class="link" 
 href="https://blog.csdn.net/Darlingqiang/article/details/142773142" >【3dgs】3DGS与NeRF对比_nerf和3dgs区别-CSDN博客<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>）</p>
]]></content>
      <categories>
        <category>三维重建</category>
      </categories>
      <tags>
        <tag>NeRF</tag>
        <tag>3DGS</tag>
      </tags>
  </entry>
  <entry>
    <title>GauU-Scene V2 论文解读</title>
    <url>/2024/11/05/05-GauU_Scene_V2/</url>
    <content><![CDATA[<p>论文：</p>
<blockquote>
<p>GauU-Scene V2: Assessing the Reliability of Image-Based Metrics with
Expansive Lidar Image Dataset Using 3DGS and NeRF</p>
</blockquote>
<h2 id="数据集">数据集</h2>
<figure>
<img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/db7529b3c3e21b5e4cb4c591de2c70cb.png"
                     
alt="dataset" 
                >
<figcaption aria-hidden="true">dataset</figcaption>
</figure>
<table>
<colgroup>
<col style="width: 15%" />
<col style="width: 41%" />
<col style="width: 43%" />
</colgroup>
<thead>
<tr>
<th>方法</th>
<th>做法</th>
<th>缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td>bungeenerf</td>
<td>卫星捕获图像</td>
<td>时间差异、无地面实况</td>
</tr>
<tr>
<td>KITTI</td>
<td>汽车雷达捕获点云数据</td>
<td>屋顶、高层建筑捕获存在不足</td>
</tr>
<tr>
<td>blockNeRF</td>
<td>Style Transformation解决时间差异</td>
<td>不提供公开可用的点云数据集</td>
</tr>
<tr>
<td>UrbanBIS</td>
<td>多视图相机捕获点云</td>
<td>未用高精度激光雷达</td>
</tr>
<tr>
<td>Urbanscene3D</td>
<td>无人机配合激光雷达</td>
<td>坐标差异，雷达点云和图像关系不明确</td>
</tr>
</tbody>
</table>
<p><strong>优势：</strong></p>
<ul>
<li>利用Zenmuse L1来获取地面真实几何，而大多数数据集（ blocknerf ）（
megaNeRF ）（ UrbanBIS
）依赖单目或多视图相机进行数据采集，这更适合新视图合成而不是场景重建。</li>
<li>提供了城市规模的信息，包括高层建筑、湖泊、山脉和屋顶，而其他数据集很少提供。</li>
<li>double-return技术，去除移动物体，确保更稳定的光照效果。</li>
<li>去除飞行路线中连续图像之间的冗余信息，图像更少，但信息量仍然具有可比性。</li>
</ul>
<h2 id="评估指标">评估指标</h2>
<h3 id="psnr">PSNR</h3>
<p>PSNR(Peak signal-to-noise ratio 峰值信噪比)
用于表示信号的最大可能功率与影响其表示的保真度的破坏噪声的功率之间的比率，通常使用分贝标度表示为对数量。</p>
<figure>
<img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/d6245af1d4a65be444fc779e62074667.png"
                     
alt="MSE" 
                >
<figcaption aria-hidden="true">MSE</figcaption>
</figure>
<figure>
<img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/d0eb05ab65303b4ae37eabbfc43212b7.png"
                     
alt="PSNR" 
                >
<figcaption aria-hidden="true">PSNR</figcaption>
</figure>
<h3 id="ssim">SSIM</h3>
<p>SSIM全称为Structural
Similarity，即结构相似性。算法会提取以下三个特征。</p>
<ul>
<li><strong>亮度</strong></li>
<li><strong>对比度</strong></li>
<li><strong>结构</strong></li>
</ul>
<p>亮度的估计与平均灰度有关：<img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/cfd417d0ced2bd8f64a88b7fa799f8c5.png"
                     
alt="均值" 
                ></p>
<p>对比度的估计则用标准差衡量：<img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/ff69fd63d0e036d0866f420595dc2668.png"
                     
alt="标准差" 
                ></p>
<p>结构比较是通过使用一个合并公式来完成。</p>
<p>三个对比函数分别如下：</p>
<table>
<colgroup>
<col style="width: 14%" />
<col style="width: 85%" />
</colgroup>
<thead>
<tr>
<th></th>
<th>公式</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>亮度</strong></td>
<td><img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/9615320354732921de0c9a7268823ca3.png"
                     
alt="亮度" 
                ></td>
</tr>
<tr>
<td><strong>对比度</strong></td>
<td><img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/f82417d40a829e317089fc1240823192.png"
                     
alt="对比度" 
                ></td>
</tr>
<tr>
<td><strong>结构</strong></td>
<td><img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/3765b0064f96885e010bb8eb3725455a.png"
                     
alt="结构" 
                >其中<img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/6ba650fa5b1715045873b1422610d366.png"
                     
alt="协方差" 
                ></td>
</tr>
</tbody>
</table>
<p>结合即得到SSIM函数：</p>
<figure>
<img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/fdd23e8d54ad6380ebc851cd06a0a12d.png"
                     
alt="SSIM" 
                >
<figcaption aria-hidden="true">SSIM</figcaption>
</figure>
<h3 id="lpips">LPIPS</h3>
<p>学习感知图像块相似度(Learned Perceptual Image Patch Similarity,
LPIPS)，通过深度学习模型来评估两个图像之间的感知差异。使用预训练的深度网络（如
VGG、AlexNet）来提取图像特征，然后计算这些特征之间的距离，以评估图像之间的感知相似度。</p>
<figure>
<img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/e63001489b8b365f3bd6a46a08578664.jpeg"
                     
alt="LPIPS" 
                >
<figcaption aria-hidden="true">LPIPS</figcaption>
</figure>
<p>图示是将左右两幅图像与中间图像对比的结果。可以看到，传统方法（L2/PSNR,
SSIM,
FSIM）的结果与人的感知相反。而后三行通过神经网络提取特征的方法，能更符合人的感知，来评判图片的相似度。</p>
<h3 id="倒角距离">倒角距离</h3>
<p>出自：</p>
<blockquote>
<p>H. Fan, S. Hao, and L. Guibas, “A point set generation network for 3D
object reconstruction from a single image,” <a class="link" 
 href="https://so.csdn.net/so/search?q=CVPR&amp;spm=1001.2101.3001.7020" >CVPR<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>,
2017.</p>
</blockquote>
<figure>
<img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/2c25811a255e9fb0702799148f56c8ed.png"
                     
alt="Chamfer distance" 
                >
<figcaption aria-hidden="true">Chamfer distance</figcaption>
</figure>
<p>算法：</p>
<ol type="1">
<li>对S1中任意一点x，计算它与S2中所有点的距离，取最小距离的平方。</li>
<li>遍历S1中的点，重复1中过程，求和所有距离平方。</li>
<li>同样的步骤，对S2中所有点遍历，重复1、2过程。</li>
<li>将两个求和结果相加，作为倒角距离。</li>
</ol>
<p>倒角距离用于衡量两个点云之间的相似度。如果该距离较大，则说明两组点云区别较大；如果距离较小，则说明重建效果较好。</p>
<h2 id="实验">实验</h2>
<h3 id="实验环境">实验环境</h3>
<ul>
<li><strong>Vanilla Gaussian Splatting</strong>: RTX 3090 * 1</li>
<li><strong>NeRF-based models</strong>: RTX 3090 * 4</li>
</ul>
<h3 id="实验结果">实验结果</h3>
<figure>
<img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/3f83245b067971c4b84de5cd9895d823.png"
                     
alt="Table3" 
                >
<figcaption aria-hidden="true">Table3</figcaption>
</figure>
<ul>
<li>3DGS和SuGaR在图像的渲染中，有更优的效果（三个参数都更优），且训练时间更短。</li>
</ul>
<figure>
<img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/b6069787b5c845e9080f4ef1d4751090.png"
                     
alt="Table4" 
                >
<figcaption aria-hidden="true">Table4</figcaption>
</figure>
<ul>
<li>NeRF: 使用ns-export生成3D点云。</li>
<li>3DGS: 每个Gaussian Splatting的均值作为一个点，输出点云。</li>
<li>神经辐射场生成的点云，通常包含很多与场景无关的异常值。</li>
<li>3DGS也存在边缘效应，边缘会模糊。</li>
</ul>
<figure>
<img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/b9ceed006fcc21ee2617014e59db17c1.png"
                     
alt="CD" 
                >
<figcaption aria-hidden="true">CD</figcaption>
</figure>
<p>（图源项目网址：<a class="link" 
 href="https://saliteta.github.io/CUHKSZ_SMBU/" >GauU-Scene<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>）</p>
<ul>
<li>NeRFacto，虽然在图像生成得分最低，但是倒角距离最小。而Instant-NGP和SuGaR分别是倒数第一和倒数第二。这一实验结果揭示了基于图像的测量无法代表底层几何结构的基本事实。</li>
<li>SuGaR
是一种专为几何对齐设计的方法，排名却倒数。再对SuGaR进行定量分析，发现SuGaR在几何重建方面确实有更好的表现。</li>
</ul>
<figure>
<img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/3472d29a30085a95fb9679362e2c9f49.png"
                     
alt="SuGaR" 
                >
<figcaption aria-hidden="true">SuGaR</figcaption>
</figure>
<p>图中的蓝点在其他方法中很常见，而绿色甚至略带红色的点在其他方法中却很少见。更何况SuGaR中绿色点如此之多。
从定量的角度来看，如果我们忽略这里显示的异常值，SuGaR
的确是最好的方法。</p>
<figure>
<img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/0a3a7c7970e0d897124e5fa0d668a98d.png"
                     
alt="Figure6" 
                >
<figcaption aria-hidden="true">Figure6</figcaption>
</figure>
<p>对高斯泼溅的alpha值进行了简单分析，其中几乎三分之二的alpha值几乎是透明的。通过删除这些值，渲染的图像变得更加清晰，几乎没有信息丢失。这些近乎透明的高斯飞溅实例漂浮在3D空间中。尽管它们在渲染图像中看不到，但它们会导致几何测量指标的退化。</p>
]]></content>
      <categories>
        <category>三维重建</category>
      </categories>
      <tags>
        <tag>NeRF</tag>
        <tag>3DGS</tag>
      </tags>
  </entry>
  <entry>
    <title>SplatSim 论文解读</title>
    <url>/2024/11/06/06-SplatSim/</url>
    <content><![CDATA[<h2 id="背景">背景</h2>
<p>Sim2Real是机器人技术中的一个核心问题，涉及将模拟环境中学到的控制策略转移到现实世界环境中。目前的方法基本都依赖于深度、触觉传感或点云输入等感知方式。相比之下，RGB
图像很少用作机器人学习应用中的主要传感方式。优于 Sim2Real
传输中的其他常用方式。它们捕捉关键的视觉细节，例如颜色、纹理、照明和表面反射率等，这对于理解复杂的环境至关重要。此外，RGB
图像很容易在现实环境中使用相机获取，并且与人类感知紧密结合，使其非常适合解释动态和复杂场景中的复杂细节。</p>
<p>为什么很难将使用 RGB
信息进行模拟训练的策略部署到现实世界呢？是因为机器人在模拟器中观察到的图像分布与它在现实世界中看到的图像分布有很大不同。本文提出了一种新颖的方法来减少
RGB 图像的 Sim2Real 差距。利用 Gaussian Splatting
作为照片级真实感渲染，使用现有模拟器作为物理主干。利用 Gaussian
Splatting
作为主要渲染基元，取代现有模拟器中传统的基于网格的表示，以显著提高渲染场景的照片真实感。</p>
<h2 id="方法">方法</h2>
<ul>
<li><strong>关键前提</strong>：准确分割现实场景中高斯分布表示的每个刚体，并识别其相对于模拟器的相应的齐次变换。那么就可以渲染新姿势下的刚体。</li>
<li><strong>底层表示</strong>：不使用网格图元，而是使用高斯图作为底层表示。</li>
</ul>
<h3 id="a.-问题描述">A. 问题描述</h3>
<p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="4.349ex" height="1.952ex" role="img" focusable="false" viewBox="0 -705 1922.2 862.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="53" d="M554 512Q536 512 536 522Q536 525 539 539T542 564Q542 588 528 604Q515 616 482 625T410 635Q374 635 349 624T312 594T295 561T290 532Q290 505 303 482T342 442T378 419T409 404Q435 391 451 383T494 357T535 323T562 282T574 231Q574 133 464 56T220 -22Q138 -22 78 21T18 123Q18 184 61 227T156 274Q178 274 178 263Q178 260 177 258Q172 247 164 239T151 227T136 218L127 213L124 202Q118 186 118 163Q120 124 165 86T292 48Q374 48 423 86T473 186V193Q473 267 347 327Q268 364 239 389Q191 431 191 486Q191 547 242 600T356 679T470 705Q472 705 478 705T489 704Q551 704 596 682T642 610Q642 566 621 545Q592 516 554 512Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(639,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(451,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(917,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1446,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g></g></g></g></g></svg></mjx-container></span>
表示真实场景的Gaussian Splat。 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.04ex;" xmlns="http://www.w3.org/2000/svg" width="3.68ex" height="2.972ex" role="img" focusable="false" viewBox="0 -853.7 1626.6 1313.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="53" d="M554 512Q536 512 536 522Q536 525 539 539T542 564Q542 588 528 604Q515 616 482 625T410 635Q374 635 349 624T312 594T295 561T290 532Q290 505 303 482T342 442T378 419T409 404Q435 391 451 383T494 357T535 323T562 282T574 231Q574 133 464 56T220 -22Q138 -22 78 21T18 123Q18 184 61 227T156 274Q178 274 178 263Q178 260 177 258Q172 247 164 239T151 227T136 218L127 213L124 202Q118 186 118 163Q120 124 165 86T292 48Q374 48 423 86T473 186V193Q473 267 347 327Q268 364 239 389Q191 431 191 486Q191 547 242 600T356 679T470 705Q472 705 478 705T489 704Q551 704 596 682T642 610Q642 566 621 545Q592 516 554 512Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(726.8,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(639,-315.5) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(485,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(914,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g></g></svg></mjx-container></span>
表示场景中第k个object的Gaussian Splat。
目标是为任何模拟器中的机器人，使用 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="4.349ex" height="1.952ex" role="img" focusable="false" viewBox="0 -705 1922.2 862.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="53" d="M554 512Q536 512 536 522Q536 525 539 539T542 564Q542 588 528 604Q515 616 482 625T410 635Q374 635 349 624T312 594T295 561T290 532Q290 505 303 482T342 442T378 419T409 404Q435 391 451 383T494 357T535 323T562 282T574 231Q574 133 464 56T220 -22Q138 -22 78 21T18 123Q18 184 61 227T156 274Q178 274 178 263Q178 260 177 258Q172 247 164 239T151 227T136 218L127 213L124 202Q118 186 118 163Q120 124 165 86T292 48Q374 48 423 86T473 186V193Q473 267 347 327Q268 364 239 389Q191 431 191 486Q191 547 242 600T356 679T470 705Q472 705 478 705T489 704Q551 704 596 682T642 610Q642 566 621 545Q592 516 554 512Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(639,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(451,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(917,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1446,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g></g></g></g></g></svg></mjx-container></span> 来生成真实的渲染 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="4.471ex" height="1.879ex" role="img" focusable="false" viewBox="0 -830.4 1976.3 830.4"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="49" d="M174 0H31Q-13 0 -21 2T-30 12Q-30 23 -17 36Q9 60 42 68L155 70Q187 102 214 179T257 333T302 491T366 610L369 614H305Q221 611 188 607T145 596T128 569Q119 543 94 529T47 512Q28 512 28 524Q28 527 32 539Q56 614 159 654Q218 678 312 682Q314 682 339 682T404 682T481 683H632Q642 678 642 671Q642 657 621 641T577 617Q570 615 507 614H444Q427 592 406 542Q382 478 355 366T310 209Q280 123 238 78L230 69H330Q442 70 442 74Q443 74 443 77T447 87T460 105Q490 134 527 137Q545 137 545 125Q545 120 542 112Q531 78 491 49T399 7Q379 2 360 2T174 0Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(729.9,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(469,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(814,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></g></svg></mjx-container></span>
。然后在这样的表示下，收集专家的演示 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.054ex" height="1.072ex" role="img" focusable="false" viewBox="0 -452 466 474"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"></path></g></g></g></svg></mjx-container></span>​​ 来用于训练基于RGB的策略。</p>
<p>专家 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.054ex" height="1.072ex" role="img" focusable="false" viewBox="0 -452 466 474"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"></path></g></g></g></svg></mjx-container></span> 生成由状态-动作对<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="21.955ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 9704 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(889,0)"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mn" transform="translate(502,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1794.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(2239.2,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(3204.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3593.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(4038.4,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(5377.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(5821.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(6210.8,0)"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(502,-150) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="mo" transform="translate(7260.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(7705.2,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="mo" transform="translate(8815,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(9204,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container></span>组成的轨迹
<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex;" xmlns="http://www.w3.org/2000/svg" width="1.922ex" height="1.35ex" role="img" focusable="false" viewBox="0 -431 849.5 596.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"></path></g><g data-mml-node="mi" transform="translate(470,-150) scale(0.707)"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"></path></g></g></g></g></svg></mjx-container></span> 。每个时间步 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.817ex" height="1.441ex" role="img" focusable="false" viewBox="0 -626 361 637"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container></span> 的状态定义为 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.623ex;" xmlns="http://www.w3.org/2000/svg" width="19.148ex" height="2.509ex" role="img" focusable="false" viewBox="0 -833.9 8463.6 1109.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(502,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1085,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2140.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(2529.8,0)"><g data-mml-node="mi"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="TeXAtom" transform="translate(479,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g><g data-mml-node="mo" transform="translate(3314.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msubsup" transform="translate(3758.8,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(605,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(605,-259.6) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g><g data-mml-node="mo" transform="translate(4767.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(5212,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(6550.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msubsup" transform="translate(6995.3,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(605,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(605,-267.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g><g data-mml-node="mo" transform="translate(8074.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>
。其中 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="7.766ex" height="1.984ex" role="img" focusable="false" viewBox="0 -683 3432.7 877"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(479,-150) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mo" transform="translate(1062,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="msup" transform="translate(2006.8,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="211D" d="M17 665Q17 672 28 683H221Q415 681 439 677Q461 673 481 667T516 654T544 639T566 623T584 607T597 592T607 578T614 565T618 554L621 548Q626 530 626 497Q626 447 613 419Q578 348 473 326L455 321Q462 310 473 292T517 226T578 141T637 72T686 35Q705 30 705 16Q705 7 693 -1H510Q503 6 404 159L306 310H268V183Q270 67 271 59Q274 42 291 38Q295 37 319 35Q344 35 353 28Q362 17 353 3L346 -1H28Q16 5 16 16Q16 35 55 35Q96 38 101 52Q106 60 106 341T101 632Q95 645 55 648Q17 648 17 665ZM241 35Q238 42 237 45T235 78T233 163T233 337V621L237 635L244 648H133Q136 641 137 638T139 603T141 517T141 341Q141 131 140 89T134 37Q133 36 133 35H241ZM457 496Q457 540 449 570T425 615T400 634T377 643Q374 643 339 648Q300 648 281 635Q271 628 270 610T268 481V346H284Q327 346 375 352Q421 364 439 392T457 496ZM492 537T492 496T488 427T478 389T469 371T464 361Q464 360 465 360Q469 360 497 370Q593 400 593 495Q593 592 477 630L457 637L461 626Q474 611 488 561Q492 537 492 496ZM464 243Q411 317 410 317Q404 317 401 315Q384 315 370 312H346L526 35H619L606 50Q553 109 464 243Z"></path></g></g><g data-mml-node="mi" transform="translate(755,363) scale(0.707)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></span>
代表机器人的关节角度。<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.623ex;" xmlns="http://www.w3.org/2000/svg" width="12.996ex" height="2.554ex" role="img" focusable="false" viewBox="0 -853.7 5744.4 1128.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,363) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(605,-267.4) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mo" transform="translate(1301.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2357,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msubsup" transform="translate(2746,0)"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(536,363) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(536,-267.4) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mo" transform="translate(3700.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msubsup" transform="translate(4145,0)"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mi" transform="translate(792,363) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(792,-267.4) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mo" transform="translate(5355.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 表示第 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.179ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 521 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></svg></mjx-container></span> 个 object 的位置 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.623ex;" xmlns="http://www.w3.org/2000/svg" width="7.546ex" height="2.554ex" role="img" focusable="false" viewBox="0 -853.7 3335.5 1128.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="TeXAtom" transform="translate(536,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(536,-267.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1232.2,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="msup" transform="translate(2177,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="211D" d="M17 665Q17 672 28 683H221Q415 681 439 677Q461 673 481 667T516 654T544 639T566 623T584 607T597 592T607 578T614 565T618 554L621 548Q626 530 626 497Q626 447 613 419Q578 348 473 326L455 321Q462 310 473 292T517 226T578 141T637 72T686 35Q705 30 705 16Q705 7 693 -1H510Q503 6 404 159L306 310H268V183Q270 67 271 59Q274 42 291 38Q295 37 319 35Q344 35 353 28Q362 17 353 3L346 -1H28Q16 5 16 16Q16 35 55 35Q96 38 101 52Q106 60 106 341T101 632Q95 645 55 648Q17 648 17 665ZM241 35Q238 42 237 45T235 78T233 163T233 337V621L237 635L244 648H133Q136 641 137 638T139 603T141 517T141 341Q141 131 140 89T134 37Q133 36 133 35H241ZM457 496Q457 540 449 570T425 615T400 634T377 643Q374 643 339 648Q300 648 281 635Q271 628 270 610T268 481V346H284Q327 346 375 352Q421 364 439 392T457 496ZM492 537T492 496T488 427T478 389T469 371T464 361Q464 360 465 360Q469 360 497 370Q593 400 593 495Q593 592 477 630L457 637L461 626Q474 611 488 561Q492 537 492 496ZM464 243Q411 317 410 317Q404 317 401 315Q384 315 370 312H346L526 35H619L606 50Q553 109 464 243Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(755,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></g></g></svg></mjx-container></span> 和方向 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.623ex;" xmlns="http://www.w3.org/2000/svg" width="11.581ex" height="2.554ex" role="img" focusable="false" viewBox="0 -853.7 5119 1128.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(792,-267.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1488.2,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(2433,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(3078,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(3841,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(4230,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(4730,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 。对应的动作 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.623ex;" xmlns="http://www.w3.org/2000/svg" width="12.467ex" height="2.319ex" role="img" focusable="false" viewBox="0 -750 5510.5 1025.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mo" transform="translate(1145,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2200.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msubsup" transform="translate(2589.8,0)"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(536,363) scale(0.707)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(536,-267.4) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mo" transform="translate(3505.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msubsup" transform="translate(3950,0)"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g><g data-mml-node="mi" transform="translate(792,-267.4) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mo" transform="translate(5121.5,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 指末端执行器的位置
<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.623ex;" xmlns="http://www.w3.org/2000/svg" width="7.458ex" height="2.508ex" role="img" focusable="false" viewBox="0 -833.2 3296.6 1108.4"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="TeXAtom" transform="translate(536,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(536,-267.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1193.3,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="msup" transform="translate(2138.1,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="211D" d="M17 665Q17 672 28 683H221Q415 681 439 677Q461 673 481 667T516 654T544 639T566 623T584 607T597 592T607 578T614 565T618 554L621 548Q626 530 626 497Q626 447 613 419Q578 348 473 326L455 321Q462 310 473 292T517 226T578 141T637 72T686 35Q705 30 705 16Q705 7 693 -1H510Q503 6 404 159L306 310H268V183Q270 67 271 59Q274 42 291 38Q295 37 319 35Q344 35 353 28Q362 17 353 3L346 -1H28Q16 5 16 16Q16 35 55 35Q96 38 101 52Q106 60 106 341T101 632Q95 645 55 648Q17 648 17 665ZM241 35Q238 42 237 45T235 78T233 163T233 337V621L237 635L244 648H133Q136 641 137 638T139 603T141 517T141 341Q141 131 140 89T134 37Q133 36 133 35H241ZM457 496Q457 540 449 570T425 615T400 634T377 643Q374 643 339 648Q300 648 281 635Q271 628 270 610T268 481V346H284Q327 346 375 352Q421 364 439 392T457 496ZM492 537T492 496T488 427T478 389T469 371T464 361Q464 360 465 360Q469 360 497 370Q593 400 593 495Q593 592 477 630L457 637L461 626Q474 611 488 561Q492 537 492 496ZM464 243Q411 317 410 317Q404 317 401 315Q384 315 370 312H346L526 35H619L606 50Q553 109 464 243Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(755,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></g></g></svg></mjx-container></span> 和方向
<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.623ex;" xmlns="http://www.w3.org/2000/svg" width="11.493ex" height="2.319ex" role="img" focusable="false" viewBox="0 -750 5080.1 1025.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(792,-267.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1449.3,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(2394.1,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(3039.1,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(3802.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(4191.1,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(4691.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 。</p>
<p>渲染图 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="4.155ex" height="1.879ex" role="img" focusable="false" viewBox="0 -830.4 1836.6 830.4"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="TeXAtom" transform="translate(590.2,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(469,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(814,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></g></svg></mjx-container></span> ，由模拟状态
<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="1.826ex" height="1.357ex" role="img" focusable="false" viewBox="0 -442 807.3 599.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(502,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></g></g></svg></mjx-container></span> 推导而来，作为输入训练策略
<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.36ex;" xmlns="http://www.w3.org/2000/svg" width="2.304ex" height="1.335ex" role="img" focusable="false" viewBox="0 -431 1018.6 590.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g><g data-mml-node="TeXAtom" transform="translate(603,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"></path></g></g></g></g></g></svg></mjx-container></span>
。测试时，该策略只依赖于现实世界的RGB图像 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="4.238ex" height="1.932ex" role="img" focusable="false" viewBox="0 -853.7 1873.4 853.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="TeXAtom" transform="translate(590.2,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(451,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(917,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1446,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g></g></g></g></g></svg></mjx-container></span> 。</p>
<h3 id="b.-坐标系定义和变换">B. 坐标系定义和变换</h3>
<p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="4.605ex" height="1.902ex" role="img" focusable="false" viewBox="0 -683 2035.2 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="46" d="M199 579Q181 579 181 590Q181 598 188 611T212 639T260 666T335 682Q336 682 349 682T383 682T431 682T493 683T561 683Q776 682 784 681Q826 673 829 647Q829 620 797 600T744 580Q728 580 728 595Q729 607 713 610Q698 613 598 614H500L499 610Q499 598 467 486T428 367Q428 365 551 365H674Q683 360 684 355Q687 346 677 329Q666 312 642 299T598 285Q586 285 582 296H402L394 277Q386 258 373 229T346 167T315 102T286 51Q265 22 225 -5T133 -32Q108 -32 87 -25T54 -7T33 15T21 35T18 47Q18 60 44 80T98 103Q108 103 111 101T119 88Q130 66 150 54T179 39T195 37Q199 37 203 43Q217 67 245 125T318 300T391 532Q393 543 398 564T406 598T409 613T339 614H269Q229 579 199 579Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(752,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(451,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(917,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1446,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g></g></g></g></g></svg></mjx-container></span>：真实世界坐标系 -
主要参考系。</p>
<p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="5.352ex" height="1.902ex" role="img" focusable="false" viewBox="0 -683 2365.4 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="46" d="M199 579Q181 579 181 590Q181 598 188 611T212 639T260 666T335 682Q336 682 349 682T383 682T431 682T493 683T561 683Q776 682 784 681Q826 673 829 647Q829 620 797 600T744 580Q728 580 728 595Q729 607 713 610Q698 613 598 614H500L499 610Q499 598 467 486T428 367Q428 365 551 365H674Q683 360 684 355Q687 346 677 329Q666 312 642 299T598 285Q586 285 582 296H402L394 277Q386 258 373 229T346 167T315 102T286 51Q265 22 225 -5T133 -32Q108 -32 87 -25T54 -7T33 15T21 35T18 47Q18 60 44 80T98 103Q108 103 111 101T119 88Q130 66 150 54T179 39T195 37Q199 37 203 43Q217 67 245 125T318 300T391 532Q393 543 398 564T406 598T409 613T339 614H269Q229 579 199 579Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(752,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(451,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(936,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(1365,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1850,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></g></g></svg></mjx-container></span>：真实世界机器人坐标系。</p>
<p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="4.521ex" height="1.902ex" role="img" focusable="false" viewBox="0 -683 1998.4 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="46" d="M199 579Q181 579 181 590Q181 598 188 611T212 639T260 666T335 682Q336 682 349 682T383 682T431 682T493 683T561 683Q776 682 784 681Q826 673 829 647Q829 620 797 600T744 580Q728 580 728 595Q729 607 713 610Q698 613 598 614H500L499 610Q499 598 467 486T428 367Q428 365 551 365H674Q683 360 684 355Q687 346 677 329Q666 312 642 299T598 285Q586 285 582 296H402L394 277Q386 258 373 229T346 167T315 102T286 51Q265 22 225 -5T133 -32Q108 -32 87 -25T54 -7T33 15T21 35T18 47Q18 60 44 80T98 103Q108 103 111 101T119 88Q130 66 150 54T179 39T195 37Q199 37 203 43Q217 67 245 125T318 300T391 532Q393 543 398 564T406 598T409 613T339 614H269Q229 579 199 579Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(752,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(469,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(814,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></g></svg></mjx-container></span>：模拟器坐标系。</p>
<p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="5.352ex" height="1.902ex" role="img" focusable="false" viewBox="0 -683 2365.4 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="46" d="M199 579Q181 579 181 590Q181 598 188 611T212 639T260 666T335 682Q336 682 349 682T383 682T431 682T493 683T561 683Q776 682 784 681Q826 673 829 647Q829 620 797 600T744 580Q728 580 728 595Q729 607 713 610Q698 613 598 614H500L499 610Q499 598 467 486T428 367Q428 365 551 365H674Q683 360 684 355Q687 346 677 329Q666 312 642 299T598 285Q586 285 582 296H402L394 277Q386 258 373 229T346 167T315 102T286 51Q265 22 225 -5T133 -32Q108 -32 87 -25T54 -7T33 15T21 35T18 47Q18 60 44 80T98 103Q108 103 111 101T119 88Q130 66 150 54T179 39T195 37Q199 37 203 43Q217 67 245 125T318 300T391 532Q393 543 398 564T406 598T409 613T339 614H269Q229 579 199 579Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(752,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(451,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(936,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(1365,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1850,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></g></g></svg></mjx-container></span> 和 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="4.521ex" height="1.902ex" role="img" focusable="false" viewBox="0 -683 1998.4 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="46" d="M199 579Q181 579 181 590Q181 598 188 611T212 639T260 666T335 682Q336 682 349 682T383 682T431 682T493 683T561 683Q776 682 784 681Q826 673 829 647Q829 620 797 600T744 580Q728 580 728 595Q729 607 713 610Q698 613 598 614H500L499 610Q499 598 467 486T428 367Q428 365 551 365H674Q683 360 684 355Q687 346 677 329Q666 312 642 299T598 285Q586 285 582 296H402L394 277Q386 258 373 229T346 167T315 102T286 51Q265 22 225 -5T133 -32Q108 -32 87 -25T54 -7T33 15T21 35T18 47Q18 60 44 80T98 103Q108 103 111 101T119 88Q130 66 150 54T179 39T195 37Q199 37 203 43Q217 67 245 125T318 300T391 532Q393 543 398 564T406 598T409 613T339 614H269Q229 579 199 579Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(752,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(469,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(814,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></g></svg></mjx-container></span> 都会与 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="4.605ex" height="1.902ex" role="img" focusable="false" viewBox="0 -683 2035.2 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="46" d="M199 579Q181 579 181 590Q181 598 188 611T212 639T260 666T335 682Q336 682 349 682T383 682T431 682T493 683T561 683Q776 682 784 681Q826 673 829 647Q829 620 797 600T744 580Q728 580 728 595Q729 607 713 610Q698 613 598 614H500L499 610Q499 598 467 486T428 367Q428 365 551 365H674Q683 360 684 355Q687 346 677 329Q666 312 642 299T598 285Q586 285 582 296H402L394 277Q386 258 373 229T346 167T315 102T286 51Q265 22 225 -5T133 -32Q108 -32 87 -25T54 -7T33 15T21 35T18 47Q18 60 44 80T98 103Q108 103 111 101T119 88Q130 66 150 54T179 39T195 37Q199 37 203 43Q217 67 245 125T318 300T391 532Q393 543 398 564T406 598T409 613T339 614H269Q229 579 199 579Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(752,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(451,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(917,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1446,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g></g></g></g></g></svg></mjx-container></span>
进行对齐，以确保模拟器中机器人底座和现实世界共享相同的坐标系。</p>
<h3 id="c.-机器人-splat-模型">C. 机器人 Splat 模型</h3>
<p><img lazyload="" src="/images/loading.svg" data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/1c7c7e02cbb7f0779e69c9b28f154dd4.png" alt="coords" style="zoom: 67%;"></p>
<p>首先创建场景的高斯分布（其中机器人位于其原始位置），在静态场景中对机器人进行可视化。使用
ICP
算法手动分割机器人的点云并与标准机器人框架对齐。然后对每个机器人关节进行分段，并应用正向运动学变换，从而能够以任意关节配置渲染机器人。</p>
<h3 id="d.-object-splat模型">D. Object Splat模型</h3>
<p>与机器人渲染类似，使用 ICP 来对齐每个对象的 3D 高斯 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.04ex;" xmlns="http://www.w3.org/2000/svg" width="3.68ex" height="2.972ex" role="img" focusable="false" viewBox="0 -853.7 1626.6 1313.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="53" d="M554 512Q536 512 536 522Q536 525 539 539T542 564Q542 588 528 604Q515 616 482 625T410 635Q374 635 349 624T312 594T295 561T290 532Q290 505 303 482T342 442T378 419T409 404Q435 391 451 383T494 357T535 323T562 282T574 231Q574 133 464 56T220 -22Q138 -22 78 21T18 123Q18 184 61 227T156 274Q178 274 178 263Q178 260 177 258Q172 247 164 239T151 227T136 218L127 213L124 202Q118 186 118 163Q120 124 165 86T292 48Q374 48 423 86T473 186V193Q473 267 347 327Q268 364 239 389Q191 431 191 486Q191 547 242 600T356 679T470 705Q472 705 478 705T489 704Q551 704 596 682T642 610Q642 566 621 545Q592 516 554 512Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(726.8,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(639,-315.5) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(485,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(914,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g></g></svg></mjx-container></span>​​
到其模拟的真实点云。 <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.171ex;" xmlns="http://www.w3.org/2000/svg" width="32.529ex" height="3.534ex" role="img" focusable="false" viewBox="0 -1044.6 14378 1562"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(981.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2037.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msubsup" transform="translate(2426.6,0)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="TeXAtom" transform="translate(793,556.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="46" d="M199 579Q181 579 181 590Q181 598 188 611T212 639T260 666T335 682Q336 682 349 682T383 682T431 682T493 683T561 683Q776 682 784 681Q826 673 829 647Q829 620 797 600T744 580Q728 580 728 595Q729 607 713 610Q698 613 598 614H500L499 610Q499 598 467 486T428 367Q428 365 551 365H674Q683 360 684 355Q687 346 677 329Q666 312 642 299T598 285Q586 285 582 296H402L394 277Q386 258 373 229T346 167T315 102T286 51Q265 22 225 -5T133 -32Q108 -32 87 -25T54 -7T33 15T21 35T18 47Q18 60 44 80T98 103Q108 103 111 101T119 88Q130 66 150 54T179 39T195 37Q199 37 203 43Q217 67 245 125T318 300T391 532Q393 543 398 564T406 598T409 613T339 614H269Q229 579 199 579Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(752,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(469,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(972,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(1270,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1799,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></g><g data-mml-node="TeXAtom" transform="translate(617,-309.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="46" d="M199 579Q181 579 181 590Q181 598 188 611T212 639T260 666T335 682Q336 682 349 682T383 682T431 682T493 683T561 683Q776 682 784 681Q826 673 829 647Q829 620 797 600T744 580Q728 580 728 595Q729 607 713 610Q698 613 598 614H500L499 610Q499 598 467 486T428 367Q428 365 551 365H674Q683 360 684 355Q687 346 677 329Q666 312 642 299T598 285Q586 285 582 296H402L394 277Q386 258 373 229T346 167T315 102T286 51Q265 22 225 -5T133 -32Q108 -32 87 -25T54 -7T33 15T21 35T18 47Q18 60 44 80T98 103Q108 103 111 101T119 88Q130 66 150 54T179 39T195 37Q199 37 203 43Q217 67 245 125T318 300T391 532Q393 543 398 564T406 598T409 613T339 614H269Q229 579 199 579Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(752,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(451,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(936,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(1365,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1850,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></g></g><g data-mml-node="msup" transform="translate(4916.7,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" transform="translate(422,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(778,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(6514.6,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="msubsup" transform="translate(7014.8,0)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="TeXAtom" transform="translate(793,497.8) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(521,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1299,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1784,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(2213,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(617,-324.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mi" transform="translate(550,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g><g data-mml-node="mo" transform="translate(9936.2,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="msubsup" transform="translate(10436.4,0)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="TeXAtom" transform="translate(793,561.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="46" d="M199 579Q181 579 181 590Q181 598 188 611T212 639T260 666T335 682Q336 682 349 682T383 682T431 682T493 683T561 683Q776 682 784 681Q826 673 829 647Q829 620 797 600T744 580Q728 580 728 595Q729 607 713 610Q698 613 598 614H500L499 610Q499 598 467 486T428 367Q428 365 551 365H674Q683 360 684 355Q687 346 677 329Q666 312 642 299T598 285Q586 285 582 296H402L394 277Q386 258 373 229T346 167T315 102T286 51Q265 22 225 -5T133 -32Q108 -32 87 -25T54 -7T33 15T21 35T18 47Q18 60 44 80T98 103Q108 103 111 101T119 88Q130 66 150 54T179 39T195 37Q199 37 203 43Q217 67 245 125T318 300T391 532Q393 543 398 564T406 598T409 613T339 614H269Q229 579 199 579Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(752,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(521,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1299,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1784,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(2213,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(2625,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2903,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(3372,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(3875,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(4173,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(4702,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></g><g data-mml-node="TeXAtom" transform="translate(617,-309.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="46" d="M199 579Q181 579 181 590Q181 598 188 611T212 639T260 666T335 682Q336 682 349 682T383 682T431 682T493 683T561 683Q776 682 784 681Q826 673 829 647Q829 620 797 600T744 580Q728 580 728 595Q729 607 713 610Q698 613 598 614H500L499 610Q499 598 467 486T428 367Q428 365 551 365H674Q683 360 684 355Q687 346 677 329Q666 312 642 299T598 285Q586 285 582 296H402L394 277Q386 258 373 229T346 167T315 102T286 51Q265 22 225 -5T133 -32Q108 -32 87 -25T54 -7T33 15T21 35T18 47Q18 60 44 80T98 103Q108 103 111 101T119 88Q130 66 150 54T179 39T195 37Q199 37 203 43Q217 67 245 125T318 300T391 532Q393 543 398 564T406 598T409 613T339 614H269Q229 579 199 579Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(752,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(521,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1299,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1784,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(2213,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(2625,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2903,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(3372,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3717,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></g></g></g></svg></mjx-container></span></p>
<h3 id="e.-连接的物体">E. 连接的物体</h3>
<p><img lazyload="" src="/images/loading.svg" data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/12feffa9ebb35ef048fd028dce32ab5d.png" alt="Articulated Object" style="zoom:67%;"></p>
<p>虽然 CAD
轴对齐的边界框允许对机器人连杆进行直接分割，但某些物体（例如平行钳口夹具）由于与标准轴未对准而带来了挑战，也就是说，仅使用边界框无法将夹具连杆整齐地分割出来。文章使用基于
KNN 的分类器对平行颚式夹具等铰接物体的链接进行分段。</p>
<h3 id="f.-使用-splatsim-渲染模拟轨迹">F. 使用 SplatSim
渲染模拟轨迹</h3>
<p>既然已经能够在场景中渲染单个刚体，那么可以用它来表示任何模拟轨迹
<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.159ex" height="1.889ex" role="img" focusable="false" viewBox="0 -677 954.1 834.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="TeXAtom" transform="translate(617,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D716" d="M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z"></path></g></g></g></g></g></svg></mjx-container></span>
。用这些基于状态的转换和C、D里提到的方法，获得演示，从而让策略从 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.687ex;" xmlns="http://www.w3.org/2000/svg" width="41.099ex" height="2.565ex" role="img" focusable="false" viewBox="0 -830.4 18165.7 1133.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"></path></g><g data-mml-node="TeXAtom" transform="translate(470,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="47" d="M216 68Q155 68 115 100T59 177T44 273Q44 299 50 333T73 421T133 533T239 632Q346 704 466 704Q508 704 515 703Q555 696 577 681T599 635Q599 605 570 560T523 496Q490 466 455 466Q440 466 440 475T469 526T499 589Q499 605 489 617Q460 636 403 636Q343 636 295 611T220 548T174 464T150 382T144 318Q144 241 180 189T287 137Q325 137 359 160Q428 205 466 322Q472 342 501 359T551 376Q557 376 560 373T564 368L565 365Q560 341 551 302T512 173T451 31Q359 -119 204 -119Q163 -118 127 -109T74 -91T53 -77Q52 -75 52 -71Q52 -54 79 -35T132 -14H140L151 -19Q210 -49 281 -49H289Q312 -49 329 -31Q351 -7 372 36T405 109T416 142L408 136Q401 131 392 125T369 111T338 96T303 82T261 72T216 68Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(1218.5,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2274.3,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mo" transform="translate(2774.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msubsup" transform="translate(3163.3,0)"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="TeXAtom" transform="translate(590.2,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(469,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(814,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(473,-295.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(4999.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(5444.6,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(562,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(6410.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(6799.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(7243.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msubsup" transform="translate(7632.8,0)"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="TeXAtom" transform="translate(590.2,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(469,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(814,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(473,-295.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mo" transform="translate(9469.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(9914.1,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(562,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mo" transform="translate(10879.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(11268.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(11713.3,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(13052,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(13496.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msubsup" transform="translate(13885.6,0)"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="TeXAtom" transform="translate(590.2,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(469,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(814,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(473,-303.5) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g><g data-mml-node="mo" transform="translate(15722.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(16166.9,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(562,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g><g data-mml-node="mo" transform="translate(17276.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(17665.7,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container></span>
进行学习。</p>
<h3 id="g.-策略训练和部署">G. 策略训练和部署</h3>
<p>为了在模拟器中从生成的演示 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.53ex;" xmlns="http://www.w3.org/2000/svg" width="2.128ex" height="1.505ex" role="img" focusable="false" viewBox="0 -431 940.7 665.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"></path></g><g data-mml-node="TeXAtom" transform="translate(470,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="47" d="M216 68Q155 68 115 100T59 177T44 273Q44 299 50 333T73 421T133 533T239 632Q346 704 466 704Q508 704 515 703Q555 696 577 681T599 635Q599 605 570 560T523 496Q490 466 455 466Q440 466 440 475T469 526T499 589Q499 605 489 617Q460 636 403 636Q343 636 295 611T220 548T174 464T150 382T144 318Q144 241 180 189T287 137Q325 137 359 160Q428 205 466 322Q472 342 501 359T551 376Q557 376 560 373T564 368L565 365Q560 341 551 302T512 173T451 31Q359 -119 204 -119Q163 -118 127 -109T74 -91T53 -77Q52 -75 52 -71Q52 -54 79 -35T132 -14H140L151 -19Q210 -49 281 -49H289Q312 -49 329 -31Q351 -7 372 36T405 109T416 142L408 136Q401 131 392 125T369 111T338 96T303 82T261 72T216 68Z"></path></g></g></g></g></g></g></svg></mjx-container></span>​ 中学习
，采用扩散策略。尽管论文的方法显著缩小了 Sim2Real
视觉上的差距，但模拟环境和现实环境之间的差异仍然存在。例如，模拟场景缺乏阴影，刚体的假设会导致机器人电缆等可动部件的渲染不当。为了解决这些问题，论文在策略训练期间结合了图像增强，其中包括添加高斯噪声、随机擦除以及调整图像的亮度和对比度。这些增强显著增强了策略的稳健性并提高了其在实际部署过程中的性能。</p>
<h2 id="实验">实验</h2>
<h3 id="a.-现实世界和模拟中的演示">A. 现实世界和模拟中的演示</h3>
<p><img lazyload="" src="/images/loading.svg" data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/5c1e1f25c182fd193d795ada326b63b3.png" alt="Comparation" style="zoom:67%;"></p>
<p>在现实世界中，每项任务的演示都是由人类专家手动收集的。
相比之下，模拟器通过采用基于特权信息的运动规划器简化了这一过程，运动规划器利用特权信息自动生成数据，例如场景中每个刚体的位置和方向。
在有人类专家参与的情况下，模拟器不仅能在演示之间自动重置，从而减少工作量，更重要的是，它利用运动规划器，完全消除了人类干预的需要。这样，只需极少的人工输入，就能生成大规模、高质量的演示数据集。
因此，模拟器大大减少了数据收集所需的时间和精力。 如表 I
所示，在现实世界中收集演示数据需要约 20.5 个小时，而在模拟器中只需 3
个小时就能完成同样的任务，这充分体现了方法的高效性和可扩展性。</p>
<h3 id="b.-零样本策略部署结果">B. 零样本策略部署结果</h3>
<p><img lazyload="" src="/images/loading.svg" data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/3469ddcbe24f2849e73ac7001682e5f6.png" alt="Deployment Results" style="zoom:67%;"></p>
<p>以任务成功率为主要指标，评估了策略在四个接触丰富的真实世界任务中的部署情况。
如表 I 所示，方法实现了 86.25% 的 Sim2Real
传输平均成功率，而直接在真实世界数据上训练的策略成功率为
97.5%，这凸显了方法的有效性。 所有实验均使用配备了 Robotiq 2F-85 抓手和
2 个英特尔 Realsense D455 摄像头的 UR5 机器人，并在英伟达 RTX 3080Ti GPU
上部署了扩散策略。</p>
<ol type="1">
<li>T-Push 任务： T-Push 任务由 Diffusion
Policy推广，可捕捉非触觉操作的动态，其中涉及控制物体移动和接触力。
在训练中，人类专家使用 Gello teleoper-ation，在模拟中收集了 160 次演示。
测试时，机器人从随机位置出发，在零样本 Sim2Real 传输中取得了 90%
的成功率（36/40 次试验），如表 I 所示。
这一结果表明，框架在真实世界的演示中无需微调就能有效处理推动的动态过程。
此外，方法与 Real2Real（40/40）和 Sim2Sim（40/40）的性能相当。</li>
<li>Pick-Up-Apple 任务： Pick-Up-Apple
任务涉及在三维空间中抓取和操纵物体的完整姿态（即位置和方向）。
该任务旨在评估机器人在使用论文的模拟渲染场景进行训练时的抓取能力。
运动规划器利用模拟器中的特权状态信息（场景中每个刚体的准确位置和方向），生成了
400 个具有随机末端执行器位置和方向的演示。 如表 I
所示，在真实世界的试验中，策略在零样本 Sim2Real 传输中取得了 95%
的成功率（38/40 次试验）。</li>
<li>Orange on Plate 任务：
在这项任务中，机器人必须捡起一个橘子并将其放在盘子里。
在模拟过程中，运动规划器获取了特权信息，并生成了 400 次演示。
在训练过程中，末端执行器的位置和初始抓手状态是随机的。
测试期间，机器人总是从原点开始。 论文在 Sim2Real 的零点转移中取得了 90%
的成功率（36/40 次试验）。</li>
<li>Assembly 任务：
在这项任务中，机器人必须将一个长方体块放在另一个长方体块的顶部。
机器人从原点开始抓取绿色立方体，并将其放到红色立方体的顶部。
这项任务特别艰巨，因为机器人必须精确放置，否则立方体就会掉落，导致失败。
论文的 Sim2Real 策略在这项任务中的表现为 70%（28/40 次试验），而 Sim2Sim
的表现为 95%，Real2Real 的表现为 90%。</li>
</ol>
<h3 id="c.-量化机器人渲染">C. 量化机器人渲染</h3>
<p>通过与真实世界的图像进行比较，论文定量评估了在不同关节配置下渲染的机器人图像的准确性。
论文评估了 300 个不同机器人关节角度下的机器人渲染质量。
为了衡量渲染图像与真实世界图像之间的相似性，论文采用了图像渲染评估中常用的两个指标：
峰值信噪比（PSNR）和结构相似性指数（SSIM）。
尽管关节配置各不相同，但渲染图像的平均 PSNR 和 SSIM 分别达到了 22.62 和
0.7845，表明模拟图像非常接近真实世界 RGB 观察图像的视觉质量。</p>
<h3 id="d.-数据增强的效果">D. 数据增强的效果</h3>
<p>为了量化数据增强对策略在模拟与真实环境中性能的影响，论文对经过训练的策略进行了有增强和无增强的对比实验。
虽然在一致的环境（如 Sim2Sim 或 Real2Real
场景）中，扩散策略在没有增强的情况下也能有效执行，但将在模拟环境中训练的策略转移到真实世界时，由于渲染无法捕捉动态细节（如不断变化的反射和阴影），因此会引入领域偏移，从而需要额外的鲁棒性。
论文在训练过程中加入了随机噪音添加、色彩抖动和随机擦除等增强功能，以应对这些变化。
在 B 节的四项任务中，这些增强措施将该策略的性能从 21% 提高到
86.25%。</p>
<h2 id="结论">结论</h2>
<p>在这项工作中，论文利用高斯泼溅技术（Gaussian
Splatting）作为一种逼真的渲染技术，并与现有的基于物理交互的模拟器集成，从而缩小了基于
RGB 的操作策略的模拟与真实之间的差距。
论文的框架实现了在模拟中训练好的基于 RGB
的操作策略到真实环境中的零样本转移。
虽然论文的框架推动了当前最先进技术的发展，但它仍局限于刚体操纵，无法处理布、液体或植物等复杂物体。
未来计划将现有的框架与基于强化学习的方法相结合，以获得更多动态技能。还将进一步改进系统，以便在现实世界中训练和部署机器人执行高度复杂和接触丰富的任务。</p>
]]></content>
      <categories>
        <category>三维重建</category>
      </categories>
      <tags>
        <tag>3DGS</tag>
        <tag>Sim2Real</tag>
      </tags>
  </entry>
  <entry>
    <title>NeRF Studio简要教程</title>
    <url>/2024/11/12/08-NeRF_Studio/</url>
    <content><![CDATA[<h2 id="准备工作">准备工作</h2>
<h3 id="安装nerf-studio">安装NeRF Studio</h3>
<p><a class="link" 
 href="https://github.com/nerfstudio-project/nerfstudio?tab=readme-ov-file" >官方仓库<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>
写的教程已经很详尽了。</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/nerfstudio-project/nerfstudio.git</span><br><span class="line"><span class="built_in">cd</span> nerfstudio</span><br><span class="line">pip install --upgrade pip setuptools</span><br><span class="line">pip install -e .</span><br></pre></td></tr></table></figure></div>
<p>值得注意的是，<code>open3d</code>库只支持<code>python 3.8-3.11</code>，博主是用<code>python 3.10</code>安装的依赖。后面租了个服务器用<code>python 3.12</code>，结果找不到相应版本的open3d，建议还是按推荐配置来。</p>
<h3 id="安装tiny-cuda-nn">安装tiny-cuda-nn</h3>
<p>在训练过程中，终端出现了如下的warning：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">WARNING: Using a slow implementation <span class="keyword">for</span> the SHEncoding module. </span><br><span class="line">🏃 🏃 Install tcnn <span class="keyword">for</span> speedups 🏃 🏃</span><br><span class="line">pip install git+https://github.com/NVlabs/tiny-cuda-nn/#subdirectory=bindings/torch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">WARNING: Using a slow implementation <span class="keyword">for</span> the NeRFEncoding module. </span><br><span class="line">🏃 🏃 Install tcnn <span class="keyword">for</span> speedups 🏃 🏃</span><br><span class="line">pip install git+https://github.com/NVlabs/tiny-cuda-nn/#subdirectory=bindings/torch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">WARNING: Using a slow implementation <span class="keyword">for</span> the MLPWithHashEncoding module. </span><br><span class="line">🏃 🏃 Install tcnn <span class="keyword">for</span> speedups 🏃 🏃</span><br><span class="line">pip install git+https://github.com/NVlabs/tiny-cuda-nn/#subdirectory=bindings/torch</span><br><span class="line"></span><br><span class="line">WARNING: Using a slow implementation <span class="keyword">for</span> the MLP module. </span><br><span class="line">🏃 🏃 Install tcnn <span class="keyword">for</span> speedups 🏃 🏃</span><br><span class="line">pip install git+https://github.com/NVlabs/tiny-cuda-nn/#subdirectory=bindings/torch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">WARNING: Using a slow implementation <span class="keyword">for</span> the HashEncoding module. </span><br><span class="line">🏃 🏃 Install tcnn <span class="keyword">for</span> speedups 🏃 🏃</span><br><span class="line">pip install git+https://github.com/NVlabs/tiny-cuda-nn/#subdirectory=bindings/torch</span><br></pre></td></tr></table></figure></div>
<p>提示你可以用tcnn进行加速。根据它的提示输入指令：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pip install git+https://github.com/NVlabs/tiny-cuda-nn/#subdirectory=bindings/torch</span><br></pre></td></tr></table></figure></div>
<p>不出意外的话就要出意外了：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/a212c4626ca45c549cddfa3d72efbbc3.png"
                      alt="error" style="zoom: 80%;" 
                ></p>
<p>先是查看了下文档，说是要求 g++ &lt; 11 ，于是安装了g++-9：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install g++-9</span><br></pre></td></tr></table></figure></div>
<p>然后切换版本：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 20</span><br></pre></td></tr></table></figure></div>
<p>如果有多个版本好像还得执行以下指令切换： <div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> update-alternatives --config g++</span><br></pre></td></tr></table></figure></div></p>
<p>发现还是不行，看报错里有这样一句：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/57fec14ddd5574caba775cff7b69445e.png"
                      alt="error2" style="zoom:80%;" 
                ></p>
<p>说明问题出在<code>lcuda</code>，g++找不到<code>lcuda</code>。因为博主使用的WSL，<code>cuda</code>库存放在<code>/usr/lib/wsl/lib</code>中，将它复制出来即可：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> /usr/lib/wsl/lib/* /usr/lib</span><br></pre></td></tr></table></figure></div>
<p>然后再次执行安装就成功了。</p>
<p>值得注意的是，在安装<code>tcnn</code>之前，博主用<code>nerfacto</code>训练30000个step用了两小时，而安装之后仅需20分钟，这个提升还是蛮可观的。</p>
<h2 id="报错及解决方案">报错及解决方案</h2>
<h3 id="使用splatfacto训练报错">使用splatfacto训练报错</h3>
<h4 id="no-cuda-toolkit-found.">1. No CUDA toolkit found.</h4>
<p>在使用splatfacto进行训练时报错：
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/16ca70d9990e612c0f7fce1c4513128b.png"
                      alt="error3" style="zoom:80%;" 
                ></p>
<p>显示CUDA Tookit找不到，然而我的用户目录里是有的。</p>
<p>在github的issue里找到了解决方案：<a class="link" 
 href="https://github.com/nerfstudio-project/gsplat/issues/249" >No CUDA
toolkit found. gsplat will be disabled. · Issue #249 ·
nerfstudio-project/gsplat<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>即，将path添加进去：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/usr/local/cuda-12.6/bin<span class="variable">$&#123;PATH:+:<span class="variable">$&#123;PATH&#125;</span>&#125;</span></span><br></pre></td></tr></table></figure></div>
<p>可以将这句添加到<code>~/.bashrc</code>里，每次打开terminal就不用再输入一遍了。</p>
<h4 id="ninja-build-stopped-subcommand-failed.">2. ninja: build stopped:
subcommand failed.</h4>
<p>解决上个问题后结果还是报错：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/19d2701071cf3a88991cac45b0e1de85.png"
                      alt="error4" style="zoom:80%;" 
                ></p>
<p>查阅发现是内存不够，进程直接被kill了。自己的WSL虚拟机内存太少了。尝试租服务器，解决。</p>
<h3
id="使用nerfbusters训练报错未完全解决">使用nerfbusters训练报错（未完全解决）</h3>
<h4
id="modulenotfounderror-no-module-named-nerfstudio.fields.visibility_field">1.
ModuleNotFoundError: No module named
'nerfstudio.fields.visibility_field'</h4>
<p>在使用<code>nerfbusters</code>方法时，根据<a class="link" 
 href="https://docs.nerf.studio/nerfology/methods/nerfbusters.html" >文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>中的教程安装<code>nerfbuster</code>之后，简单的使用<code>--help</code>也会出现如下的报错：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ModuleNotFoundError: No module named <span class="string">&#x27;nerfstudio.fields.visibility_field&#x27;</span></span><br></pre></td></tr></table></figure></div>
<p>切换其他基于<code>NeRF</code>的方法，有的依然会出现这个报错。</p>
<p>然后在<code>issue</code>中找到了相似的情况：</p>
<p><a class="link"   href="https://github.com/ethanweber/nerfbusters/issues/17" >Where's
nerfstudio VisibilityFIeld come from? · Issue #17 ·
ethanweber/nerfbusters<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link" 
 href="https://github.com/nerfstudio-project/nerfstudio/issues/3185" >from
nerfstudio.fields.visibility_field import VisibilityField
ModuleNotFoundError: No module named
'nerfstudio.fields.visibility_field' · Issue #3185 ·
nerfstudio-project/nerfstudio<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link" 
 href="https://github.com/nerfstudio-project/nerfstudio/pull/2264" >Visibility
Field from Nerfbusters by ethanweber · Pull Request #2264 ·
nerfstudio-project/nerfstudio<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>其中提到，他们当前使用的branch是<code>nerfbusters-changes</code>，并没有计划把他合并到<code>main</code>
branch。</p>
<p>所以需要克隆他们的<code>nerfbusters-changes</code> branch：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b nerfbusters-changes https://github.com/nerfstudio-project/nerfstudio.git</span><br></pre></td></tr></table></figure></div>
<p>然后在根目录执行安装：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pip install -e .</span><br></pre></td></tr></table></figure></div>
<p>这样就可以了。</p>
<h4 id="numpy-has-no-attribute-bool8.-did-you-mean-bool">2. `numpy` has
no attribute `bool8`. Did you mean: `bool`?</h4>
<p>这是因为numpy在1.24更新后将<code>bool8</code>更名为了<code>bool</code>，降级numpy版本即可：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install numpy==1.23</span><br></pre></td></tr></table></figure></div>
<h4 id="the-viewer-bridge-server-subprocess-failed.">3. The viewer
bridge server subprocess failed.</h4>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/511ceec6536981ff7b744e6a521940cd.png"
                      alt="image-20241126213428268" style="zoom:80%;" 
                ></p>
<p>切换分支后运行原有的方法都会出现如下报错。说是<code>viewer</code>的服务启动失败了，通过<code>--viewer.websocket-port</code>更改窗口依然是相同的报错，于是根据提示查看了log：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/e26e3f4efeb2a6e74a7b49493d5bf70b.png"
                      alt="image-20241126213554646" style="zoom:80%;" 
                ></p>
<p>好嘛，给我原来的module搞没了，我又回原来的分支重新<code>pip install -e .</code>，然后再运行。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/33aa4114532b180a7cb9cc5a485ea9bf.png"
                      alt="image-20241126214834818" style="zoom:80%;" 
                ></p>
<p>闹鬼了，我不玩了行吧，nerfbusters给劳资滚！😠</p>
<h3 id="使用zipnerf报错">使用zipnerf报错</h3>
<h4
id="error-failed-building-wheel-for-cuda_backend-或者-no-module-named-_cuda_backend">1.
ERROR: Failed building wheel for cuda_backend 或者 No module named
'_cuda_backend'</h4>
<p>在使用</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pip install git+https://github.com/SuLvXiangXin/zipnerf-pytorch#subdirectory=extensions/cuda</span><br></pre></td></tr></table></figure></div>
<p>安装依赖的时候，出现如下报错：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/dd5fcccf23bab67884491c42c534f451.png"
                      alt="image-20241126233030691" style="zoom:80%;" 
                ></p>
<p>开始没有管他，直到最后训练的时候又弹出报错：</p>
<figure>
<img 

                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/3f39f4928d4cdc95d4268681db55ca98.png"
                     
alt="image-20241126233117488" 
                >
<figcaption aria-hidden="true">image-20241126233117488</figcaption>
</figure>
<p>看样子是逃不掉了。</p>
<h4 id="assertionerror-pipeline.datamanager.dataparser...">2.
AssertionError: <code>pipeline.datamanager.dataparser</code>...</h4>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/0bbf42cce63eb2803ee4bac0f676f5a9.png"
                      alt="image-20241126233225832" style="zoom:80%;" 
                ></p>
<p>第一次出现这长串报错是因为参数没输对，第二次问gpt说是与
<code>tyro</code> 版本有关，尝试升级 <code>tyro</code>
库以及相关依赖：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pip install --upgrade tyro</span><br></pre></td></tr></table></figure></div>
<p>然后看到error怂了：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/bda407fee5eb83019937880b7434e75b.png"
                      alt="image-20241126233430107" style="zoom:80%;" 
                ></p>
<p>于是又改回了推荐的版本：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pip install tyro==2.13.3</span><br></pre></td></tr></table></figure></div>
<p>然后再运行就可以了。</p>
<h4
id="assertionerror-colmap-path-dataprocessed_trucksparse0-does-not-exist.">3.
AssertionError: Colmap path data/processed_truck/sparse/0 does not
exist.</h4>
<p>这个原因是<code>zipnerf</code>用的数据集格式和<code>nerfstudio</code>好像不完全一致，我用了下<code>tandt</code>的数据集发现可行，但是它会对图像先进行一次下采样。</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">(nerf2mesh) root@I1dc2923c3f00801cdf:~/3D-Reconstruction/nerf2mesh# python main.py nerfstudio/poster/ --workspace trial_syn_poster/ -O --bound 1 --scale 0.8 --dt_gamma 0 --stage 0 --lambda_tv 1e-8</span><br><span class="line">Warning:</span><br><span class="line">Unable to load the following plugins:</span><br><span class="line"></span><br><span class="line">        libio_e57.so: libio_e57.so does not seem to be a Qt Plugin.</span><br><span class="line"></span><br><span class="line">Cannot load library /usr/local/miniconda3/envs/nerf2mesh/lib/python3.10/site-packages/pymeshlab/lib/plugins/libio_e57.so: (/usr/lib/x86_64-linux-gnu/libp11-kit.so.0: undefined symbol: ffi_type_pointer, version LIBFFI_BASE_7.0)</span><br><span class="line"></span><br><span class="line">Loading train data: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 225/225 [00:08&lt;00:00, 25.09it/s]</span><br><span class="line">[INFO] max_epoch 134, eval every 26, save every 2.</span><br><span class="line">[INFO] Trainer: ngp_stage0 | 2024-11-26_15-12-23 | cuda | fp16 | trial_syn_poster/</span><br><span class="line">[INFO] #parameters: 18367240</span><br><span class="line">Namespace(path=&#x27;nerfstudio/poster/&#x27;, O=True, workspace=&#x27;trial_syn_poster/&#x27;, seed=0, stage=0, ckpt=&#x27;latest&#x27;, fp16=True, sdf=False, tcnn=False, progressive_level=False, test=False, test_no_video=False, test_no_mesh=False, camera_traj=&#x27;&#x27;, data_format=&#x27;nerf&#x27;, train_split=&#x27;train&#x27;, preload=True, random_image_batch=True, </span><br><span class="line">downscale=1, bound=1.0, scale=0.8, offset=[0, 0, 0], mesh=&#x27;&#x27;, enable_cam_near_far=False, enable_cam_center=False, min_near=0.05, enable_sparse_depth=False, enable_dense_depth=False, iters=30000, lr=0.01, lr_vert=0.0001, pos_gradient_boost=1, cuda_ray=True, max_steps=1024, update_extra_interval=16, </span><br><span class="line">max_ray_batch=4096, grid_size=128, mark_untrained=True, dt_gamma=0.0, density_thresh=10, diffuse_step=1000, diffuse_only=False, background=&#x27;random&#x27;, enable_offset_nerf_grad=False, n_eval=5, n_ckpt=50, num_rays=4096, adaptive_num_rays=True, num_points=262144, lambda_density=0, lambda_entropy=0, lambda_tv=1e-08, </span><br><span class="line">lambda_depth=0.1, lambda_specular=1e-05, lambda_eikonal=0.1, lambda_rgb=1, lambda_mask=0.1, wo_smooth=False, lambda_lpips=0, lambda_offsets=0.1, lambda_lap=0.001, lambda_normal=0, lambda_edgelen=0, contract=False, patch_size=1, trainable_density_grid=False, color_space=&#x27;srgb&#x27;, ind_dim=0, ind_num=500, </span><br><span class="line">mcubes_reso=512, env_reso=256, decimate_target=300000.0, mesh_visibility_culling=True, visibility_mask_dilation=5, clean_min_f=8, clean_min_d=5, ssaa=2, texture_size=4096, refine=True, refine_steps_ratio=[0.1, 0.2, 0.3, 0.4, 0.5, 0.7], refine_size=0.01, refine_decimate_ratio=0.1, refine_remesh_size=0.02, </span><br><span class="line">vis_pose=False, gui=False, W=1000, H=1000, radius=5, fovy=50, max_spp=1, refine_steps=[3000, 6000, 9000, 12000, 15000, 21000])</span><br><span class="line">NeRFNetwork(</span><br><span class="line">  (encoder): GridEncoder: input_dim=3 num_levels=16 level_dim=1 resolution=16 -&gt; 2048 per_level_scale=1.3819 params=(6119864, 1) gridtype=hash align_corners=False interpolation=linear</span><br><span class="line">  (sigma_net): MLP(</span><br><span class="line">    (net): ModuleList(</span><br><span class="line">      (0): Linear(in_features=19, out_features=32, bias=False)</span><br><span class="line">      (1): Linear(in_features=32, out_features=1, bias=False)</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">  (encoder_color): GridEncoder: input_dim=3 num_levels=16 level_dim=2 resolution=16 -&gt; 2048 per_level_scale=1.3819 params=(6119864, 2) gridtype=hash align_corners=False interpolation=linear</span><br><span class="line">  (color_net): MLP(</span><br><span class="line">    (net): ModuleList(</span><br><span class="line">      (0): Linear(in_features=35, out_features=64, bias=False)</span><br><span class="line">      (1): Linear(in_features=64, out_features=64, bias=False)</span><br><span class="line">      (2): Linear(in_features=64, out_features=6, bias=False)</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">  (specular_net): MLP(</span><br><span class="line">    (net): ModuleList(</span><br><span class="line">      (0): Linear(in_features=6, out_features=32, bias=False)</span><br><span class="line">      (1): Linear(in_features=32, out_features=3, bias=False)</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">)</span><br><span class="line">[INFO] Loading latest checkpoint ...</span><br><span class="line">[WARN] No checkpoint found, abort loading latest model.</span><br><span class="line">Loading val data: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00&lt;00:00, 21.10it/s]</span><br><span class="line">[mark untrained grid] 9364 from 2097152</span><br><span class="line">==&gt; Start Training Epoch 1, lr=0.000100 ...</span><br><span class="line">... ...</span><br><span class="line">loss=0.091703 (0.104557) lr=0.004555: : 100% 225/225 [00:03&lt;00:00, 69.94it/s]</span><br><span class="line">==&gt; Finished Epoch 133, loss = 0.078408.</span><br><span class="line">==&gt; Start Training Epoch 134, lr=0.001006 ...</span><br><span class="line">loss=0.075468 (0.078282) lr=0.000988: : 100% 225/225 [00:04&lt;00:00, 52.46it/s]</span><br><span class="line">==&gt; Finished Epoch 134, loss = 0.078282.</span><br><span class="line">[INFO] training takes 10.078925 minutes.</span><br><span class="line">Setting up [LPIPS] perceptual loss: trunk [vgg], v[0.1], spatial [off]</span><br><span class="line">/usr/local/miniconda3/envs/nerf2mesh/lib/python3.10/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter &#x27;pretrained&#x27; is deprecated since 0.13 and may be removed in the future, please use &#x27;weights&#x27; instead.</span><br><span class="line">  warnings.warn(</span><br><span class="line">/usr/local/miniconda3/envs/nerf2mesh/lib/python3.10/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for &#x27;weights&#x27; are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=VGG16_Weights.IMAGENET1K_V1`. You can also use `weights=VGG16_Weights.DEFAULT` to get the most up-to-date weights.</span><br><span class="line">  warnings.warn(msg)</span><br><span class="line">Downloading: &quot;https://download.pytorch.org/models/vgg16-397923af.pth&quot; to /root/.cache/torch/hub/checkpoints/vgg16-397923af.pth</span><br><span class="line">100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 528M/528M [35:11&lt;00:00, 262kB/s]</span><br><span class="line">Loading model from: /usr/local/miniconda3/envs/nerf2mesh/lib/python3.10/site-packages/lpips/weights/v0.1/vgg.pth</span><br><span class="line">++&gt; Evaluate at epoch 134 ...</span><br><span class="line">loss=0.213495 (0.213495): : 100% 1/1 [00:00&lt;00:00,  1.07it/s]</span><br><span class="line">PSNR = 6.706122</span><br><span class="line">LPIPS (vgg) = 0.767062</span><br><span class="line">++&gt; Evaluate epoch 134 Finished, loss = 0.213495</span><br><span class="line">==&gt; Start Test, save results to trial_syn_poster/results</span><br><span class="line">100% 11/11 [00:03&lt;00:00,  3.40it/s]Traceback (most recent call last):</span><br><span class="line">  File &quot;/root/3D-Reconstruction/nerf2mesh/main.py&quot;, line 263, in &lt;module&gt;</span><br><span class="line">    trainer.test(test_loader, write_video=True) # test and save video</span><br><span class="line">  File &quot;/root/3D-Reconstruction/nerf2mesh/nerf/utils.py&quot;, line 1005, in test</span><br><span class="line">    imageio.mimwrite(os.path.join(save_path, f&#x27;&#123;name&#125;_rgb.mp4&#x27;), all_preds, fps=24, quality=8, macro_block_size=1)</span><br><span class="line">  File &quot;/usr/local/miniconda3/envs/nerf2mesh/lib/python3.10/site-packages/imageio/v2.py&quot;, line 494, in mimwrite</span><br><span class="line">    with imopen(uri, &quot;wI&quot;, **imopen_args) as file:</span><br><span class="line">  File &quot;/usr/local/miniconda3/envs/nerf2mesh/lib/python3.10/site-packages/imageio/core/imopen.py&quot;, line 281, in imopen</span><br><span class="line">    raise err_type(err_msg)</span><br><span class="line">ValueError: Could not find a backend to open `trial_syn_poster/results/ngp_stage0_ep0134_rgb.mp4`` with iomode `wI`.</span><br><span class="line">Based on the extension, the following plugins might add capable backends:</span><br><span class="line">  FFMPEG:  pip install imageio[ffmpeg]</span><br><span class="line">  pyav:  pip install imageio[pyav]</span><br><span class="line">100% 11/11 [00:04&lt;00:00,  2.67it/s]</span><br></pre></td></tr></table></figure></div>
<h2 id="运行结果">运行结果</h2>
<h3
id="nerfacto和splatfacto渲染效果对比">nerfacto和splatfacto渲染效果对比</h3>
<p>由于背景场景太过杂乱，在导出的时候选择了crop一下，只保留了主体。</p>
<p>对于基于<code>NeRF</code>的方法<code>nerfacto</code>，可以选择导出点云或者网格。导出的网格在<code>meshlab</code>进行可视化，效果如下：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/3352878e1ae4701c1140250512516ff5.png"
                      alt="nerfacto" style="zoom: 67%;" 
                ></p>
<p>可以看到，<code>poster</code>的内容是比较清晰地还原出来了，然而椅子的形状结构却有些损坏，尤其是越靠近中心缺损越严重。</p>
<p>而对于基于<code>3DGS</code>的方法<code>splatfacto</code>，它只能选择导出gaussian
splat。为了对其进行可视化，选择使用了 <a class="link" 
 href="https://github.com/playcanvas/supersplat" >supersplat<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>
这个工具：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/fe681800c80665393e977b430120f321.png"
                      alt="1" style="zoom:67%;" 
                ></p>
<p>可以看到，除了中心的主体外，为了渲染出背景，在即便是很远的地方也生成了很多个gaussian
splat。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/684268fc7c4fbd9c6ccc174ea9ae2481.png"
                      alt="image-20241119133706308" style="zoom:67%;" 
                ></p>
<p>将摄像头拉近到主体，发现这个重构效果还是蛮好的。然而如何将gaussian
splat转化为网格形式，这是后续工作的重点。</p>
<h3 id="mesh导出">Mesh导出</h3>
<p>在<code>NeRF Studio</code>中可以对训练结果进行可视化的导出。支持<code>3D gaussian</code>,
<code>point cloud</code>和<code>mesh</code>
，但是对于不同的方法，导出的格式不同。如基于<code>NeRF</code>的方法只能导出点云和网格，而基于<code>3DGS</code>的方法只能导出三维高斯。</p>
<p>训练代码示例：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ns-train nerfacto --data data/processed_truck/ --output-dir outputs/truck_100000 --max-num-iterations 100000</span><br></pre></td></tr></table></figure></div>
<p>可以先对训练结果进行可视化：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ns-viewer --load-config path/to/your/trainresult/config.yml</span><br></pre></td></tr></table></figure></div>
<p>然后在网页的<code>export</code>栏可以选择导出参数，并复制导出指令，以<code>possion</code>的导出为例：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ns-export poisson --load-config outputs/truck_100000/processed_truck/nerfacto/2024-11-26_142623/config.yml --output-dir exports/mesh/truck_100000iter_50000face --target-num-faces 50000 --num-pixels-per-side 2048 --num-points 1000000 --remove-outliers True </span><br><span class="line">--normal-method open3d --obb_center 0.0000000000 0.0000000000 0.0000000000 --obb_rotation 0.0000000000 0.0000000000 0.0000000000 --obb_scale 1.0000000000 1.0000000000 1.0000000000</span><br></pre></td></tr></table></figure></div>
<p>还可以选择其他的导出方式，如<code>tsdf</code>：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ns-export tsdf --load-config outputs/truck_100000/processed_truck/nerfacto/2024-11-26_142623/config.yml --output-dir exports/mesh/truck_100000iter_50000face_tsdf --target-num-faces 50000 --num-pixels-per-side 2048</span><br></pre></td></tr></table></figure></div>
<p>或者<code>marching-cubes</code>：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ns-export marching-cubes --load-config outputs/truck_100000/processed_truck/nerfacto/2024-11-26_142623/config.yml --output-dir exports/mesh/truck_100000iter_50000face_tsdf --target-num-faces 50000 --num-pixels-per-side 2048</span><br></pre></td></tr></table></figure></div>
<p>（好像<code>nerfacto</code>的结果不能用<code>marching-cubes</code>）</p>
<p>下面直观展示下导出<code>mesh</code>的效果（前四种是<code>nerfacto</code>，最后一个是用<code>2DGS</code>方法生成的结果）：</p>
<table>
<colgroup>
<col style="width: 37%" />
<col style="width: 62%" />
</colgroup>
<thead>
<tr>
<th style="text-align: center;">possion (30k iters, 50k faces)</th>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/1c1ac2e6320eaf5e8bcd849e54715188.gif"
                      alt="2024-11-26-17-05-29" style="zoom: 80%;" 
                ></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;"><strong>possion (100k iters, 50k
faces)</strong></td>
<td><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/5392674dd8736a531079d3f8643d6d7c.gif"
                      alt="2024-11-26-17-06-26" style="zoom: 80%;" 
                ></td>
</tr>
<tr>
<td style="text-align: center;"><strong>possion (100k iters, 100k
faces)</strong></td>
<td><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/299d0d4cf36fa66f3195efdd15ec7bac.gif"
                      alt="2024-11-26-17-08-08" style="zoom:80%;" 
                ></td>
</tr>
<tr>
<td style="text-align: center;"><strong>tsdf (100k iters, 50k
faces)</strong></td>
<td><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/65ea32e143162450ebfa80c39fc288bc.gif"
                      alt="2024-11-26-16-52-37" style="zoom: 80%;" 
                ></td>
</tr>
<tr>
<td style="text-align: center;"><strong>2DGS (2m faces)</strong></td>
<td><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/34ed3d848689502c6897a0aee256bace.gif"
                      alt="2024-11-26-16-52-37" style="zoom: 80%;" 
                ></td>
</tr>
</tbody>
</table>
<p>可以看到，<code>tsdf</code>提取的网格质量过低，而<code>possion</code>提取的网格相较而言则更精确。总体而言，对于<code>nerfacto</code>方法来说，<code>iteration</code>的提升貌似没有对最终的网格产生比较大的改善，30k的迭代次数已经足够，而<code>face</code>的增加其实也显得不是很必要，50k的面数已经足够表达一个复杂的结构体了。对于<code>2DGS</code>，由于它没有整合到<code>NeRF Studio</code>里，它的重建没有固定面数，最终生成了2m的面，虽然重建效果好很多，但是对计算负载的压力更大。</p>
]]></content>
      <categories>
        <category>三维重建</category>
      </categories>
      <tags>
        <tag>NeRF</tag>
        <tag>3DGS</tag>
      </tags>
  </entry>
  <entry>
    <title>Mathjax与渲染引擎marked冲突解决方案</title>
    <url>/2024/11/11/07-Build_blog/</url>
    <content><![CDATA[<h3 id="问题说明">问题说明</h3>
<p><code>hexo</code>在解析markdown的时候，会对一些符号如<code>_</code>进行转义，将其转为<code>&lt;em&gt;</code>标签。而在公式块中，<code>_</code>是作为渲染下标所用的符号。但是<code>hexo</code>的优先级比<code>mathjax</code>更高，且不会判断<code>_</code>是否在公式内，所以很容易造成冲突，导致公式没法正常渲染。比如笔者在编写博客时，发现两个相邻公式中的<code>_</code>被当成斜体渲染，导致两个公式都没正常渲染出来。</p>
<h3 id="踩坑过程">踩坑过程</h3>
<h4 id="修改源码失败">1.修改源码（失败）</h4>
<p>太长了，折叠一下，想看就展开吧👇。</p>
<details class="orange" data-header-exclude=""><summary><i class="fa-solid fa-chevron-right"></i>Folding 点击查看更多 </summary>
              <div class="content">
              <p>搜到的大部分解决方案，都是让更改marked源码，即将<code>nodes_modules/lib/marked/lib/marked.js</code>文件进行更改：</p><p>将</p><div class="code-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">escape</span>: <span class="regexp">/^\\([\\`*{}\[\]()# +\-.!_&gt;])/</span>,</span><br></pre></td></tr></table></figure></div><p>替换为</p><div class="code-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">escape</span>: <span class="regexp">/^\\([`*{}\[\]()# +\-.!_&gt;])/</span>,</span><br></pre></td></tr></table></figure></div><p>从而去除<code>\\</code>的转义。</p><p>将</p><div class="code-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">em</span>: <span class="regexp">/^\b_((?:[^_]|__)+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</span><br></pre></td></tr></table></figure></div><p>替换为</p><div class="code-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">em</span>:<span class="regexp">/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</span><br></pre></td></tr></table></figure></div><p>从而去除<code>_</code>的斜体转义。</p><p>然而不知道是博主使用的版本问题还是什么原因，并没有找到该文件。虽然后面在<code>nodes_modules/marked/bin</code>里找到了<code>marked.js</code>，它通过调用了一个库<code>marked.esm.js</code> 来执行具体的 Markdown解析操作。因此博主在<code>marked.esm.js</code>进行了相应的更改。</p><p>将</p><div class="code-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">emStrong</span>: {</span><br><span class="line">  <span class="attr">lDelim</span>: <span class="regexp">/^(?:\*+(?:([punct_])|[^\s*]))|^_+(?:([punct*])|([^\s_]))/</span>,</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//        (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.</span></span><br><span class="line">  <span class="comment">//          () Skip orphan inside strong                                      () Consume to delim     (1) #***                (2) a***#, a***                             (3) #***a, ***a                 (4) ***#              (5) #***#                 (6) a***a</span></span><br><span class="line">  <span class="attr">rDelimAst</span>: <span class="regexp">/^(?:[^_*\\]|\\.)*?\_\_(?:[^_*\\]|\\.)*?\*(?:[^_*\\]|\\.)*?(?=\_\_)|(?:[^*\\]|\\.)+(?=[^*])|[punct_](\*+)(?=[\s]|$)|(?:[^punct*_\s\\]|\\.)(\*+)(?=[punct_\s]|$)|[punct_\s](\*+)(?=[^punct*_\s])|[\s](\*+)(?=[punct_])|[punct_](\*+)(?=[punct_])|(?:[^punct*_\s\\]|\\.)(\*+)(?=[^punct*_\s])/</span>,</span><br><span class="line">  <span class="attr">rDelimUnd</span>: <span class="regexp">/^(?:[^_*\\]|\\.)*?\*\*(?:[^_*\\]|\\.)*?\_(?:[^_*\\]|\\.)*?(?=\*\*)|(?:[^_\\]|\\.)+(?=[^_])|[punct*](\_+)(?=[\s]|$)|(?:[^punct*_\s\\]|\\.)(\_+)(?=[punct*\s]|$)|[punct*\s](\_+)(?=[^punct*_\s])|[\s](\_+)(?=[punct*])|[punct*](\_+)(?=[punct*])/</span> <span class="comment">// ^- Not allowed for _</span></span><br><span class="line">},</span><br></pre></td></tr></table></figure></div><p>替换为</p><div class="code-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">emStrong</span>: {</span><br><span class="line">  <span class="comment">// 仅匹配 * 而不匹配 _</span></span><br><span class="line">  <span class="attr">lDelim</span>: <span class="regexp">/^(?:\*+(?:([punct*])|[^\s*]))/</span>, </span><br><span class="line">  <span class="comment">// 保持原有的 * 匹配</span></span><br><span class="line">  <span class="attr">rDelimAst</span>: <span class="regexp">/^(?:[^_*\\]|\\.)*?\_\_(?:[^_*\\]|\\.)*?\*(?:[^_*\\]|\\.)*?(?=\_\_)|(?:[^*\\]|\\.)+(?=[^*])|[punct_](\*+)(?=[\s]|$)|(?:[^punct*_\s\\]|\\.)(\*+)(?=[punct_\s]|$)|[punct_\s](\*+)(?=[^punct_\s])|[\s](\*+)(?=[punct_])|[punct_](\*+)(?=[punct_])|(?:[^punct*_\s\\]|\\.)(\*+)(?=[^punct*_\s])/</span>,</span><br><span class="line">  <span class="comment">// 禁用对下划线的右界定符匹配</span></span><br><span class="line">  <span class="attr">rDelimUnd</span>: <span class="literal">null</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><p>然而后面看到该文件开头有这样一句：</p><div class="code-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DO NOT EDIT THIS FILE</span></span><br><span class="line"><span class="comment"> * The code in this file is generated from files in ./src/</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></div><p>好嘛，原来这个文件是通过其他源文件生成的，于是又转头更改<code>nodes_modules/marked/src/rules.js</code>。同上面的规则更改<code>emStrong</code>。</p><p>然而，并无卵用。基本宣告这条路失败。</p>
              </div>
            </details>
<h4 id="手动escape成功但丑陋">2.手动escape（成功但丑陋）</h4>
<p>最简单的方法，博主最初的妥协。</p>
<p>就是将公式中的<code>_</code>前面加上<code>\</code>进行转义。这样的结果就是网站上能正常显示，然而用自己的markdown编辑软件，下标就会消失，变成真正的下横线。如果单纯只对网站更改，这个方法无疑是最方便的，但是但凡要在本地编辑，就会很难受。</p>
<h4 id="更换kramed引擎没用">3.更换kramed引擎（没用）</h4>
<p>直接卸载源引擎，更换kramed：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-pandoc --save</span><br></pre></td></tr></table></figure></div>
<p>然而kramed引擎还是存在相同的问题。（所以为什么要让我改啊！改了还容易报一堆错）</p>
<p>还是需要修改<code>node_modules/kramed/lib/rules/inline.js</code>文件。</p>
<p>将</p>
<div class="code-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">em</span>: <span class="regexp">/^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</span><br></pre></td></tr></table></figure></div>
<p>更改为</p>
<div class="code-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">em</span>: <span class="regexp">/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</span><br></pre></td></tr></table></figure></div>
<p>将</p>
<div class="code-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">escape</span>: <span class="title function_">replace</span>(inline.<span class="property">escape</span>)(<span class="string">'])'</span>, <span class="string">'~|])'</span>)(),</span><br></pre></td></tr></table></figure></div>
<p>更改为</p>
<div class="code-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">escape</span>: <span class="title function_">replace</span>(inline.<span class="property">escape</span>)(<span class="string">'])'</span>, <span class="string">'~])'</span>)(),</span><br></pre></td></tr></table></figure></div>
<p>这不是和上面一样的吗，而且博主依然没找到这个文件。不知道是不是版本迭代更改了结构。</p>
<h3 id="解决方案">解决方案</h3>
<p>最终的解决方案，是博主最开始最不愿意的方案，就是替换成pandoc引擎。</p>
<ol type="1">
<li><p>安装Pandoc。</p>
<p>在官网<a class="link" href="https://pandoc.org/installing.html">Pandoc -
Installing
pandoc<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>下载安装<code>pandoc</code>，博主是在<code>windows</code>上部署的博客，直接下载了msi安装包进行安装，安装完成后重启电脑后才生效。</p></li>
<li><p>更换引擎。</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-pandoc --save</span><br></pre></td></tr></table></figure></div>
<p>mathjax的安装和配置可参考网上的教程。</p></li>
<li><p>重新构建。</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure></div></li>
</ol>
<p>然后应该就能正常显示公式了，这下舒服了。不得不说，<code>pandoc</code>，你是我的神！</p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>mathjax</tag>
        <tag>marked</tag>
      </tags>
  </entry>
  <entry>
    <title>主流三维重建方法对比</title>
    <url>/2024/11/18/09-Reconstruction/</url>
    <content><![CDATA[<h2 id="meshanything">MeshAnything</h2>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/1630f28c1eaf60eb65bdd5e72f47430d.gif"
                      alt="demo_video" style="zoom: 67%;" 
                ></p>
<h3 id="问题背景">问题背景</h3>
<p>当前网格提取方法生成的网格明显不如艺术家创建的网格 (AM,
Artist-Created
Meshes)，即由人类艺术家创建的网格。具体来说，当前的网格提取方法依赖于密集的面并忽略几何特征，导致效率低下、后处理复杂且表示质量较低等问题。为了解决这些问题，论文引入了
<a class="link"   href="https://github.com/buaacyw/MeshAnything" >MeshAnything<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>
，该模型将网格提取视为生成问题，生成与指定形状对齐的 AM。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/5febb2fa38db1681a29897d2bf6f4f5e.png"
                      alt="Refer to caption" style="zoom:50%;" 
                ></p>
<p>上图是对真实形状使用<code>Marching Cubes</code>和<code>MeshAnything</code>，然后对不同<code>voxel size</code>的<code>Marching Cubes</code>进行<code>remesh</code>的结果。现有方法以重构方式提取网格，忽略了对象的几何特征并产生拓扑较差的密集网格。这些方法从根本上无法捕捉锐利的边缘和平坦的表面，如放大图所示。</p>
<h3 id="核心方法">核心方法</h3>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/2ccc528c2caa28dece7df53cd9041b5e.png"
                      alt="image-20241119142104541" style="zoom: 50%;" 
                ></p>
<p><strong>重新定义问题</strong>：</p>
<ul>
<li>将网格提取看作一个生成任务，而非重建任务。</li>
<li>目标是生成与给定形状对齐的高效拓扑网格（AMs），使其更接近人工设计。</li>
</ul>
<p><strong>模型架构</strong>：</p>
<ul>
<li>使用 <strong>VQ-VAE</strong> 学习网格的“词汇”（网格编码）。</li>
<li>基于“词汇”训练一个<strong>仅解码自回归Transformer</strong>，以形状条件为输入，生成网格。</li>
<li>增强了
<strong>VQ-VAE解码器</strong>，使其抗噪，能够处理低质量的令牌序列，并利用形状信息辅助解码。</li>
</ul>
<p><strong>形状条件的设计</strong>：</p>
<ul>
<li>选择点云作为输入形状条件，因其具有连续表示性且易于编码。</li>
<li>在训练时通过对真实网格进行降质（如使用Marching
Cubes生成粗网格）来缩小训练与推理的域差距。</li>
</ul>
<p><strong>优化训练</strong>：</p>
<ul>
<li>在VQ-VAE训练完成后，额外细调解码器，模拟推理中可能生成的低质量令牌序列，并提高对噪声的鲁棒性。</li>
</ul>
<h3 id="实验结果">实验结果</h3>
<ul>
<li><strong>生成效率</strong>： MeshAnything
生成的网格面数比传统方法减少数百倍，同时保留较高的形状对齐质量。</li>
<li><strong>拓扑质量</strong>：
在用户研究中，MeshAnything的形状和拓扑质量显著优于现有方法，表明其生成的网格更接近艺术家手工制作的标准。</li>
<li><strong>泛化能力</strong>：
能处理来自各种3D表示（如点云、体素、NeRF等）的输入，支持广泛的3D资产生产管线。</li>
</ul>
<h3 id="存在问题">存在问题</h3>
<p>第一眼见这个工作的时候，有被震撼到。以为这个工作将多种三维重建方式整合起来了。从它的演示中，看见它可以从三维高斯、图像、文本直接生成几何形状完整但面数较精简的网格。然而自己部署运行之后发现好像并不是这样。</p>
<p>在查阅代码仓库的<code>readme</code>时，发现所给的示例代码全是从点云或者网格进行转化的代码。正疑惑如何将其他表达方式进行转化，于是看了下<code>issues</code>：</p>
<ol type="1">
<li><p>关于3D Gaussian转为mesh：</p>
<p><a class="link"   href="https://github.com/buaacyw/MeshAnything/issues/29" >About 3D
Gaussians · Issue #29 · buaacyw/MeshAnything<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<blockquote>
<p>We suggest converting the 3D Gaussians into a mesh before inputting
them into our method.</p>
</blockquote>
<p>作者直接建议将3D Gaussian转为mesh再作为该方法的输入。（迷惑）</p>
<p><a class="link"   href="https://github.com/buaacyw/MeshAnything/issues/6" >How to
convert 3D gaussian splatting to mesh? · Issue #6 ·
buaacyw/MeshAnything<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<blockquote>
<p>Hi, I use <a class="link"   href="https://github.com/Anttwo/SuGaR" >SUGAR<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> to get
high quality mesh from GS and then sample point cloud on the 3D GS.
Other methods like <a class="link" 
 href="https://github.com/hbb1/2d-gaussian-splatting" >2DGS<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> should
also work well. I suggest you run these methods directly in their repos
and use the results as inputs for our method.</p>
</blockquote>
<p>另一个<code>issue</code>里，作者提到了两个方法来进行这种转化：SuGaR和2DGS。</p></li>
<li><p>关于大规模点云转mesh：</p>
<p><a class="link"   href="https://github.com/buaacyw/MeshAnything/issues/9" >large
scale pointCloud · Issue #9 · buaacyw/MeshAnything<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>MeshAnything目前限制在800个face，对复杂mesh或大规模点云可能无法比较好地转化。</p></li>
<li><p>关于image和text转mesh：</p>
<p><a class="link"   href="https://github.com/buaacyw/MeshAnything/issues/4" >How to do
text and images? · Issue #4 · buaacyw/MeshAnything<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<blockquote>
<p>The image/text to mesh is achieved by combining with 3D generation
methods. We first obtain dense meshes from 3D generation methods and use
them as input to our methods. Note that the shape quality of dense
meshes should be high enough. Thus, feed-forward 3D generation methods
may often produce bad results due to insufficient shape quality. We
suggest using results from SDS-based pipelines (like DreamCraft3D) as
the input of MeshAnything as they produce better shape quality.</p>
</blockquote>
<p>意思就是，通过其他方法生成<code>dense mesh</code>，然后再作为该方法的输入呗？</p></li>
</ol>
<p>大概总结一下就是，这个方法只是将已有的<code>Mesh</code>转化为<code>Artist-Created Meshes</code>而已，包括之前提到的3DGS、image、text转mesh，根本就是通过别的方法实现的。它是将精度高的密mesh在保留大部分几何特征的情况下进行的“简化”和“优化”，让面片数更精简且拓扑结构更符合人类直觉。</p>
<p>（吐槽一句，我感觉这个标题还有最开始的演示，有种标题党的意味。还以为真的是mesh
anything）</p>
<h2 id="sugar">SuGaR</h2>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/f5a25af6a79c1435d4eac688c356059b.gif"
                      alt="kitchen_hybrid.gif" style="zoom:67%;" 
                ></p>
<h3 id="问题背景-1">问题背景</h3>
<p>3D Gaussian Splatting 是一种高效的 3D
场景渲染方法，但其优化后生成的大量无结构的 3D Gaussians
不便于生成可编辑的网格（Mesh）。</p>
<p>当前使用 Neural SDF
提取网格的方法计算量大，需多GPU训练，且耗时较长（通常需24小时以上）。</p>
<h3 id="核心方法-1">核心方法</h3>
<p><strong>表面对齐正则化</strong>：</p>
<ul>
<li>引入一个正则化项，强制优化后的 3D Gaussians
分布于场景表面，从而更好地捕获场景几何信息。</li>
<li>通过优化 Signed Distance Function (SDF)，使 Gaussians
平坦化，并沿着表面分布。</li>
</ul>
<p><strong>高效网格提取</strong>：</p>
<ul>
<li>基于优化后的 Gaussians，采样水平集上的点，使用 Poisson
重建算法生成三角形网格。相比于 Marching Cubes
算法，该方法对稀疏数据更鲁棒，且计算更高效。</li>
</ul>
<p><strong>绑定 Gaussians 到网格</strong>：</p>
<ul>
<li>将优化后的 Gaussians 与生成的网格表面绑定，进一步优化 Gaussians
和网格，通过 Gaussian Splatting 渲染，提升渲染质量。</li>
<li>这种绑定使得可以通过编辑网格来实现对场景的修改。</li>
</ul>
<h3 id="实验结果-1">实验结果</h3>
<ul>
<li><strong>速度</strong>：SuGaR 方法在单 GPU
上仅需几分钟即可提取出高质量网格，远快于基于 SDF 的方法。</li>
<li><strong>质量</strong>：在多个数据集上的定量评估显示，SuGaR
的渲染质量（PSNR、SSIM、LPIPS）优于其他基于网格的方法，并与仅关注渲染质量的顶尖方法接近。</li>
<li><strong>可编辑性</strong>：生成的网格与绑定的 Gaussians
可以直接用于动画、重光照、雕刻等操作，提供了更高的灵活性。</li>
</ul>
<h3 id="踩坑记录">踩坑记录</h3>
<ol type="1">
<li><p><strong>environment.yml 创建环境
fail</strong>：创建空环境一步一步安装依赖。</p></li>
<li><p><strong>pytorch找不到包</strong>：使用国内镜像（需要注意是使用<code>-f</code>而不是<code>--index-url</code>）：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pip install torch==2.0.1 torchvision==0.15.2 torchaudio==2.0.2 -f https://mirrors.aliyun.com/pytorch-wheels/cu118</span><br></pre></td></tr></table></figure></div></li>
<li><p><strong>pytorch3d找不到包</strong>：去<a class="link" 
 href="https://anaconda.org/pytorch3d/pytorch3d/files?version=0.7.4" >Anaconda官网<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>找到对应版本的安装包复制链接再install：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">conda install https://anaconda.org/pytorch3d/pytorch3d/0.7.4/download/linux-64/pytorch3d-0.7.4-py39_cu118_pyt201.tar.bz2</span><br></pre></td></tr></table></figure></div></li>
<li><p><strong>其他 conda 包找不到</strong>：直接pip
insatll。（换了国内源都没解决掉，只能出此下策）</p></li>
<li><p><strong>CUDA-capable device(s) is/are busy or
unavailable</strong>：不会解决了，换回AutoDL了。在AutoDL配环境没遇到这么多问题。</p></li>
<li><p><strong>卡在 'computing mesh...' </strong>: 在 <a class="link" 
 href="https://github.com/Anttwo/SuGaR/issues/219" >issue<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>
看到了一模一样的情况，目前还没解决这个问题。</p></li>
</ol>
<h2 id="dgs">2DGS</h2>
<h3 id="问题背景-2">问题背景</h3>
<p>在计算机图形学和视觉领域，<strong>视角一致的几何重建</strong>与<strong>真实感的新视角合成（NVS）</strong>一直是重要的研究目标。近年来，基于
<strong>3D Gaussian Splatting (3DGS)</strong>
的显式方法因其实时渲染能力而受到关注。然而，3DGS
在以下方面存在显著问题：</p>
<ol type="1">
<li><strong>表面几何不精确</strong>：3D高斯的体积表示与物体的薄表面特性冲突，导致表面重建质量较低。</li>
<li><strong>多视角不一致性</strong>：3DGS
在不同视角下计算交点时，由于投影平面变化，产生深度和法线的不一致性。</li>
</ol>
<p>为了解决这些问题，本文提出了一种新的显式建模方法——<strong>2D Gaussian
Splatting
(2DGS)</strong>，以提高几何重建的精度和视角一致性，同时保留快速渲染能力。</p>
<h3 id="核心方法-2">核心方法</h3>
<ol type="1">
<li><strong>方法概述</strong></li>
</ol>
<ul>
<li>通过二维高斯平面（即二维椭圆盘）来替代三维高斯球体，将场景建模为一组二维高斯分布的集合。</li>
<li>这些二维高斯盘通过显式的光线与平面交点计算，实现几何表面和光照的高效表示。</li>
<li>结合梯度优化，从稀疏点云和多视角图像中同时优化外观与几何。</li>
</ul>
<ol start="2" type="1">
<li><strong>关键技术</strong></li>
</ol>
<ul>
<li><p><strong>透视准确的二维高斯渲染</strong>：利用光线与二维高斯交点的显式计算，避免传统近似方法带来的透视误差。</p></li>
<li><p><strong>正则化损失</strong>：</p>
<ul>
<li><strong>深度失真损失</strong>：通过约束二维高斯沿光线分布的紧密性，确保几何表面稳定。</li>
<li><strong>法线一致性损失</strong>：约束二维高斯表面的法线方向与深度图梯度对齐，保证表面平滑性。</li>
</ul></li>
<li><p><strong>高效实现</strong>：基于CUDA的自定义内核加速训练和实时渲染。</p></li>
</ul>
<ol start="3" type="1">
<li><strong>优化流程</strong></li>
</ol>
<ul>
<li>初始化稀疏点云并结合多视角RGB图像，优化二维高斯参数（位置、缩放、方向）。</li>
<li>使用正则化损失减少噪声，增强几何表面和视角一致性。</li>
</ul>
<h3 id="实验结果-2">实验结果</h3>
<ol type="1">
<li><strong>实验设置</strong></li>
</ol>
<ul>
<li><strong>数据集</strong>：DTU、Tanks and Temples 和
Mip-NeRF360，涵盖不同场景和分辨率。</li>
<li><strong>比较方法</strong>：隐式表征方法（如NeRF、NeuS）与显式方法（如3DGS、SuGaR）。</li>
</ul>
<ol start="2" type="1">
<li><strong>主要实验结果</strong></li>
</ol>
<ul>
<li>几何重建：
<ul>
<li>在DTU数据集上，Chamfer距离优于现有方法，特别是在细节捕捉和噪声消除方面。</li>
<li>比隐式方法快100倍的训练速度，比其他显式方法（如SuGaR）快3倍以上。</li>
</ul></li>
<li>新视角合成：
<ul>
<li>在Mip-NeRF360数据集上，新视角渲染质量接近3DGS，且同时提供了更高的几何精度。</li>
</ul></li>
<li>消融实验：
<ul>
<li>验证了正则化项的有效性：缺失法线一致性会导致表面方向噪声，缺失深度失真损失会导致表面模糊。</li>
</ul></li>
</ul>
<ol start="3" type="1">
<li><strong>定量与定性表现</strong></li>
</ol>
<ul>
<li><strong>定量结果</strong>：在DTU数据集上，2DGS的Chamfer距离和PSNR均达到当前最优，同时显著减少了训练时间和模型存储需求。</li>
<li><strong>定性结果</strong>：相比3DGS和SuGaR，2DGS在复杂几何和细节捕捉上表现更优，能更好地重建噪声较少的表面。</li>
</ul>
<h3 id="重建效果">重建效果</h3>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/11/aed5c29dccb760e3d3e56912012efcf3.png"
                      alt="image-20241125175349810" style="zoom:50%;" 
                ></p>
<p>上图是训练30000个iteration后生成的mesh。可以看出2DGS生成的mesh还是比较精确的。</p>
<h2 id="gof">GOF</h2>
<p>未完待续...</p>
]]></content>
      <categories>
        <category>三维重建</category>
      </categories>
      <tags>
        <tag>NeRF</tag>
        <tag>3DGS</tag>
        <tag>2DGS</tag>
      </tags>
  </entry>
  <entry>
    <title>将现有场景生成网格导入mujoco的简要pipeline</title>
    <url>/2024/12/10/11-MeshToMujoco/</url>
    <content><![CDATA[<h2 id="一数据预处理">一、数据预处理</h2>
<p>nerfstudio里整合了COLMAP工具，可通过它的指令直接对现有的数据进行预处理，转化为nerfstudio需要的格式。支持的数据类型如下表所示：</p>
<table>
<colgroup>
<col style="width: 29%" />
<col style="width: 29%" />
<col style="width: 29%" />
<col style="width: 11%" />
</colgroup>
<thead>
<tr>
<th>Data</th>
<th>Capture Device</th>
<th>Requirements</th>
<th><code>ns-process-data</code> Speed</th>
</tr>
</thead>
<tbody>
<tr>
<td>📷 <a class="link" 
 href="https://docs.nerf.studio/quickstart/custom_dataset.html#images-or-video" >Images<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></td>
<td>Any</td>
<td><a class="link"   href="https://colmap.github.io/install.html" >COLMAP<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></td>
<td>🐢</td>
</tr>
<tr>
<td>📹 <a class="link" 
 href="https://docs.nerf.studio/quickstart/custom_dataset.html#images-or-video" >Video<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></td>
<td>Any</td>
<td><a class="link"   href="https://colmap.github.io/install.html" >COLMAP<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></td>
<td>🐢</td>
</tr>
<tr>
<td>🌎 <a class="link" 
 href="https://docs.nerf.studio/quickstart/custom_dataset.html#data-equirectangular" >360
Data<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></td>
<td>Any</td>
<td><a class="link"   href="https://colmap.github.io/install.html" >COLMAP<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></td>
<td>🐢</td>
</tr>
<tr>
<td>📱 <a class="link" 
 href="https://docs.nerf.studio/quickstart/custom_dataset.html#polycam-capture" >Polycam<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></td>
<td>IOS with LiDAR</td>
<td><a class="link"   href="https://poly.cam/" >Polycam App<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></td>
<td>🐇</td>
</tr>
<tr>
<td>📱 <a class="link" 
 href="https://docs.nerf.studio/quickstart/custom_dataset.html#kiri-engine-capture" >KIRI
Engine<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></td>
<td>IOS or Android</td>
<td><a class="link"   href="https://www.kiriengine.com/" >KIRI Engine App<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></td>
<td>🐇</td>
</tr>
<tr>
<td>📱 <a class="link" 
 href="https://docs.nerf.studio/quickstart/custom_dataset.html#record3d-capture" >Record3D<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></td>
<td>IOS with LiDAR</td>
<td><a class="link"   href="https://record3d.app/" >Record3D app<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></td>
<td>🐇</td>
</tr>
<tr>
<td>📱 <a class="link" 
 href="https://docs.nerf.studio/quickstart/custom_dataset.html#spectacularai" >Spectacular
AI<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></td>
<td>IOS, OAK, <a class="link" 
 href="https://www.spectacularai.com/mapping#supported-devices" >others<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></td>
<td><a class="link" 
 href="https://apps.apple.com/us/app/spectacular-rec/id6473188128" >App<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>
/ <a
href="https://www.spectacularai.com/mapping"><code>sai-cli</code></a></td>
<td>🐇</td>
</tr>
<tr>
<td>🖥 <a class="link" 
 href="https://docs.nerf.studio/quickstart/custom_dataset.html#metashape" >Metashape<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></td>
<td>Any</td>
<td><a class="link"   href="https://www.agisoft.com/" >Metashape<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></td>
<td>🐇</td>
</tr>
<tr>
<td>🖥 <a class="link" 
 href="https://docs.nerf.studio/quickstart/custom_dataset.html#realitycapture" >RealityCapture<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></td>
<td>Any</td>
<td><a class="link" 
 href="https://www.capturingreality.com/realitycapture" >RealityCapture<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></td>
<td>🐇</td>
</tr>
<tr>
<td>🖥 <a class="link" 
 href="https://docs.nerf.studio/quickstart/custom_dataset.html#odm" >ODM<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></td>
<td>Any</td>
<td><a class="link"   href="https://github.com/OpenDroneMap/ODM" >ODM<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></td>
<td>🐇</td>
</tr>
<tr>
<td>👓 <a class="link" 
 href="https://docs.nerf.studio/quickstart/custom_dataset.html#aria" >Aria<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></td>
<td>Aria glasses</td>
<td><a class="link"   href="https://projectaria.com/" >Project Aria<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></td>
<td>🐇</td>
</tr>
<tr>
<td>🛠 <a class="link" 
 href="https://docs.nerf.studio/quickstart/data_conventions.html" >Custom<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></td>
<td>Any</td>
<td>Camera Poses</td>
<td>🐇</td>
</tr>
</tbody>
</table>
<p>一个简单的处理的代码示例如下： <div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ns-process-data &#123;video,images,polycam,record3d&#125; --data &#123;DATA_PATH&#125; --output-dir &#123;PROCESSED_DATA_DIR&#125;</span><br></pre></td></tr></table></figure></div></p>
<p>完整的参数集可参考<a class="link" 
 href="https://docs.nerf.studio/reference/cli/ns_process_data.html" >此处<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。在<a class="link" 
 href="https://docs.nerf.studio/quickstart/custom_dataset.html" >教程网站<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>也有更多其他类型数据的捕获教程。</p>
<details class="orange" data-header-exclude><summary><i class="fa-solid fa-chevron-right"></i>踩坑记录 点击展开 </summary>
              <div class='content'>
              <p><strong>colmap feature_extractor报错</strong>：</p><p><strong>报错内容</strong>：</p><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/12/a782ca87807e6116d05be3d9526f7ff9.png"
                      alt="image-20241210152913623" style="zoom: 67%;" 
                ></p><p><strong>解决方案</strong>：</p><ol type="1"><li><p>确认<code>xcb</code>插件是否安装：</p><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install libxcb-*</span><br></pre></td></tr></table></figure></div></li><li><p>设置环境变量：</p><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> QT_QPA_PLATFORM_PLUGIN_PATH=/home/felix/.local/lib/python3.10/site-packages/cv2/qt/plugins</span><br><span class="line"><span class="built_in">export</span> QT_QPA_PLATFORM=offscreen</span><br></pre></td></tr></table></figure></div><p>（路径记得改成自己的路径）</p></li></ol><p>这样应该就可以了，至少博主执行这两串代码后能成功运行。（虽然这个处理过程确实很慢）</p>
              </div>
            </details>
<h2 id="二模型训练">二、模型训练</h2>
<p>可直接对处理后的数据用nerfacto方法进行训练：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ns-train nerfacto --data &#123;PROCESSED_DATA_DIR&#125;</span><br></pre></td></tr></table></figure></div>
<p>还有一些比较常用的参数：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">--<span class="built_in">help</span> <span class="comment">#显示帮助菜单</span></span><br><span class="line">--output-dir <span class="comment">#输出文件夹</span></span><br><span class="line">--steps-per-save <span class="comment">#多少step保存一次，默认为2000</span></span><br><span class="line">--max-num-iterations <span class="comment">#最大iteration，默认为30000</span></span><br><span class="line">--mixed-precision <span class="comment">#是否启用混合精度，默认为true</span></span><br><span class="line">--load-config <span class="comment">#从配置文件读取，可从之前的训练中继续</span></span><br></pre></td></tr></table></figure></div>
<p>训练结果默认会保存在outputs文件夹中。其中包含一个<code>config.yml</code>文件，记录了训练的配置信息。可通过读取它来进行接续的训练或者可视化：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ns-viewer --load-config &#123;outputs/.../config.yml&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="三模型导出">三、模型导出</h2>
<p>在nerfstudio里支持三种类型的模型导出：<code>3d gaussion</code>、<code>point cloud</code>和<code>mesh</code>。这里只提及<code>mesh</code>的导出。</p>
<p>最简单的导出指令为：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ns-export poisson --load-config CONFIG.yml --output-dir OUTPUT_DIR</span><br></pre></td></tr></table></figure></div>
<p>而在可视化界面中，可以自动生成导出指令：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/12/291b1e3654b600855e834fc4b8800818.png"
                      alt="image-20241210172317358" style="zoom:80%;" 
                ></p>
<p>其中可以对参数进行调整，比如<code>Use Crop</code>可以自动裁剪保留中心物体，<code># Faces</code>可以控制产生的面数的上限，<code># Points</code>控制点数的上限。最后生成的指令为以下结构：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ns-export poisson --load-config &#123;outputs/.../config.yml&#125; --output-dir &#123;OUTPUT_DIR&#125; --target-num-faces 50000 --num-pixels-per-side 2048 --num-points 1000000 --remove-outliers True --normal-method open3d --obb_center 0.0000000000 0.0000000000 0.0000000000 --obb_rotation 0.0000000000 0.0000000000 0.0000000000 --obb_scale 1.0000000000 1.0000000000 1.0000000000</span><br></pre></td></tr></table></figure></div>
<p>其中<code>possion</code>
表示使用泊松重建方法，nerfstudio还支持其他的重建方法，如<code>marching-cubes</code>和<code>tsdf</code>等，但效果都不尽如人意（可参考我之前的文章<a
href="https://felixchristian.top/2024/11/12/8-NeRF_Studio/">NeRF
Studio简要教程 | FelixChristian's Blog</a>，里面有重建结果）。</p>
<h2 id="四凸分解">四、凸分解</h2>
<p>在我之前的文章<a
href="https://felixchristian.top/2024/09/29/3-CoACD_notes/">Mujoco -
CoACD简略教程 | FelixChristian's
Blog</a>中有介绍到CoACD工具的安装和使用。</p>
<p>当编译完CoACD之后，可直接执行凸分解指令： <div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">./main -i PATH_OF_YOUR_MESH -o PATH_OF_OUTPUT</span><br></pre></td></tr></table></figure></div></p>
<p>需要注意的是，两个<code>PATH</code>都是需要以具体的<code>.obj</code>文件结尾的。最终导出的单个<code>.obj</code>文件是以多个组件结合的。如果直接导入mujoco，它还是会对整个文件再次进行替换。</p>
<p>为了在mujoco中实现正常的碰撞。必须把单个<code>.obj</code>文件导出为多个<code>.stl</code>文件，再在mujoco的<code>.xml</code>文件中进行引用。</p>
<p>这里借助了Blender的<a class="link" 
 href="https://github.com/mrtripie/Blender-Super-Batch-Export" >Super-Batch-Export<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>插件：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/12/1a9a797389874618f4db594e7c9dcdd9.png"
                      alt="image-20241210190612219" style="zoom:80%;" 
                ></p>
<p>需要注意的是，根据mujoco的官方文档介绍：</p>
<blockquote>
<p>MuJoCo can load triangulated meshes from OBJ files and binary STL.
Software such as <a class="link"   href="https://www.meshlab.net/" >MeshLab<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> can be
used to convert from other formats. While any collection of triangles
can be loaded and visualized as a mesh, the collision detector works
with the convex hull. There are compile-time options for scaling the
mesh, as well as fitting a primitive geometric shape to it. The mesh can
also be used to automatically infer inertial properties – by treating it
as a union of triangular pyramids and combining their masses and
inertias. Note that meshes have no color, instead the mesh is colored
using the material properties of the referencing geom. In contrast, all
spatial properties are determined by the mesh data. MuJoCo supports both
OBJ and a custom binary file format for normals and texture coordinates.
Meshes can also be embedded directly in the XML.</p>
</blockquote>
<p>mujoco可以从<code>.obj</code>文件和<code>.stl</code>文件加载三角网格，所以在用Blender进行批量导出时，需要选择这两种格式。</p>
<h2 id="五导入mujoco">五、导入mujoco</h2>
<p>以<code>.obj</code>文件为例（<code>.stl</code>文件同理）：</p>
<p>在上一步中导出的文件为<code>convex_0.obj</code>、<code>convex_1.obj</code>、...
、<code>convex_n.obj</code>的形式。在我的<a class="link" 
 href="https://github.com/FelixChristian011226/Mujoco-RL" >FelixChristian011226/Mujoco-RL<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>仓库中，编写了一个简单的脚本<a class="link" 
 href="https://github.com/FelixChristian011226/Mujoco-RL/blob/main/terrain/gen_component/gen_convex.py" >gen_convex.py<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，用于生成<code>.xml</code>文件中相应的引用。使用过程如下：</p>
<ol type="1">
<li><p>首先，将生成的多个<code>.obj</code>文件，存放在<code>./terrain/mesh/&#123;your_mesh_name&#125;/</code>文件夹中。</p></li>
<li><p>然后进入<code>./terrain</code>目录，使用如下指令：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">python3 ./gen_component/gen_convex.py &#123;model_folder&#125; &#123;indent_level&#125; &#123;total_count&#125;</span><br></pre></td></tr></table></figure></div>
<p>其中<code>model_folder</code>对应<code>your_mesh_name</code>，即<code>./terrain/mesh/</code>目录下存放<code>.obj</code>文件的文件夹名称。</p>
<p><code>indent_level</code>是缩进量，一般为2，仅仅为了<code>.xml</code>文件中美观而设置。</p>
<p><code>total_count</code>是总的<code>.obj</code>文件数量，即最后一个文件的下标加一。</p></li>
<li><p>最后将<code>.terrain/component/convex.xml</code>文件中的前半部分内容，复制到对应的<code>.xml</code>的<code>&lt;asset&gt;</code>部分，后半部分内容复制到<code>&lt;worldbody&gt;</code>部分。然后给其设置纹理，如：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;material name=&quot;mat_&#123;name&#125;&quot; rgba=&quot;0.8 0.8 0.8 1&quot;/&gt;</span><br></pre></td></tr></table></figure></div>
<p>其中<code>name</code>应该和文件夹名对应。</p></li>
<li><p>最后再运行对应的<code>.xml</code>文件即可。</p></li>
</ol>
]]></content>
      <categories>
        <category>机器仿真</category>
      </categories>
      <tags>
        <tag>mujoco</tag>
        <tag>CoACD</tag>
        <tag>NeRF</tag>
        <tag>mesh</tag>
      </tags>
  </entry>
  <entry>
    <title>Genesis简要介绍与样例展示</title>
    <url>/2024/12/19/12-GenesisIntroduction/</url>
    <content><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Genesis
是一个物理平台，专为通用机器人/嵌入式人工智能/物理人工智能应用而设计。它同时是多种事物：</p>
<ul>
<li>从头开始重建的通用物理引擎，能够模拟各种材料和物理现象。</li>
<li>一个轻量级、超快速、Pythonic 且用户友好的机器人仿真平台。</li>
<li>强大且快速的逼真渲染系统。</li>
<li>一种生成数据引擎，可将用户提示的自然语言描述转换为各种数据形式。</li>
</ul>
<h2 id="examples">Examples</h2>
<p>分别测试现有的<code>examples</code>中的场景，结果如下：</p>
<h3 id="simulation">1. Simulation</h3>
<table>
<colgroup>
<col style="width: 23%" />
<col style="width: 76%" />
</colgroup>
<thead>
<tr>
<th>File</th>
<th>Result</th>
</tr>
</thead>
<tbody>
<tr>
<td>cloth_on_rigid.py</td>
<td><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2025/01/cbf169adaa98f0d5a7dadcea030fa4aa.gif"
                      alt="2025-01-07-23-51-16" style="zoom:50%;" 
                ></td>
</tr>
<tr>
<td>cut_dragon.py</td>
<td><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2025/01/5eeb2157a3a3e0e65b8a637f6a7606e3.gif"
                      alt="动画" style="zoom:50%;" 
                ></td>
</tr>
<tr>
<td>flush_cubes.py</td>
<td><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2025/01/26a959a4222e4081cf3d1a857826f54d.gif"
                      alt="动画" style="zoom:50%;" 
                ></td>
</tr>
<tr>
<td>grasp_soft_cube.py</td>
<td><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2025/01/0bcd1e4a3f57d947106226115420ec5f.gif"
                      alt="动画" style="zoom:50%;" 
                ></td>
</tr>
<tr>
<td>sand_wheel.py</td>
<td><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2025/01/0cf95542a6a2c8ca4d92bd467fbdeb3a.gif"
                      alt="动画" style="zoom:50%;" 
                ></td>
</tr>
<tr>
<td>sph_mpm.py</td>
<td><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2025/01/6f40c4612af0b57fb0622993b8f94254.gif"
                      alt="动画" style="zoom:50%;" 
                ></td>
</tr>
<tr>
<td>sph_rigid.py</td>
<td><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2025/01/0021b8d6814eda6e28cc377649cb104c.gif"
                      alt="动画" style="zoom:50%;" 
                ></td>
</tr>
<tr>
<td>water_wheel.py</td>
<td><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2025/01/682cd236c42bb05631c3979e68929646.gif"
                      alt="动画" style="zoom:50%;" 
                ></td>
</tr>
</tbody>
</table>
<p>(目前就找到这些)</p>
<h3 id="training">2. Training</h3>
<h4 id="drone-hover">(1). drone (hover)</h4>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2025/01/9de392f46f1b13ec529f76e9bbfcf5ea.gif"
                      alt="动画" style="zoom: 80%;" 
                ></p>
<h4 id="locomotion-go2">(2). locomotion (go2)</h4>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2025/01/565f6bdacbdf790476442036a3331466.gif"
                      alt="动画" style="zoom:80%;" 
                ></p>
<h4 id="modified-locomotion-go2">(3). modified locomotion (go2)</h4>
<p>本来尝试对<code>go2_env</code>增加一个mesh的障碍，但是训练中发现<code>go2</code>直接穿模了。于是用最简单的<code>Box</code>代替，做了个简单的围墙：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2025/01/0bf6b0c53b8d6cfad07a4e598f84b15f.png"
                      alt="image-20250108014803652" style="zoom:50%;" 
                ></p>
<p>对其进行了<code>10000</code>个<code>iteration</code>的训练：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2025/01/bec10fefd8553fcf202c29ba5e271f54.png"
                      alt="image-20250108014904100" style="zoom:50%;" 
                ></p>
<p>看看训练结果：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2025/01/e5783629e54eccd3830290117eacbd23.gif"
                      alt="动画" style="zoom:50%;" 
                ></p>
<h2 id="errors-solutions">Errors &amp; Solutions</h2>
<h3
id="opengl.error.error-attempt-to-retrieve-context-when-no-valid-context">1.
OpenGL.error.Error: Attempt to retrieve context when no valid
context</h3>
<p>在<code>Windows</code>的<code>WSL</code>虚拟机中安装了<code>Ubuntu</code>系统，在直接运行测试样例时会出现如下的报错：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/12/6d69fa4bfe85a80c6f4952d7840f4de9.png"
                      alt="image-20241219162641596" style="zoom: 67%;" 
                ></p>
<p>在<a class="link" 
 href="https://github.com/yt-project/yt_idv/issues/81" >Github<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>上面有类似的问题和解决方案。</p>
<p><strong>原因</strong>：Ubuntu 的最新版本已默认切换为使用 Wayland
图形协议（来自 Xorg）。目前，pyglet 不支持 Wayland。虽然单独使用 pyglet
仍然有效（感谢 xWayland），但使用 pyimgui-pyglet 会导致 PyOpenGL
选择不正确的图形后端。</p>
<p><strong>解决方案</strong>：在运行前强制指定PyOpenGL使用Xorg：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PYOPENGL_PLATFORM=<span class="string">&#x27;glx&#x27;</span></span><br></pre></td></tr></table></figure></div>
<h2 id="unsolved-problems">Unsolved Problems</h2>
<h3 id="decomposition-deactivates-collision">1. Decomposition
deactivates collision</h3>
<p>在genesis中导入的mesh，在导入时可以设置参数进行凸分解。底层还是调用的<code>CoACD</code>工具。试图在genesis对mesh直接进行凸分解，但是发现凸分解之后偶尔会导致碰撞失效。
<strong>参数设置</strong>：</p>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr>
<th>不进行凸分解</th>
<th>凸分解</th>
</tr>
</thead>
<tbody>
<tr>
<td><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2025/01/55dcc1efda7f3dd408108f1b16815f7e.png"
                      alt="image-20250107220338773" style="zoom:67%;" 
                ></td>
<td><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2025/01/89dab658e2494000a882275df1559ec5.png"
                      alt="image-20250107220752936" style="zoom:67%;" 
                ></td>
</tr>
</tbody>
</table>
<p>在genesis的<code>Mesh</code>类中，有两个参数与凸分解有关：</p>
<ul>
<li><strong>convexify</strong>:
此参数用于控制是否将<code>Mesh</code>直接进行凸包运算，即等同于<code>mujoco</code>中的默认算法，将<code>Mesh</code>求个凸包。实际碰撞的体积与渲染出来的实际形状会有差异。</li>
<li><strong>decompose_nonconvex</strong>:
此参数仅在<code>convexify</code>为<code>False</code>时有效，表示是否使用<code>CoACD</code>对<code>Mesh</code>进行凸分解。</li>
</ul>
<p><strong>结果比对</strong>：</p>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr>
<th>不进行凸分解</th>
<th>凸分解</th>
</tr>
</thead>
<tbody>
<tr>
<td><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2025/01/a4f3b9013a618e4a96e1f55f4fabcaad.gif"
                      alt="2025-01-07-23-39-57" style="zoom:50%;" 
                ></td>
<td><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2025/01/22ffb289472b8ee43525964ab9661718.gif"
                      alt="2025-01-07-23-36-50" style="zoom: 50%;" 
                ></td>
</tr>
</tbody>
</table>
<p>在实际运行中，当对复杂模型进行凸分解（即<code>decompose_nonconvex</code>设为<code>True</code>），可能会导致穿模的情况。更换模型后，发现又成功了：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2025/01/4db91d11532bcf4777a85ff9a5c10f1f.gif"
                      alt="2025-01-07-23-29-24" style="zoom:50%;" 
                ></p>
<p>Anyway，目前还不清楚问题出在<code>CoACD</code>还是<code>genesis</code>。</p>
<h3 id="mjcf-import-failure">2. MJCF Import Failure</h3>
<p>genesis中导入mujoco的场景xml时，很容易出现消失的情况。在issue<a class="link" 
 href="https://github.com/Genesis-Embodied-AI/Genesis/issues/603" >#603<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>和<a class="link" 
 href="https://github.com/Genesis-Embodied-AI/Genesis/issues/287" >#287<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>里有提到。</p>
<p>如果需要将xml成功导入，需要给geom设置<code>conaffinity</code>和<code>contype</code>参数为0。但是这样就避免了物体间的碰撞。</p>
<p>查阅genesis的源码，目前的推测是，genesis里的一个<code>Entity</code>是一个单独的单位，要对他进行<code>material</code>和<code>texture</code>等的设置，所以默认避免了单个<code>Entity</code>导入多个物件。</p>
]]></content>
      <categories>
        <category>机器仿真</category>
      </categories>
      <tags>
        <tag>genesis</tag>
      </tags>
  </entry>
  <entry>
    <title>Photometric Stereo</title>
    <url>/2024/12/09/10-PhotometricStereo/</url>
    <content><![CDATA[<h2 id="experiment-purpose">1. Experiment Purpose</h2>
<p>The goal of this experiment is to implement the Photometric Stereo
algorithm, which uses multiple images under different lighting
directions to estimate the surface normal vectors and albedo, and then
re-render the image under a specified lighting direction.</p>
<ul>
<li><strong>Normal Vector Calculation</strong>: According to the
Lambertian model formula <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.489ex;" xmlns="http://www.w3.org/2000/svg" width="8.993ex" height="3.704ex" role="img" focusable="false" viewBox="0 -1421 3975 1637"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mo" transform="translate(781.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(1837.6,0)"><path data-c="1D70C" d="M58 -216Q25 -216 23 -186Q23 -176 73 26T127 234Q143 289 182 341Q252 427 341 441Q343 441 349 441T359 442Q432 442 471 394T510 276Q510 219 486 165T425 74T345 13T266 -10H255H248Q197 -10 165 35L160 41L133 -71Q108 -168 104 -181T92 -202Q76 -216 58 -216ZM424 322Q424 359 407 382T357 405Q322 405 287 376T231 300Q217 269 193 170L176 102Q193 26 260 26Q298 26 334 62Q367 92 389 158T418 266T424 322Z"></path></g><g data-mml-node="mover" transform="translate(2354.6,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(300,558) translate(-500 0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g><g data-mml-node="mo" transform="translate(3176.8,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mover" transform="translate(3677,0)"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(232.3,810) translate(-500 0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g></g></g></svg></mjx-container></span>,
where <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.489ex;" xmlns="http://www.w3.org/2000/svg" width="1.17ex" height="1.489ex" role="img" focusable="false" viewBox="0 -442 517 658"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D70C" d="M58 -216Q25 -216 23 -186Q23 -176 73 26T127 234Q143 289 182 341Q252 427 341 441Q343 441 349 441T359 442Q432 442 471 394T510 276Q510 219 486 165T425 74T345 13T266 -10H255H248Q197 -10 165 35L160 41L133 -71Q108 -168 104 -181T92 -202Q76 -216 58 -216ZM424 322Q424 359 407 382T357 405Q322 405 287 376T231 300Q217 269 193 170L176 102Q193 26 260 26Q298 26 334 62Q367 92 389 158T418 266T424 322Z"></path></g></g></g></svg></mjx-container></span> is the albedo, <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="2.67ex" role="img" focusable="false" viewBox="0 -1169 600 1180"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mover"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(300,558) translate(-500 0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g></g></g></svg></mjx-container></span> is the normal vector,
and <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.674ex" height="3.24ex" role="img" focusable="false" viewBox="0 -1421 298 1432"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mover"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(232.3,810) translate(-500 0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g></g></g></svg></mjx-container></span> is the
lighting direction. The albedo <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.489ex;" xmlns="http://www.w3.org/2000/svg" width="1.17ex" height="1.489ex" role="img" focusable="false" viewBox="0 -442 517 658"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D70C" d="M58 -216Q25 -216 23 -186Q23 -176 73 26T127 234Q143 289 182 341Q252 427 341 441Q343 441 349 441T359 442Q432 442 471 394T510 276Q510 219 486 165T425 74T345 13T266 -10H255H248Q197 -10 165 35L160 41L133 -71Q108 -168 104 -181T92 -202Q76 -216 58 -216ZM424 322Q424 359 407 382T357 405Q322 405 287 376T231 300Q217 269 193 170L176 102Q193 26 260 26Q298 26 334 62Q367 92 389 158T418 266T424 322Z"></path></g></g></g></svg></mjx-container></span>
and lighting direction <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.674ex" height="3.24ex" role="img" focusable="false" viewBox="0 -1421 298 1432"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mover"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(232.3,810) translate(-500 0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g></g></g></svg></mjx-container></span> can be uniquely
determined when at least three images with known lighting directions are
provided.</li>
<li><strong>Shadow and Highlight Processing</strong>: Shadows and
highlights break the linear Lambertian model. A simple solution is to
sort all the observations for each pixel and discard a certain
percentage of the brightest and darkest pixels to remove shadows and
highlights.</li>
</ul>
<h2 id="experiment-principle">2. Experiment Principle</h2>
<p><img lazyload="" src="/images/loading.svg" data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/12/0dade61b941065d1325153ebd11cd867.png" alt="Lambert" style="zoom: 33%;"></p>
<p>According to the Lambertian model (a purely diffuse reflection
model), for each point on the surface, there is a fixed albedo <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.489ex;" xmlns="http://www.w3.org/2000/svg" width="2.157ex" height="1.489ex" role="img" focusable="false" viewBox="0 -442 953.6 658"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D70C" d="M58 -216Q25 -216 23 -186Q23 -176 73 26T127 234Q143 289 182 341Q252 427 341 441Q343 441 349 441T359 442Q432 442 471 394T510 276Q510 219 486 165T425 74T345 13T266 -10H255H248Q197 -10 165 35L160 41L133 -71Q108 -168 104 -181T92 -202Q76 -216 58 -216ZM424 322Q424 359 407 382T357 405Q322 405 287 376T231 300Q217 269 193 170L176 102Q193 26 260 26Q298 26 334 62Q367 92 389 158T418 266T424 322Z"></path></g><g data-mml-node="mn" transform="translate(550,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></g></svg></mjx-container></span>, and the intensity of the
reflected light <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.504ex" height="1.902ex" role="img" focusable="false" viewBox="0 -683 1106.9 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mi" transform="translate(714,-150) scale(0.707)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g></g></g></g></svg></mjx-container></span> depends only on
the albedo <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.489ex;" xmlns="http://www.w3.org/2000/svg" width="2.157ex" height="1.489ex" role="img" focusable="false" viewBox="0 -442 953.6 658"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D70C" d="M58 -216Q25 -216 23 -186Q23 -176 73 26T127 234Q143 289 182 341Q252 427 341 441Q343 441 349 441T359 442Q432 442 471 394T510 276Q510 219 486 165T425 74T345 13T266 -10H255H248Q197 -10 165 35L160 41L133 -71Q108 -168 104 -181T92 -202Q76 -216 58 -216ZM424 322Q424 359 407 382T357 405Q322 405 287 376T231 300Q217 269 193 170L176 102Q193 26 260 26Q298 26 334 62Q367 92 389 158T418 266T424 322Z"></path></g><g data-mml-node="mn" transform="translate(550,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></g></svg></mjx-container></span> and the angle
<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="1.801ex" height="1.952ex" role="img" focusable="false" viewBox="0 -705 796 862.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mi" transform="translate(502,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></span> of the incident light (the
angle between the light direction and the normal vector). The formula is
as follows: <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.489ex;" xmlns="http://www.w3.org/2000/svg" width="27.031ex" height="2.084ex" role="img" focusable="false" viewBox="0 -705 11947.8 921"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mi" transform="translate(714,-150) scale(0.707)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g></g><g data-mml-node="mo" transform="translate(1384.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(2440.5,0)"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mi" transform="translate(714,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="msub" transform="translate(3448.5,0)"><g data-mml-node="mi"><path data-c="1D70C" d="M58 -216Q25 -216 23 -186Q23 -176 73 26T127 234Q143 289 182 341Q252 427 341 441Q343 441 349 441T359 442Q432 442 471 394T510 276Q510 219 486 165T425 74T345 13T266 -10H255H248Q197 -10 165 35L160 41L133 -71Q108 -168 104 -181T92 -202Q76 -216 58 -216ZM424 322Q424 359 407 382T357 405Q322 405 287 376T231 300Q217 269 193 170L176 102Q193 26 260 26Q298 26 334 62Q367 92 389 158T418 266T424 322Z"></path></g><g data-mml-node="mn" transform="translate(550,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mi" transform="translate(4568.7,0)"><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(444,0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(944,0)"></path></g><g data-mml-node="mo" transform="translate(5906.7,0)"><path data-c="2061" d=""></path></g><g data-mml-node="msub" transform="translate(6073.3,0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mi" transform="translate(502,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(7147.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(8202.8,0)"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mi" transform="translate(714,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="msub" transform="translate(9210.8,0)"><g data-mml-node="mi"><path data-c="1D70C" d="M58 -216Q25 -216 23 -186Q23 -176 73 26T127 234Q143 289 182 341Q252 427 341 441Q343 441 349 441T359 442Q432 442 471 394T510 276Q510 219 486 165T425 74T345 13T266 -10H255H248Q197 -10 165 35L160 41L133 -71Q108 -168 104 -181T92 -202Q76 -216 58 -216ZM424 322Q424 359 407 382T357 405Q322 405 287 376T231 300Q217 269 193 170L176 102Q193 26 260 26Q298 26 334 62Q367 92 389 158T418 266T424 322Z"></path></g><g data-mml-node="mn" transform="translate(550,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mi" transform="translate(10164.4,0)"><path data-c="1D48F" d="M24 296Q25 302 27 312T41 350T65 397T104 435T159 452Q203 452 234 435Q268 419 285 384L293 391Q363 452 454 452Q575 446 597 367Q599 356 599 334Q599 285 562 183T522 66Q519 43 530 43Q557 43 582 69T621 138Q626 156 630 159T650 162H656H667Q687 162 687 148Q687 138 677 115T647 63T595 13T522 -8Q475 -8 439 16T402 82Q402 96 439 199T477 351Q477 401 434 401Q421 401 409 398Q341 388 285 305L278 295L247 170Q216 46 214 40Q206 22 187 7T143 -8T104 7T90 39Q90 47 108 124T146 274L164 347Q166 355 166 372Q166 401 149 401Q129 401 115 379T89 306Q84 288 80 285T55 282H44Q24 282 24 296Z"></path></g><g data-mml-node="mo" transform="translate(11099.6,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mi" transform="translate(11599.8,0)"><path data-c="1D48D" d="M157 -8Q138 -8 118 -4T77 11T41 42T27 91V106L156 622H152Q151 622 147 622T137 623T125 624T114 624T104 624T99 625Q87 628 87 642Q87 647 91 661T97 679Q101 684 112 685T188 690Q261 694 275 694Q292 694 296 679L151 91Q150 85 150 71Q150 42 167 42Q186 42 205 75Q216 96 225 134Q230 155 234 158T255 162H260H271Q291 162 291 148Q290 145 289 140T283 118T271 87T254 54T229 23T197 1T157 -8Z"></path></g></g></g></svg></mjx-container></span>
<img lazyload="" src="/images/loading.svg" data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/12/a0fd7c0140bfcafeb008f056358914a7.png" alt="image-20241207132846933" style="zoom: 33%;"></p>
<p>When we have images under different lighting directions, we can use
the Lambertian model to analyze each pixel individually. With three
lighting angles, we can express the Lambertian model equation in matrix
form as: <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -4.19ex;" xmlns="http://www.w3.org/2000/svg" width="17.803ex" height="9.511ex" role="img" focusable="false" viewBox="0 -2351.9 7868.9 4203.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mrow"><g data-mml-node="mo"><path data-c="239B" d="M837 1154Q843 1148 843 1145Q843 1141 818 1106T753 1002T667 841T574 604T494 299Q417 -84 417 -609Q417 -641 416 -647T411 -654Q409 -655 366 -655Q299 -655 297 -654Q292 -652 292 -643T291 -583Q293 -400 304 -242T347 110T432 470T574 813T785 1136Q787 1139 790 1142T794 1147T796 1150T799 1152T802 1153T807 1154T813 1154H819H837Z" transform="translate(0,996)"></path><path data-c="239D" d="M843 -635Q843 -638 837 -644H820Q801 -644 800 -643Q792 -635 785 -626Q684 -503 605 -363T473 -75T385 216T330 518T302 809T291 1093Q291 1144 291 1153T296 1164Q298 1165 366 1165Q409 1165 411 1164Q415 1163 416 1157T417 1119Q417 529 517 109T833 -617Q843 -631 843 -635Z" transform="translate(0,-1006)"></path><svg width="875" height="382" y="59" x="0" viewBox="0 86.3 875 382"><path data-c="239C" d="M413 -9Q412 -9 407 -9T388 -10T354 -10Q300 -10 297 -9Q294 -8 293 -5Q291 5 291 127V300Q291 602 292 605L296 609Q298 610 366 610Q382 610 392 610T407 610T412 609Q416 609 416 592T417 473V127Q417 -9 413 -9Z" transform="scale(1,0.924)"></path></svg></g><g data-mml-node="mtable" transform="translate(875,0)"><g data-mml-node="mtr" transform="translate(0,1400)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mn" transform="translate(473,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mtr"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mn" transform="translate(473,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-1400)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mn" transform="translate(473,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></g></g><g data-mml-node="mo" transform="translate(1751.6,0)"><path data-c="239E" d="M31 1143Q31 1154 49 1154H59Q72 1154 75 1152T89 1136Q190 1013 269 873T401 585T489 294T544 -8T572 -299T583 -583Q583 -634 583 -643T577 -654Q575 -655 508 -655Q465 -655 463 -654Q459 -653 458 -647T457 -609Q457 -58 371 340T100 1037Q87 1059 61 1098T31 1143Z" transform="translate(0,996)"></path><path data-c="23A0" d="M56 -644H50Q31 -644 31 -635Q31 -632 37 -622Q69 -579 100 -527Q286 -228 371 170T457 1119Q457 1161 462 1164Q464 1165 520 1165Q575 1165 577 1164Q582 1162 582 1153T583 1093Q581 910 570 752T527 400T442 40T300 -303T89 -626Q78 -640 75 -642T61 -644H56Z" transform="translate(0,-1006)"></path><svg width="875" height="382" y="59" x="0" viewBox="0 86.3 875 382"><path data-c="239F" d="M579 -9Q578 -9 573 -9T554 -10T520 -10Q466 -10 463 -9Q460 -8 459 -5Q457 5 457 127V300Q457 602 458 605L462 609Q464 610 532 610Q548 610 558 610T573 610T578 609Q582 609 582 592T583 473V127Q583 -9 579 -9Z" transform="scale(1,0.924)"></path></svg></g></g><g data-mml-node="mo" transform="translate(2904.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(3960.1,0)"><g data-mml-node="mo"><path data-c="239B" d="M837 1154Q843 1148 843 1145Q843 1141 818 1106T753 1002T667 841T574 604T494 299Q417 -84 417 -609Q417 -641 416 -647T411 -654Q409 -655 366 -655Q299 -655 297 -654Q292 -652 292 -643T291 -583Q293 -400 304 -242T347 110T432 470T574 813T785 1136Q787 1139 790 1142T794 1147T796 1150T799 1152T802 1153T807 1154T813 1154H819H837Z" transform="translate(0,1197.9)"></path><path data-c="239D" d="M843 -635Q843 -638 837 -644H820Q801 -644 800 -643Q792 -635 785 -626Q684 -503 605 -363T473 -75T385 216T330 518T302 809T291 1093Q291 1144 291 1153T296 1164Q298 1165 366 1165Q409 1165 411 1164Q415 1163 416 1157T417 1119Q417 529 517 109T833 -617Q843 -631 843 -635Z" transform="translate(0,-1207.9)"></path><svg width="875" height="785.8" y="-142.9" x="0" viewBox="0 177.4 875 785.8"><path data-c="239C" d="M413 -9Q412 -9 407 -9T388 -10T354 -10Q300 -10 297 -9Q294 -8 293 -5Q291 5 291 127V300Q291 602 292 605L296 609Q298 610 366 610Q382 610 392 610T407 610T412 609Q416 609 416 592T417 473V127Q417 -9 413 -9Z" transform="scale(1,1.901)"></path></svg></g><g data-mml-node="mtable" transform="translate(875,0)"><g data-mml-node="mtr" transform="translate(0,1510.2)"><g data-mml-node="mtd"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D48D" d="M157 -8Q138 -8 118 -4T77 11T41 42T27 91V106L156 622H152Q151 622 147 622T137 623T125 624T114 624T104 624T99 625Q87 628 87 642Q87 647 91 661T97 679Q101 684 112 685T188 690Q261 694 275 694Q292 694 296 679L151 91Q150 85 150 71Q150 42 167 42Q186 42 205 75Q216 96 225 134Q230 155 234 158T255 162H260H271Q291 162 291 148Q290 145 289 140T283 118T271 87T254 54T229 23T197 1T157 -8Z"></path></g><g data-mml-node="mi" transform="translate(381,363) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mn" transform="translate(381,-287.9) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-19.5)"><g data-mml-node="mtd"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D48D" d="M157 -8Q138 -8 118 -4T77 11T41 42T27 91V106L156 622H152Q151 622 147 622T137 623T125 624T114 624T104 624T99 625Q87 628 87 642Q87 647 91 661T97 679Q101 684 112 685T188 690Q261 694 275 694Q292 694 296 679L151 91Q150 85 150 71Q150 42 167 42Q186 42 205 75Q216 96 225 134Q230 155 234 158T255 162H260H271Q291 162 291 148Q290 145 289 140T283 118T271 87T254 54T229 23T197 1T157 -8Z"></path></g><g data-mml-node="mi" transform="translate(381,363) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mn" transform="translate(381,-287.9) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-1549.1)"><g data-mml-node="mtd"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D48D" d="M157 -8Q138 -8 118 -4T77 11T41 42T27 91V106L156 622H152Q151 622 147 622T137 623T125 624T114 624T104 624T99 625Q87 628 87 642Q87 647 91 661T97 679Q101 684 112 685T188 690Q261 694 275 694Q292 694 296 679L151 91Q150 85 150 71Q150 42 167 42Q186 42 205 75Q216 96 225 134Q230 155 234 158T255 162H260H271Q291 162 291 148Q290 145 289 140T283 118T271 87T254 54T229 23T197 1T157 -8Z"></path></g><g data-mml-node="mi" transform="translate(381,363) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mn" transform="translate(381,-287.2) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></g></g><g data-mml-node="mo" transform="translate(1803.8,0)"><path data-c="239E" d="M31 1143Q31 1154 49 1154H59Q72 1154 75 1152T89 1136Q190 1013 269 873T401 585T489 294T544 -8T572 -299T583 -583Q583 -634 583 -643T577 -654Q575 -655 508 -655Q465 -655 463 -654Q459 -653 458 -647T457 -609Q457 -58 371 340T100 1037Q87 1059 61 1098T31 1143Z" transform="translate(0,1197.9)"></path><path data-c="23A0" d="M56 -644H50Q31 -644 31 -635Q31 -632 37 -622Q69 -579 100 -527Q286 -228 371 170T457 1119Q457 1161 462 1164Q464 1165 520 1165Q575 1165 577 1164Q582 1162 582 1153T583 1093Q581 910 570 752T527 400T442 40T300 -303T89 -626Q78 -640 75 -642T61 -644H56Z" transform="translate(0,-1207.9)"></path><svg width="875" height="785.8" y="-142.9" x="0" viewBox="0 177.4 875 785.8"><path data-c="239F" d="M579 -9Q578 -9 573 -9T554 -10T520 -10Q466 -10 463 -9Q460 -8 459 -5Q457 5 457 127V300Q457 602 458 605L462 609Q464 610 532 610Q548 610 558 610T573 610T578 609Q582 609 582 592T583 473V127Q583 -9 579 -9Z" transform="scale(1,1.901)"></path></svg></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(6638.9,0)"><g data-mml-node="mi"><path data-c="1D70C" d="M58 -216Q25 -216 23 -186Q23 -176 73 26T127 234Q143 289 182 341Q252 427 341 441Q343 441 349 441T359 442Q432 442 471 394T510 276Q510 219 486 165T425 74T345 13T266 -10H255H248Q197 -10 165 35L160 41L133 -71Q108 -168 104 -181T92 -202Q76 -216 58 -216ZM424 322Q424 359 407 382T357 405Q322 405 287 376T231 300Q217 269 193 170L176 102Q193 26 260 26Q298 26 334 62Q367 92 389 158T418 266T424 322Z"></path></g></g><g data-mml-node="mi" transform="translate(7155.9,0)"><path data-c="1D48F" d="M24 296Q25 302 27 312T41 350T65 397T104 435T159 452Q203 452 234 435Q268 419 285 384L293 391Q363 452 454 452Q575 446 597 367Q599 356 599 334Q599 285 562 183T522 66Q519 43 530 43Q557 43 582 69T621 138Q626 156 630 159T650 162H656H667Q687 162 687 148Q687 138 677 115T647 63T595 13T522 -8Q475 -8 439 16T402 82Q402 96 439 199T477 351Q477 401 434 401Q421 401 409 398Q341 388 285 305L278 295L247 170Q216 46 214 40Q206 22 187 7T143 -8T104 7T90 39Q90 47 108 124T146 274L164 347Q166 355 166 372Q166 401 149 401Q129 401 115 379T89 306Q84 288 80 285T55 282H44Q24 282 24 296Z"></path></g></g></g></svg></mjx-container></span> Since the reflected light intensity <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="1.735ex" height="1.902ex" role="img" focusable="false" viewBox="0 -683 767 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mi" transform="translate(473,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></span> and the lighting directions <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="1.527ex" height="1.927ex" role="img" focusable="false" viewBox="0 -694 675 851.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D48D" d="M157 -8Q138 -8 118 -4T77 11T41 42T27 91V106L156 622H152Q151 622 147 622T137 623T125 624T114 624T104 624T99 625Q87 628 87 642Q87 647 91 661T97 679Q101 684 112 685T188 690Q261 694 275 694Q292 694 296 679L151 91Q150 85 150 71Q150 42 167 42Q186 42 205 75Q216 96 225 134Q230 155 234 158T255 162H260H271Q291 162 291 148Q290 145 289 140T283 118T271 87T254 54T229 23T197 1T157 -8Z"></path></g><g data-mml-node="mi" transform="translate(381,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></span> are known, we can
uniquely determine the albedo <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.489ex;" xmlns="http://www.w3.org/2000/svg" width="1.17ex" height="1.489ex" role="img" focusable="false" viewBox="0 -442 517 658"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D70C" d="M58 -216Q25 -216 23 -186Q23 -176 73 26T127 234Q143 289 182 341Q252 427 341 441Q343 441 349 441T359 442Q432 442 471 394T510 276Q510 219 486 165T425 74T345 13T266 -10H255H248Q197 -10 165 35L160 41L133 -71Q108 -168 104 -181T92 -202Q76 -216 58 -216ZM424 322Q424 359 407 382T357 405Q322 405 287 376T231 300Q217 269 193 170L176 102Q193 26 260 26Q298 26 334 62Q367 92 389 158T418 266T424 322Z"></path></g></g></g></g></svg></mjx-container></span> and normal vector <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.018ex;" xmlns="http://www.w3.org/2000/svg" width="1.613ex" height="1.041ex" role="img" focusable="false" viewBox="0 -452 713 460"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D48F" d="M24 296Q25 302 27 312T41 350T65 397T104 435T159 452Q203 452 234 435Q268 419 285 384L293 391Q363 452 454 452Q575 446 597 367Q599 356 599 334Q599 285 562 183T522 66Q519 43 530 43Q557 43 582 69T621 138Q626 156 630 159T650 162H656H667Q687 162 687 148Q687 138 677 115T647 63T595 13T522 -8Q475 -8 439 16T402 82Q402 96 439 199T477 351Q477 401 434 401Q421 401 409 398Q341 388 285 305L278 295L247 170Q216 46 214 40Q206 22 187 7T143 -8T104 7T90 39Q90 47 108 124T146 274L164 347Q166 355 166 372Q166 401 149 401Q129 401 115 379T89 306Q84 288 80 285T55 282H44Q24 282 24 296Z"></path></g></g></g></svg></mjx-container></span> through matrix inversion
when three different lighting directions are available.</p>
<p>With the albedo and normal vectors, re-rendering the image under a
specified lighting direction is easy; we just apply the Lambertian model
to calculate the light intensity at each pixel.</p>
<h2 id="experiment-content">3. Experiment Content</h2>
<p>In the provided code framework, the primary task is to implement the
<code>myPMS.m</code> file.</p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/12/53166fad82ee50e249ecc6a5f518cde9.png" alt="image-20241207134101820" style="zoom:50%;"></p>
<p>First, I modified the original function declarations because the
final output requires three images: the normal map, albedo map, and
re-rendered image, while the original framework only output the normal
map. So, I added the albedo map and re-rendered image to the function's
return. The input now also includes a new parameter
<code>shadow_removal_percentage</code>, which specifies the percentage
of the brightest and darkest pixels to be discarded when handling
shadows and highlights (e.g., if the value is 20, then the darkest 20%
and the brightest 20% pixels are discarded).</p>
<p>In the data preprocessing phase, <code>N</code>, <code>albedo</code>,
and <code>re_rendered_img</code> represent the normal map, albedo map,
and re-rendered image, respectively. They are all three-channel images.
<code>I</code> is used to temporarily store the light intensities for
each channel.</p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/12/1d0863310ac9b5c8a1ee62cfa2fa5735.png" alt="image-20241207134531010" style="zoom:50%;"></p>
<p>Through simple loops, the original images were first processed with a
<code>mask</code> to extract the subject and avoid the influence of the
background. Then, for each RGB channel, the given
<code>light_intensity</code> was used to divide the original image,
retrieving the true light intensity <code>I</code> for each channel.</p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/12/12820516d1dd2c93dc4760f293d792fc.png" alt="image-20241207134953399" style="zoom:50%;"></p>
<p>Then, for each pixel, the light intensities of all the images were
sorted, and the brightest and darkest pixels of the given percentage
were discarded, storing the results in <code>I_col_filtered</code>.
Based on the formula <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.489ex;" xmlns="http://www.w3.org/2000/svg" width="8.993ex" height="3.704ex" role="img" focusable="false" viewBox="0 -1421 3975 1637"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mo" transform="translate(781.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(1837.6,0)"><path data-c="1D70C" d="M58 -216Q25 -216 23 -186Q23 -176 73 26T127 234Q143 289 182 341Q252 427 341 441Q343 441 349 441T359 442Q432 442 471 394T510 276Q510 219 486 165T425 74T345 13T266 -10H255H248Q197 -10 165 35L160 41L133 -71Q108 -168 104 -181T92 -202Q76 -216 58 -216ZM424 322Q424 359 407 382T357 405Q322 405 287 376T231 300Q217 269 193 170L176 102Q193 26 260 26Q298 26 334 62Q367 92 389 158T418 266T424 322Z"></path></g><g data-mml-node="mover" transform="translate(2354.6,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(300,558) translate(-500 0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g><g data-mml-node="mo" transform="translate(3176.8,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mover" transform="translate(3677,0)"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(232.3,810) translate(-500 0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g></g></g></svg></mjx-container></span>,
we can first compute <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.489ex;" xmlns="http://www.w3.org/2000/svg" width="1.17ex" height="1.489ex" role="img" focusable="false" viewBox="0 -442 517 658"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D70C" d="M58 -216Q25 -216 23 -186Q23 -176 73 26T127 234Q143 289 182 341Q252 427 341 441Q343 441 349 441T359 442Q432 442 471 394T510 276Q510 219 486 165T425 74T345 13T266 -10H255H248Q197 -10 165 35L160 41L133 -71Q108 -168 104 -181T92 -202Q76 -216 58 -216ZM424 322Q424 359 407 382T357 405Q322 405 287 376T231 300Q217 269 193 170L176 102Q193 26 260 26Q298 26 334 62Q367 92 389 158T418 266T424 322Z"></path></g></g></g></svg></mjx-container></span> by using
the least squares method on the filtered light directions
<code>s_filtered</code> and light intensities
<code>I_col_filtered</code>. The norm of the result gives the albedo
value, and dividing the result by the albedo gives the unit normal
vector.</p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/12/20fdbf89aed0546975b7f8d49893a762.png" alt="image-20241207140409970" style="zoom:50%;"></p>
<p>With this information, re-rendering becomes straightforward. Simply
traverse the pixels and apply the Lambertian model formula for each
pixel. Since the assignment did not require the RGB components of the
incident light, I assumed them to be 1 by default.</p>
<p>Thus, the main function for Photometric Stereo is complete. Below are
some small modifications to the Baseline:</p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/12/0ace3623602bd317629dd0b1f47f7056.png" alt="image-20241207140539892" style="zoom:50%;"></p>
<p>The function call now includes the modified inputs and outputs. The
shadow and highlight removal percentage is set to 20, meaning the
darkest 20% and the brightest 20% pixels are discarded. To make the
final re-rendered image more visually appealing, it is also
normalized.</p>
<p>Here is the full code for Photometric Stereo (expand to view):</p>
<p>(On my GitHub repository <a class="link" href="https://github.com/FelixChristian011226/ComputerVision/tree/main/Homework%201">ComputerVision/Homework
1<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> you can also find the code)</p>
<details class="orange" data-header-exclude=""><summary><i class="fa-solid fa-chevron-right"></i>Folding Click to view more </summary>
              <div class="content">
              <div class="code-container" data-rel="Matlab"><figure class="iseeu highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[N, albedo, re_rendered_img]</span> = <span class="title">L2_PMS</span><span class="params">(data, m, shadow_removal_percentage)</span></span></span><br><span class="line"></span><br><span class="line">    num_images = <span class="built_in">size</span>(data.s, <span class="number">1</span>);</span><br><span class="line">    [height, width, ~] = <span class="built_in">size</span>(data.imgs{<span class="number">1</span>});</span><br><span class="line">    </span><br><span class="line">    N = <span class="built_in">zeros</span>(height, width, <span class="number">3</span>);</span><br><span class="line">    albedo = <span class="built_in">zeros</span>(height, width, <span class="number">3</span>);</span><br><span class="line">    re_rendered_img = <span class="built_in">zeros</span>(height, width, <span class="number">3</span>);</span><br><span class="line">    I = <span class="built_in">zeros</span>(num_images, <span class="built_in">length</span>(m), <span class="number">3</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">% Extract pixel intensities for each image</span></span><br><span class="line">    <span class="keyword">for</span> c = <span class="number">1</span>:<span class="number">3</span></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:num_images</span><br><span class="line">            img = double(data.imgs{<span class="built_in">i</span>});</span><br><span class="line">            img = img(m);</span><br><span class="line">            img = img / data.L(<span class="built_in">i</span>, c);</span><br><span class="line">            I(<span class="built_in">i</span>, :, c) = img;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> c = <span class="number">1</span>:<span class="number">3</span></span><br><span class="line">    <span class="comment">% Remove shadows and highlights, compute normals and albedo</span></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">length</span>(m)</span><br><span class="line">            I_col = I(:, <span class="built_in">i</span>, c);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">% Sort intensities and remove shadows/highlights</span></span><br><span class="line">            [sorted_I, idx] = <span class="built_in">sort</span>(I_col);</span><br><span class="line">            num_to_remove = <span class="built_in">round</span>(<span class="built_in">length</span>(sorted_I) * shadow_removal_percentage / <span class="number">100</span>);</span><br><span class="line">            valid_idx = idx(num_to_remove+<span class="number">1</span>:<span class="keyword">end</span>-num_to_remove);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">% Filter light source directions and intensities</span></span><br><span class="line">            s_filtered = data.s(valid_idx, :);</span><br><span class="line">            I_col_filtered = sorted_I(num_to_remove+<span class="number">1</span>:<span class="keyword">end</span>-num_to_remove);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">% Solve for normal and albedo</span></span><br><span class="line">            A = s_filtered \ I_col_filtered;</span><br><span class="line">            albedo_val = norm(A);</span><br><span class="line"></span><br><span class="line">            norm_A = A / albedo_val;</span><br><span class="line">            [row, col] = <span class="built_in">ind2sub</span>([height, width], m(<span class="built_in">i</span>));</span><br><span class="line">            N(row, col, :) = norm_A';</span><br><span class="line">            albedo(row, col, c) = albedo_val;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="comment">% Re-render the image using recovered normals and albedo</span></span><br><span class="line">    viewing_direction = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> c = <span class="number">1</span>:<span class="number">3</span></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:height</span><br><span class="line">            <span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span>:width</span><br><span class="line">                normal = <span class="built_in">squeeze</span>(N(<span class="built_in">i</span>, <span class="built_in">j</span>, :));</span><br><span class="line">                <span class="keyword">if</span> norm(normal) &gt; <span class="number">0</span></span><br><span class="line">                    re_rendered_img(<span class="built_in">i</span>, <span class="built_in">j</span>, c) = <span class="built_in">max</span>(<span class="number">0</span>, <span class="built_in">dot</span>(normal, viewing_direction)) * albedo(<span class="built_in">i</span>, <span class="built_in">j</span>, c);</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure></div>
              </div>
            </details>
<h2 id="experiment-results">4. Experiment Results</h2>
<table>
<colgroup>
<col style="width: 3%">
<col style="width: 32%">
<col style="width: 32%">
<col style="width: 32%">
</colgroup>
<thead>
<tr>
<th></th>
<th>Normal Map</th>
<th>Albedo Map</th>
<th>Re-rendered Picture</th>
</tr>
</thead>
<tbody>
<tr>
<td>bear</td>
<td><img lazyload="" src="/images/loading.svg" data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/12/5ae7f5df5e480e32313eeadfc218a1ec.png" alt="bearPNG_Normal"></td>
<td><img lazyload="" src="/images/loading.svg" data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/12/11126f4fba79a877396cbb649b85eae2.png" alt="bearPNG_Albedo"></td>
<td><img lazyload="" src="/images/loading.svg" data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/12/b1e038833411195869dccfc94e9311c9.png" alt="bearPNG_ReRendered"></td>
</tr>
<tr>
<td>buddha</td>
<td><img lazyload="" src="/images/loading.svg" data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/12/77db0ed558a8954d54ed24bd548b61ec.png" alt="buddhaPNG_Normal"></td>
<td><img lazyload="" src="/images/loading.svg" data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/12/624f4c0c73b765a0b7725128394ead80.png" alt="buddhaPNG_Albedo"></td>
<td><img lazyload="" src="/images/loading.svg" data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/12/551786fccd59bfbe22ee559df3473d6d.png" alt="buddhaPNG_ReRendered"></td>
</tr>
<tr>
<td>cat</td>
<td><img lazyload="" src="/images/loading.svg" data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/12/1ca2781d392d4258eee056952fa7ac6e.png" alt="catPNG_Normal"></td>
<td><img lazyload="" src="/images/loading.svg" data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/12/63a725360b18d28c825f364ab06f1c4f.png" alt="catPNG_Albedo"></td>
<td><img lazyload="" src="/images/loading.svg" data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/12/e897663e32bde8e338e11397699d2ed1.png" alt="catPNG_ReRendered"></td>
</tr>
<tr>
<td>pot</td>
<td><img lazyload="" src="/images/loading.svg" data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/12/198d54d72124b26b50beea61be1a33a2.png" alt="potPNG_Normal"></td>
<td><img lazyload="" src="/images/loading.svg" data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/12/a6ed46b80000be1e8402a751e14fdbe4.png" alt="potPNG_Albedo"></td>
<td><img lazyload="" src="/images/loading.svg" data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/12/4bf4ac3fb69d12f957b4f42600ebb596.png" alt="potPNG_ReRendered"></td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Graduate Course</category>
        <category>Computer Vision</category>
      </categories>
      <tags>
        <tag>Photometric Stereo</tag>
      </tags>
  </entry>
  <entry>
    <title>Scene Recognition with Bag of Words</title>
    <url>/2025/01/09/14-SceneRecognition/</url>
    <content><![CDATA[<h2 id="setting">1. Setting</h2>
<h3 id="objective">1.1 Objective</h3>
<blockquote>
<p>The goal of this project is to give you a basic introduction to image
recognition. Specifically, we will examine the task of scene recognition
starting with a very simple method, e.g., tiny images and nearest
neighbor classification, and then move on to bags of quantized local
features.</p>
</blockquote>
<p>The dataset consists of images from 15 different categories. Each
category contains multiple images, and the task is to classify these
images into their respective categories.</p>
<h3 id="environment">1.2 Environment</h3>
<ul>
<li><strong>OS</strong>: Linux (Ubuntu 22.04)</li>
<li><strong>Lib</strong>: Python 3, scikit-learn, OpenCV, NumPy.</li>
</ul>
<h2 id="algorithm">2. Algorithm</h2>
<h3 id="tiny-image-knn">2.1 Tiny Image + KNN</h3>
<p>The <strong>Tiny Image + KNN</strong> method works by resizing images
to a small fixed size and flattening the pixel values into a vector.
This vector is used as a feature representation for the image, which is
then classified using the k-Nearest Neighbors algorithm.</p>
<ul>
<li><strong>Steps</strong>:
<ol type="1">
<li>Resize the images to a smaller size (e.g., 32x32 pixels).<br />
</li>
<li>Flatten the resized image into a 1D vector of pixel
intensities.<br />
</li>
<li>Use KNN to classify the image based on the distance between feature
vectors.</li>
</ol></li>
</ul>
<p>This method is simple but may not capture high-level patterns or
features in the image, as it relies purely on raw pixel intensities.</p>
<h3 id="bag-of-sift-knn">2.2 Bag of SIFT + KNN</h3>
<p>The <strong>Bag of SIFT + KNN</strong> method involves several key
steps:</p>
<ol type="1">
<li><strong>SIFT Feature Extraction</strong>: Key points are detected in
each image, and descriptors are computed for those key points.</li>
<li><strong>Clustering</strong>: SIFT descriptors are clustered into a
predefined number of clusters (vocabulary size).</li>
<li><strong>Feature Representation</strong>: Each image is represented
by a histogram of the number of occurrences of each visual word (cluster
center).</li>
<li><strong>KNN Classification</strong>: The image's histogram is
compared to the histograms of training images, and the class with the
most neighbors is assigned to the image.</li>
</ol>
<p>In my code, SIFT features are extracted and clustered into visual
words using k-means clustering. The resulting vocabulary size is tested
with different numbers of clusters (10, 30, 50, 70, 100).</p>
<h2 id="experiments">3. Experiments</h2>
<h3 id="results">3.1 Results</h3>
<p>The following table summarizes the classification accuracy for both
the <strong>Tiny Image + KNN</strong> method and the <strong>Bag of SIFT
+ KNN</strong> method with different visual vocabulary sizes.</p>
<table>
<thead>
<tr>
<th><strong>Method</strong></th>
<th><strong>Vocabulary Size</strong></th>
<th><strong>Average Accuracy</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Tiny Image + KNN</strong></td>
<td>N/A</td>
<td>0.2236</td>
</tr>
<tr>
<td><strong>Bag of SIFT + KNN</strong></td>
<td>10</td>
<td>0.2624</td>
</tr>
<tr>
<td><strong>Bag of SIFT + KNN</strong></td>
<td>30</td>
<td>0.3354</td>
</tr>
<tr>
<td><strong>Bag of SIFT + KNN</strong></td>
<td>50</td>
<td>0.3550</td>
</tr>
<tr>
<td><strong>Bag of SIFT + KNN</strong></td>
<td>70</td>
<td>0.3568</td>
</tr>
<tr>
<td><strong>Bag of SIFT + KNN</strong></td>
<td>100</td>
<td>0.3578</td>
</tr>
</tbody>
</table>
<h3 id="accuracy-details">3.2 Accuracy Details</h3>
<p>Here are the detailed accuracy results for each category in the
dataset.</p>
<h4 id="tiny-image-knn-results">Tiny Image + KNN Results</h4>
<table>
<thead>
<tr>
<th><strong>Category</strong></th>
<th><strong>Accuracy</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>coast</td>
<td>0.4154</td>
</tr>
<tr>
<td>forest</td>
<td>0.1053</td>
</tr>
<tr>
<td>highway</td>
<td>0.5375</td>
</tr>
<tr>
<td>insidecity</td>
<td>0.0673</td>
</tr>
<tr>
<td>mountain</td>
<td>0.1606</td>
</tr>
<tr>
<td>office</td>
<td>0.1826</td>
</tr>
<tr>
<td>opencountry</td>
<td>0.3581</td>
</tr>
<tr>
<td>street</td>
<td>0.5000</td>
</tr>
<tr>
<td>suburb</td>
<td>0.3546</td>
</tr>
<tr>
<td>tallbuilding</td>
<td>0.1719</td>
</tr>
<tr>
<td>bedroom</td>
<td>0.1638</td>
</tr>
<tr>
<td>industrial</td>
<td>0.0900</td>
</tr>
<tr>
<td>kitchen</td>
<td>0.0818</td>
</tr>
<tr>
<td>livingroom</td>
<td>0.1376</td>
</tr>
<tr>
<td>store</td>
<td>0.0279</td>
</tr>
</tbody>
</table>
<h4 id="bag-of-sift-knn-results-different-vocabulary-sizes">Bag of SIFT
+ KNN Results (Different Vocabulary Sizes)</h4>
<table>
<colgroup>
<col style="width: 9%" />
<col style="width: 18%" />
<col style="width: 18%" />
<col style="width: 18%" />
<col style="width: 18%" />
<col style="width: 18%" />
</colgroup>
<thead>
<tr>
<th><strong>Category</strong></th>
<th><strong>Vocabulary Size = 10</strong></th>
<th><strong>Vocabulary Size = 30</strong></th>
<th><strong>Vocabulary Size = 50</strong></th>
<th><strong>Vocabulary Size = 70</strong></th>
<th><strong>Vocabulary Size = 100</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>coast</td>
<td>0.3308</td>
<td>0.3423</td>
<td>0.3846</td>
<td>0.3769</td>
<td>0.3654</td>
</tr>
<tr>
<td>forest</td>
<td>0.7237</td>
<td>0.7763</td>
<td>0.8289</td>
<td>0.8377</td>
<td>0.8026</td>
</tr>
<tr>
<td>highway</td>
<td>0.1938</td>
<td>0.2812</td>
<td>0.2938</td>
<td>0.3125</td>
<td>0.3375</td>
</tr>
<tr>
<td>insidecity</td>
<td>0.1394</td>
<td>0.2452</td>
<td>0.2788</td>
<td>0.3029</td>
<td>0.2740</td>
</tr>
<tr>
<td>mountain</td>
<td>0.2080</td>
<td>0.3723</td>
<td>0.4562</td>
<td>0.4051</td>
<td>0.4307</td>
</tr>
<tr>
<td>office</td>
<td>0.2696</td>
<td>0.2174</td>
<td>0.3304</td>
<td>0.3478</td>
<td>0.3130</td>
</tr>
<tr>
<td>opencountry</td>
<td>0.1871</td>
<td>0.2516</td>
<td>0.1839</td>
<td>0.2290</td>
<td>0.1935</td>
</tr>
<tr>
<td>street</td>
<td>0.2812</td>
<td>0.3229</td>
<td>0.3073</td>
<td>0.2812</td>
<td>0.2448</td>
</tr>
<tr>
<td>suburb</td>
<td>0.5106</td>
<td>0.7021</td>
<td>0.7730</td>
<td>0.7376</td>
<td>0.8014</td>
</tr>
<tr>
<td>tallbuilding</td>
<td>0.1758</td>
<td>0.2852</td>
<td>0.3086</td>
<td>0.3242</td>
<td>0.3438</td>
</tr>
<tr>
<td>bedroom</td>
<td>0.1379</td>
<td>0.2241</td>
<td>0.1121</td>
<td>0.1638</td>
<td>0.1466</td>
</tr>
<tr>
<td>industrial</td>
<td>0.1090</td>
<td>0.1611</td>
<td>0.1801</td>
<td>0.2370</td>
<td>0.1848</td>
</tr>
<tr>
<td>kitchen</td>
<td>0.1455</td>
<td>0.2091</td>
<td>0.1636</td>
<td>0.1182</td>
<td>0.1818</td>
</tr>
<tr>
<td>livingroom</td>
<td>0.2487</td>
<td>0.2963</td>
<td>0.2487</td>
<td>0.2275</td>
<td>0.2487</td>
</tr>
<tr>
<td>store</td>
<td>0.2744</td>
<td>0.3442</td>
<td>0.4744</td>
<td>0.4512</td>
<td>0.4977</td>
</tr>
</tbody>
</table>
<h2 id="conclusion">4. Conclusion</h2>
<ul>
<li>The <strong>Tiny Image + KNN</strong> method results in lower
accuracy (0.2236 on average) because it relies solely on raw pixel
values, which do not capture the complex features and patterns of the
images effectively.</li>
<li><strong>Bag of SIFT + KNN</strong> performs much better, with the
accuracy improving as the vocabulary size increases. The highest
accuracy was obtained with a vocabulary size of 100, yielding an average
accuracy of 0.3578.</li>
<li><strong>Increasing the visual vocabulary size</strong> improves the
model’s ability to classify images by capturing more detailed and
distinct features from the SIFT descriptors.</li>
</ul>
<p>In conclusion, <strong>Bag of SIFT + KNN</strong> is a more effective
method for image classification compared to <strong>Tiny Image +
KNN</strong>, especially when a larger vocabulary is used.</p>
]]></content>
      <categories>
        <category>Graduate Course</category>
        <category>Computer Vision</category>
      </categories>
      <tags>
        <tag>Scene Recognition</tag>
      </tags>
  </entry>
  <entry>
    <title>Panorama Stitching</title>
    <url>/2024/12/28/13-PanoramaStitching/</url>
    <content><![CDATA[<h2 id="setting">Setting</h2>
<blockquote>
<p>If the camera center is fixed, or if the scene is planar, different
images of the same scene are related by a homography. In this project,
you will implement an algorithm to calculate the homography between two
images. Several images of each scene will be provided. Your program
should generate image mosaics according to these estimated
homographies.</p>
</blockquote>
<p>To accomplish panorama stitching, the following pipeline is commonly
used:</p>
<ol type="1">
<li>Feature detection.</li>
<li>Feature matching.</li>
<li>Homography estimation.</li>
<li>Panorama stitching.</li>
</ol>
<p>The data given has four folders, each including 3-6 photos on
different perspectives. Note that the sequence of the photos are not
concerned to the actual shooting angle.</p>
<h2 id="environment">Environment</h2>
<ul>
<li><strong>OS</strong>: Windows 11 24H2</li>
<li><strong>Lib</strong>: Python 2.7, Opencv 3.4.2.16</li>
</ul>
<h2 id="algorithm">Algorithm</h2>
<h3 id="the-basic-algorithm">1. <strong>The Basic
Algorithm</strong></h3>
<h4 id="feature-detection-descriptor-and-matching"><strong>1.1 Feature
Detection, Descriptor, and Matching</strong></h4>
<p>The first step in panorama stitching is identifying common features
between pairs of images. These features allow us to align the images
correctly. The code uses the <code>Matchers</code> class to perform this
step, which utilizes the <strong>SURF (Speeded-Up Robust
Features)</strong> algorithm and <strong>FLANN-based
matching</strong>.</p>
<p><strong>Feature Detection and Descriptor Computation: </strong></p>
<ul>
<li><p><strong>SURF</strong> is used to detect distinctive keypoints in
each image and compute descriptors. Keypoints are regions in the image
that are easily identifiable and remain consistent across different
views of the scene (such as corners, edges, or blobs). The descriptors
are mathematical representations of the keypoints that allow for
comparison between images.</p>
<p>In the <code>Matchers</code> class, the method
<code>_get_features(image)</code>:</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">keypoints, descriptors = <span class="variable language_">self</span>.surf.detectAndCompute(gray, <span class="literal">None</span>)</span><br></pre></td></tr></table></figure></div>
<p>converts the image to grayscale, detects keypoints, and computes the
descriptors for matching.</p></li>
</ul>
<p><strong>Matching Keypoints: </strong></p>
<p>Once the descriptors are extracted, the <code>match</code> method in
the <code>Matchers</code> class uses the <strong>FLANN (Fast Library for
Approximate Nearest Neighbors)</strong> matcher to find the best matches
between keypoints from two images:</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">matches = <span class="variable language_">self</span>.flann.knnMatch(features2[<span class="string">'des'</span>], features1[<span class="string">'des'</span>], k=<span class="number">2</span>)</span><br></pre></td></tr></table></figure></div>
<p>For each keypoint in <code>image2</code>, the two closest matches are
found in <code>image1</code>. The code then applies the <strong>ratio
test</strong> (Lowe’s ratio test) to filter out poor matches. Only good
matches are retained for the homography calculation:</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">good_matches.append((m.trainIdx, m.queryIdx))</span><br></pre></td></tr></table></figure></div>
<h4 id="homography-estimation"><strong>1.2 Homography
Estimation</strong></h4>
<p>Once keypoints are matched, the next step is to estimate the
<strong>homography matrix</strong>, which represents the transformation
required to align the two images. This transformation is essential to
align the images in the panorama seamlessly.</p>
<p><strong>Homography Calculation: </strong></p>
<p>The <code>match</code> method uses the <strong>RANSAC
algorithm</strong> (Random Sample Consensus) to calculate the homography
matrix. RANSAC helps to eliminate outliers, ensuring that only reliable
matches are used to compute the transformation.</p>
<ul>
<li><p>The keypoints of the matching pairs are converted into
<strong>float32</strong> coordinates:</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">points1 = np.float32([features1[<span class="string">'kp'</span>][i].pt <span class="keyword">for</span> (i, _) <span class="keyword">in</span> good_matches])</span><br><span class="line">points2 = np.float32([features2[<span class="string">'kp'</span>][i].pt <span class="keyword">for</span> (_, i) <span class="keyword">in</span> good_matches])</span><br></pre></td></tr></table></figure></div></li>
<li><p>Then, the <strong>findHomography</strong> function calculates the
homography matrix <code>H</code>:</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">H, _ = cv2.findHomography(points2, points1, cv2.RANSAC, <span class="number">4</span>)</span><br></pre></td></tr></table></figure></div>
<p>The result is the homography matrix <code>H</code>, which defines how
to warp one image to align with the other.</p></li>
</ul>
<p><strong>Homography Score: </strong></p>
<p>The quality of the homography matrix can be assessed by calculating
its norm using the <code>_calculate_homography_score(H)</code>
method:</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> np.linalg.norm(H)</span><br></pre></td></tr></table></figure></div>
<p>A lower norm indicates a better match.</p>
<h4 id="image-stitching"><strong>1.3 Image Stitching</strong></h4>
<p>With the homography matrices in hand, the next step is to
<strong>stitch</strong> the images together to form the final
panorama.</p>
<p><strong>Image Alignment: </strong></p>
<p>The <code>Stitcher</code> class has two main methods to handle the
alignment process: <code>_shift_left</code> and
<code>_shift_right</code>.</p>
<ul>
<li><p><strong>Left-side Image Alignment</strong>
(<code>_shift_left</code>):</p>
<ul>
<li><p>Starting from the center image, images on the left are aligned
one by one by applying their respective homography matrices. The
transformation is applied using <code>cv2.warpPerspective</code>, which
warps the image based on the homography matrix <code>H</code>.</p></li>
<li><p>The code ensures that the resulting image has enough space to
accommodate the newly aligned image by adjusting the size
dynamically.</p></li>
<li><p>Images are gradually merged using pixel-wise blending to avoid
seams.</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">tmp = cv2.warpPerspective(a, xh, dsize)</span><br></pre></td></tr></table></figure></div></li>
</ul></li>
<li><p><strong>Right-side Image Alignment</strong>
(<code>_shift_right</code>):</p>
<ul>
<li>Similarly, images on the right are aligned and stitched into the
panorama. The right images are warped and blended into the final
stitched image.</li>
</ul></li>
</ul>
<p><strong>Blending Images: </strong></p>
<p>To avoid visible seams between adjacent images, the
<code>_blend_images</code> method is used to combine the images
smoothly. It creates a weighted average of pixel values at overlapping
regions:</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">blended_image[y, x] = (</span><br><span class="line">    blended_image[y, x].astype(np.float32) * <span class="number">0.5</span> +</span><br><span class="line">    warped_image[y, x].astype(np.float32) * <span class="number">0.5</span></span><br><span class="line">).astype(np.uint8)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>This ensures that the final panorama looks seamless, with no visible
boundaries between the images.</p>
<p><strong>Final Panorama Creation: </strong></p>
<p>Once all images are aligned and blended, the final panorama is
created, starting from the center image and progressively stitching
images on the left and right. The <code>stitch()</code> method returns
the final stitched image:</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="variable language_">self</span>.left_image</span><br></pre></td></tr></table></figure></div>
<h3 id="comparison-of-different-feature-descriptors">2. Comparison of
different feature descriptors</h3>
<p><strong>Descriptor Extraction</strong>:</p>
<ul>
<li><strong>SIFT</strong>: Extracts scale-invariant keypoints and
computes descriptors based on local image gradients
(<code>sift_descriptor</code> function).</li>
<li><strong>Pixel-based</strong>: Detects keypoints using corner
detection and creates descriptors from pixel values in local patches
(<code>pixel_descriptor</code> function).</li>
</ul>
<p><strong>Descriptor Matching</strong>: The
<code>match_descriptors</code> function uses FLANN-based matching to
find potential matches between the descriptors of the two images.</p>
<p><strong>Homography Estimation with RANSAC</strong>: The
<code>estimate_homography</code> function uses RANSAC to estimate a
transformation between the images and counts inliers (correct matches).
RANSAC is run multiple times, and the best transformation is chosen
based on the number of inliers.</p>
<p><strong>RANSAC Iterations Calculation</strong>: The
<code>calculate_ransac_iterations</code> function computes how many
iterations are needed to achieve a specified success probability based
on the inlier ratio.</p>
<p><strong>Performance Evaluation</strong>: The
<code>compare_descriptors</code> function compares the two descriptors
by calculating the inlier ratio and required RANSAC iterations. It
visualizes matches and evaluates the descriptors' performance using
RANSAC on a set of random matches.</p>
<h2 id="experiments">Experiments</h2>
<h3 id="image-stitching-1">1. Image Stitching</h3>
<table>
<colgroup>
<col style="width: 10%">
<col style="width: 89%">
</colgroup>
<thead>
<tr>
<th>dataset</th>
<th>result</th>
</tr>
</thead>
<tbody>
<tr>
<td>data1</td>
<td><img lazyload="" src="/images/loading.svg" data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/12/69b956eeaece3c7b1e297d10b60488d0.png" alt="image-20241228170443608" style="zoom:80%;"></td>
</tr>
<tr>
<td>data2</td>
<td><img lazyload="" src="/images/loading.svg" data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/12/f1ca6d9cbe1ae32a36616313fc6fefa3.png" alt="image-20241228170525920" style="zoom:80%;"></td>
</tr>
<tr>
<td>data3</td>
<td><img lazyload="" src="/images/loading.svg" data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/12/a492fcffd28bd21961f13f26384d40c8.png" alt="image-20241228170554228" style="zoom:80%;"></td>
</tr>
<tr>
<td>data4</td>
<td><img lazyload="" src="/images/loading.svg" data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/12/c59a9cf5500a77a58a3123b8699a46e2.png" alt="image-20241228170622877" style="zoom:80%;"></td>
</tr>
</tbody>
</table>
<p>Though my algorithm accomplishes panorama stitching, there is
obviously a way to improve. My result shows that the stitchings are
starting with the picture on the edge, but it's proper to start from the
middle. Though I've set the picture which has the most matching with
other pics as the base picture, it turns out to be the the most marginal
one. It's confusing. Anyway, the result is sufficent, at least a lot
better than the code I first wrote.</p>
<h3 id="comparison-of-feature-descriptors">2. Comparison of feature
descriptors</h3>
<p>This is a matching result (taking <code>data4/IMG_7357.JPG</code> and
<code>data4/IMG_7358.JPG</code> as example):</p>
<table>
<colgroup>
<col style="width: 14%">
<col style="width: 85%">
</colgroup>
<thead>
<tr>
<th>descriptor</th>
<th>matching result</th>
</tr>
</thead>
<tbody>
<tr>
<td>SIFT</td>
<td><img lazyload="" src="/images/loading.svg" data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/12/d4d985b6733d84d83858fef515cc6f5e.png" alt="image-20241228172608585" style="zoom:80%;"></td>
</tr>
<tr>
<td>Pixel</td>
<td><img lazyload="" src="/images/loading.svg" data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2024/12/2acb26bb2cecf2a08b4c6fc8ccdd97a5.png" alt="image-20241228172631287" style="zoom:80%;"></td>
</tr>
</tbody>
</table>
<p>This is the summarizing table:</p>
<table>
<colgroup>
<col style="width: 36%">
<col style="width: 13%">
<col style="width: 14%">
<col style="width: 17%">
<col style="width: 18%">
</colgroup>
<thead>
<tr>
<th>dataset</th>
<th>iteration (SIFT)</th>
<th>iteration (Pixel)</th>
<th>average ratio (SIFT)</th>
<th>average ratio (Pixel)</th>
</tr>
</thead>
<tbody>
<tr>
<td>data1/112_1298.JPG<br>data1/112_1299.JPG</td>
<td>24</td>
<td>26</td>
<td>0.41</td>
<td>0.40</td>
</tr>
<tr>
<td>data2/IMG_0488.JPG<br>data2/IMG_0489.JPG</td>
<td>22</td>
<td>26</td>
<td>0.42</td>
<td>0.40</td>
</tr>
<tr>
<td>data3/IMG_0675<br>data3/IMG_0676</td>
<td>25</td>
<td>25</td>
<td>0.40</td>
<td>0.40</td>
</tr>
<tr>
<td>data4/IMG_7357<br>data4/IMG_7358</td>
<td>23</td>
<td>26</td>
<td>0.41</td>
<td>0.40</td>
</tr>
</tbody>
</table>
<p>It shows that SIFT descriptor contributes to less iterations and
better average inlier ratio.</p>
]]></content>
      <categories>
        <category>Graduate Course</category>
        <category>Computer Vision</category>
      </categories>
      <tags>
        <tag>Panorama Stitching</tag>
      </tags>
  </entry>
  <entry>
    <title>Genesis分析</title>
    <url>/2025/01/11/15-GenesisAnalysis/</url>
    <content><![CDATA[<h2 id="taichi">Taichi</h2>
<h3 id="ti.func-ti.kernel"><span class="citation"
data-cites="ti.func">@ti.func</span> &amp; <span class="citation"
data-cites="ti.kernel">@ti.kernel</span></h3>
<blockquote>
<p>When writing compute-intensive tasks, users can leverage Taichi's
high performance computation by following a set of extra rules, and
making use of the two decorators <code>@ti.func</code> and
<code>@ti.kernel</code>. These decorators instruct Taichi to take over
the computation tasks and compile the decorated functions to machine
code using its just-in-time (JIT) compiler. As a result, calls to these
functions are executed on multi-core CPUs or GPUs and can achieve
acceleration by 50x~100x compared to native Python code.</p>
<p>在编写计算密集型任务时，用户可以通过遵循一组额外规则并使用两个装饰器
<code>@ti.func</code> 和 <code>@ti.kernel</code> 来利用 Taichi
的高性能计算。这些装饰器指示 Taichi 接管计算任务，并使用其即时 (JIT)
编译器将装饰函数编译为机器代码。因此，对这些函数的调用在多核 CPU 或 GPU
上执行，与原生 Python 代码相比，可以实现 50 倍~100 倍的加速。</p>
</blockquote>
<p><strong><span class="citation"
data-cites="ti.kernel">@ti.kernel</span>:</strong> 用
<code>@ti.kernel</code> 修饰的函数称为 Taichi
内核或简称为内核。这些函数是Taichi运行时接管任务的入口点，它们必须由Python代码直接调用。您可以使用原生
Python
来准备任务，例如从磁盘读取数据和预处理，然后调用内核将计算密集型任务卸载到
Taichi。</p>
<p><strong><span class="citation"
data-cites="ti.func">@ti.func</span></strong>: 用 <code>@ti.func</code>
修饰的函数称为 Taichi 函数。这些函数是内核的构建块，只能由另一个 Taichi
函数或内核调用。与普通的 Python 函数一样，您可以将任务划分为多个 Taichi
函数，以增强可读性并在不同的内核中重用它们。</p>
<p><strong>Notes</strong>:</p>
<ul>
<li>Taichi
要求内核的参数和返回值进行类型提示，除非它既没有参数也没有返回语句。</li>
<li>内核或 Taichi 函数内的代码是 Taichi 范围的一部分。 Taichi
的运行时在多核 CPU 或 GPU 设备上并行编译和执行该代码，以实现高性能计算。
Taichi 作用域相当于 CUDA 的设备端。</li>
<li>Taichi 范围之外的代码属于 Python
范围。这段代码是用原生Python编写的，并由Python的虚拟机执行，而不是由Taichi的运行时执行。
Python 作用域相当于 CUDA 的主机端。</li>
</ul>
<h4 id="kernel-notes">Kernel Notes</h4>
<ul>
<li>一个内核可以接受多个参数。但是，请务必注意，您不能将任意 Python
对象传递给内核。这是因为 Python 对象可以是动态的，并且可能包含 Taichi
编译器无法识别的数据。</li>
<li>标量、 <code>ti.types.matrix()</code> 、
<code>ti.types.vector()</code> 和 <code>ti.types.struct()</code>
按值传递，这意味着内核收到参数的副本。但是，
<code>ti.types.ndarray()</code> 和 <code>ti.template()</code>
是通过引用传递的，这意味着对内核内部参数所做的任何更改也会影响原始值。</li>
<li>您可以使用 <code>ti.types.ndarray()</code> 作为类型提示，将
<code>ndarray</code> 从 NumPy 或 <code>tensor</code> 从 PyTorch
传递到内核。 Taichi
可以识别这些数据结构的形状和数据类型，这使您可以在内核中访问它们的属性。</li>
<li>最多允许有一个返回值，该返回值可以是标量、
<code>ti.types.matrix()</code> 或 <code>ti.types.vector()</code>
。此外，在基于 LLVM 的后端（CPU 和 CUDA 后端）中，返回值也可以是
<code>ti.types.struct()</code> 。</li>
<li>全局变量视为编译时常量。这意味着它在编译时获取全局变量的当前值，并且之后不会跟踪它们的更改。</li>
</ul>
<h4 id="func-notes">Func Notes:</h4>
<ul>
<li>所有的 Taichi 函数都被强制内联 -&gt; 不允许运行时递归。</li>
<li>Taichi 函数可以接受多个参数，其中可能包括标量、
<code>ti.types.matrix()</code> 、 <code>ti.types.vector()</code> 、
<code>ti.types.struct()</code> 、 <code>ti.types.ndarray()</code> 、
<code>ti.field()</code> 类型。</li>
<li>可以有多个返回值。</li>
</ul>
<h4 id="comparison">Comparison</h4>
<table>
<colgroup>
<col style="width: 18%" />
<col style="width: 40%" />
<col style="width: 40%" />
</colgroup>
<thead>
<tr>
<th></th>
<th>kernel</th>
<th>func</th>
</tr>
</thead>
<tbody>
<tr>
<td>调用范围</td>
<td>Python 作用域</td>
<td>Taichi 作用域</td>
</tr>
<tr>
<td>参数的类型提示</td>
<td>必需</td>
<td>推荐</td>
</tr>
<tr>
<td>返回值的类型提示</td>
<td>必需</td>
<td>推荐</td>
</tr>
<tr>
<td>返回类型</td>
<td>标量<br /><code>ti.types.matrix()</code><br /><code>ti.types.vector()</code><br /><code>ti.types.struct()</code>(Only
on LLVM-based backends)</td>
<td>标量<br /><code>ti.types.matrix()</code><br /><code>ti.types.vector()</code><br /><code>ti.types.struct()</code><br />...</td>
</tr>
<tr>
<td>参数中元素数量上限</td>
<td>32（适用于 OpenGL）64（适用于其他后端）</td>
<td>无限制</td>
</tr>
<tr>
<td>return 语句中返回值数量上限</td>
<td>1</td>
<td>无限</td>
</tr>
</tbody>
</table>
<h3 id="ti.dataclass"><span class="citation"
data-cites="ti.dataclass">@ti.dataclass</span></h3>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ti.dataclassclass </span></span><br><span class="line">	Sphere:</span><br><span class="line">    	center: vec3    </span><br><span class="line">    	radius: <span class="built_in">float</span></span><br></pre></td></tr></table></figure></div>
<h3 id="field">Field</h3>
<p>Taichi field 是<strong>全局</strong>数据容器，从 Python 作用域或
Taichi 作用域均能访问。</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">f_2d = ti.field(<span class="built_in">int</span>, shape=(<span class="number">3</span>, <span class="number">6</span>))  <span class="comment"># A 2D field in the shape (3, 6)</span></span><br></pre></td></tr></table></figure></div>
<ul>
<li><p><strong>Scalar field</strong>: 存储的是标量，是最基本的
field。</p>
<ul>
<li><p>一个0D 的标量 field 是单个标量。</p></li>
<li><p>一个一维标量 field 是由标量组成的一个一维数组。</p></li>
<li><p>一个二维标量 field
是由标量组成的一个二维数组，以此类推。</p></li>
</ul></li>
</ul>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Declares a 3x3 vector field comprising 2D vectors</span></span><br><span class="line">f = ti.Vector.field(n=<span class="number">2</span>, dtype=<span class="built_in">float</span>, shape=(<span class="number">3</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Vector field</strong>:
每个元素都是<code>N</code>维向量的向量场。</li>
</ul>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Declares a 300x400x500 matrix field, each of its elements being a 3x2 matrix</span></span><br><span class="line">tensor_field = ti.Matrix.field(n=<span class="number">3</span>, m=<span class="number">2</span>, dtype=ti.f32, shape=(<span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>))</span><br></pre></td></tr></table></figure></div>
<ul>
<li><p><strong>Matrix field</strong>: 每个元素都是矩阵。</p>
<ul>
<li><p>矩阵运算在编译时展开。</p></li>
<li><p>在较大的矩阵（例如<code>32x128</code>
）上运行可能会导致编译时间更长且性能较差。</p></li>
</ul></li>
</ul>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Declares a 1D struct field using the ti.Struct.field() method</span></span><br><span class="line">n = <span class="number">10</span></span><br><span class="line">particle_field = ti.Struct.field(&#123;    </span><br><span class="line">    <span class="string">&quot;pos&quot;</span>: ti.math.vec3,    </span><br><span class="line">    <span class="string">&quot;vel&quot;</span>: ti.math.vec3,    </span><br><span class="line">    <span class="string">&quot;acc&quot;</span>: ti.math.vec3,    </span><br><span class="line">    <span class="string">&quot;mass&quot;</span>: <span class="built_in">float</span>,  </span><br><span class="line">&#125;, shape=(n,))</span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Struct field</strong>: 存储用户自定义的结构体。</li>
</ul>
<p>Taichi 编译器能够自动推断底层的数据布局并应用合适的数据读取顺序。
这是 Taichi 编程语言相较其他大多数通用编程语言的一大优势。</p>
<h3 id="ndarray">Ndarray</h3>
<ul>
<li><code>ndarray</code>
总是分配一个连续的内存块，以允许与外部库进行直接的数据交换。</li>
<li>与 <code>field</code> 一样，ndarray 只能在 Python
作用域中构造，而不能在 Taichi 作用域中构造。也就是说，不能在 Taichi
内核或函数内部构造 ndarray。</li>
<li>当标量类型的 NumPy ndarray 或 PyTorch 张量作为参数传递给 Taichi
内核时，它可以被解释为标量类型数组、向量类型数组或矩阵类型数组。这是由类型提示<code>ti.types.ndarray()</code>中的<code>dtype</code>和<code>ndim</code>选项控制的。</li>
</ul>
<h2 id="genesis">Genesis</h2>
<h3 id="rigid-solver">Rigid Solver</h3>
<h4 id="init">Init</h4>
<p><strong>作用</strong>：初始化求解器对象，设置其初始状态和配置信息。</p>
<p><strong>功能</strong>：</p>
<ol type="1">
<li>调用基类 <code>Solver</code> 的初始化。</li>
<li>根据 <code>options</code> 配置求解器行为：
<ul>
<li>是否启用碰撞检测、关节限制、自碰撞。</li>
<li>最大碰撞对数量。</li>
<li>动力学积分器类型。</li>
<li>是否启用休眠优化（hibernation）。</li>
</ul></li>
<li>初始化内部变量，如当前步数
<code>_cur_step</code>，以及存储实体的列表 <code>_entities</code>。</li>
</ol>
<h4 id="add-entity">Add Entity</h4>
<p><strong>作用</strong>：添加一个物理实体（如刚体、机器人、无人机等）到求解器中。</p>
<p><strong>参数</strong>：</p>
<ul>
<li><code>idx</code>：实体的全局索引，用于唯一标识。</li>
<li><code>material</code>：该实体的材质类型（例如刚体或角色）。</li>
<li><code>morph</code>：实体的形态类型（例如无人机形态）。</li>
<li><code>surface</code>：几何表面信息（用于碰撞检测或渲染）。</li>
<li><code>visualize_contact</code>：是否需要可视化接触点。</li>
</ul>
<p><strong>功能</strong>：</p>
<ol type="1">
<li>根据 <code>material</code> 和 <code>morph</code>
类型选择实体的类别：
<ul>
<li><code>AvatarEntity</code>：角色实体。</li>
<li><code>DroneEntity</code>：无人机实体。</li>
<li><code>RigidEntity</code>：普通刚体。</li>
</ul></li>
<li>检查是否支持显示接触点（AvatarEntity不支持）。</li>
<li>初始化实体对象，并将其添加到 <code>_entities</code> 列表中。</li>
</ol>
<p><strong>返回值</strong>：新创建的实体对象。</p>
<h4 id="build">Build</h4>
<p><strong>作用</strong>：构建求解器的内部状态和数据结构，为模拟做好准备。</p>
<p><strong>功能</strong>：</p>
<ol type="1">
<li>初始化全局变量（如环境数量 <code>n_envs</code> 和并行级别
<code>_para_level</code>）。</li>
<li>调用每个实体的 <code>build</code> 方法，设置其相关参数。</li>
<li>初始化关键的数据结构：
<ul>
<li>自由度数量、关节数量、几何体数量等统计数据。</li>
<li>动力学矩阵（质量矩阵等）和字段（如自由度状态、几何体状态）。</li>
</ul></li>
<li>运行初始的正向运动学（Forward Kinematics）更新几何体状态。</li>
<li>初始化碰撞检测器、约束求解器等模块。</li>
</ol>
<h2 id="comparison-with-genesis-and-mujoco">Comparison with Genesis and
Mujoco</h2>
<h3 id="pipeline">0. Pipeline</h3>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2025/01/66641f62f2a0709cfd82988323d9621a.png"
                      alt="image-20250114182316234" style="zoom:80%;" 
                ></p>
<h3 id="mass-matrix">1. Mass Matrix</h3>
<table>
<colgroup>
<col style="width: 8%" />
<col style="width: 45%" />
<col style="width: 45%" />
</colgroup>
<thead>
<tr>
<th></th>
<th>Genesis</th>
<th>Mujoco</th>
</tr>
</thead>
<tbody>
<tr>
<td>CRB</td>
<td><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2025/01/3a9b38c8b00a256ef7a151b7103f92a5.png"
                      alt="image-20250111173536192" style="zoom: 50%;" 
                ></td>
<td><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2025/01/1ff531db30eeb7b9593ea78de78d8fd5.png"
                      alt="image-20250111173559608" style="zoom:50%;" 
                ></td>
</tr>
<tr>
<td>Mass Matrix</td>
<td><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2025/01/496e4b64dd9f889fd213e81d04665886.png"
                      alt="image-20250111185559312" style="zoom:50%;" 
                ></td>
<td><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2025/01/2d4dfa80211279e783f9f58274e4a761.png"
                      alt="image-20250111185507153" style="zoom:50%;" 
                ></td>
</tr>
</tbody>
</table>
<p>在CRB的计算中，<code>genesis</code>和<code>mujoco</code>使用了一样的策略。从末端开始遍历，自下而上地累计惯性。</p>
<p>有这个惯性矩阵之后，再计算每个自由度的惯性贡献，更新自由度状态
<code>f_ang</code>（角力矩）和
<code>f_vel</code>（线力矩）。然后填充这个质量矩阵。</p>
<p>实现细节上，<code>genesis</code>会有一个<code>休眠</code>的判断，避免了不必要的计算。此外，<code>genesis</code>如下定义力矩计算的函数：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2025/01/1094c49295aa3558a27ca732bc4a8c6a.png"
                      alt="image-20250111175057211" style="zoom:50%;" 
                ></p>
<p>使用<code>@ti.func</code>修饰，将运算从Python虚拟机移到Taichi进行加速。而mujoco中此函数的处理是按照单个元素进行处理的：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2025/01/4b9ce53dc5fd8a976427ce19cd613924.png"
                      alt="image-20250111184015895" style="zoom:50%;" 
                ></p>
<p>这种非连续的取值以及单元素的运算可能也是导致效率降低的原因。</p>
<h3 id="inversed-mass-matrix">2. Inversed Mass Matrix</h3>
<p>为解释矩阵逆的计算，先简要引入两个矩阵分解方式的介绍：</p>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr>
<th><span class="math inline">\(LU\)</span>分解</th>
<th><span class="math inline">\(LDL^T\)</span>分解</th>
</tr>
</thead>
<tbody>
<tr>
<td><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2025/01/1f04703dc79c1e2e0c2a0dd74523bade.png"
                      alt="image-20250109231735947" style="zoom: 50%;" 
                ></td>
<td><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2025/01/2ce532293557987b31a3c19b5971144c.png"
                      alt="image-20250109231845312" style="zoom:50%;" 
                ></td>
</tr>
</tbody>
</table>
<p>genesis:</p>
<ul>
<li>对质量矩阵 <code>mass_mat</code> 进行 LU 分解。</li>
<li>使用前向和后向替代，逐列计算逆矩阵 <code>mass_mat_inv</code>。</li>
</ul>
<p>在genesis中，为了简化质量矩阵的逆矩阵的计算，使用了<span
class="math inline">\(LU\)</span>分解。而在mujoco中，使用的是 <span
class="math inline">\(LDL^T\)</span>​分解。这两者我感觉本身计算量的差别不会太大。然而在genesis的计算中，对于自由度的遍历依然可以实现并行化：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2025/01/20f0446ae58908165b94d8d76ddf0b68.png"
                      alt="image-20250111192621125" style="zoom:50%;" 
                ></p>
<p>此外，在分解的过程中。mujoco中自己定义了函数，是通过简单的遍历实现的。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2025/01/e8cb0fb290e09d5e7f1c50e69a176fd9.png"
                      alt="image-20250111192953817" style="zoom:50%;" 
                ></p>
<p>在genesis中，虽然也是遍历，但是它的参数都是通过taichi重构的，可能相较于原生的C语言会有一定的加速。</p>
<h3 id="force-calculation">3. Force Calculation</h3>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2025/01/cdf3e2f00f8bb7eb34a5ebbb0e3b2c0d.png"
                      alt="image-20250112192834024" style="zoom:50%;" 
                ></p>
<p>该函数的目的是计算每个自由度上的总力，包括控制力、阻尼力和弹性力。</p>
<p>在力的计算中，genesis中有三种控制模式，根据代码，分别是<code>FORCE</code>、<code>VELOCITY</code>、<code>POSITION</code>。</p>
<p><strong>控制模式</strong>：</p>
<ol type="1">
<li><p><code>FORCE</code> 模式：</p>
<ul>
<li>直接将控制力 <code>ctrl_force</code> 应用于自由度。</li>
</ul></li>
<li><p><code>VELOCITY</code> 模式：</p>
<ul>
<li><p>根据当前速度 <code>vel</code> 和目标速度 <code>ctrl_vel</code>
计算阻尼力：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">force = kv * (ctrl_vel - vel)</span><br></pre></td></tr></table></figure></div></li>
<li><p><code>kv</code> 是速度控制的增益系数。</p></li>
</ul></li>
<li><p><code>POSITION</code> 模式：</p>
<ul>
<li><p>根据当前位置 <code>pos</code> 和目标位置 <code>ctrl_pos</code>
计算弹性力和阻尼力：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">force = kp * (ctrl_pos - pos) - kv * vel</span><br></pre></td></tr></table></figure></div></li>
<li><p><code>kp</code> 是位置控制的增益系数。</p></li>
</ul></li>
</ol>
<p>如果计算出的力大于阈值<code>EPS</code>，则唤醒实体。</p>
<p>此外，<code>force</code>还需要根据如下方式减去弹性力和阻尼力：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">force -= qpos * stiffness</span><br><span class="line">force -= damping * vel</span><br></pre></td></tr></table></figure></div>
<p>mujoco中也是三种控制，<code>position</code>、<code>velocity</code>和<code>acceleration</code>，大体上是一致的：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2025/01/79d627cbede478874c5e38237abaeb25.png"
                      alt="image-20250112195343709" style="zoom:50%;" 
                ></p>
<h3 id="update-acceleration-and-force">4. Update Acceleration and
Force</h3>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2025/01/f5803e19f0ff8e524328fb47a5fcbf1c.png"
                      alt="image-20250112201317574" style="zoom:50%;" 
                ></p>
<p>遍历每个<code>Entity</code>的每个<code>Link</code>，是根节点的话，设置线加速度为重力加速度，角加速度为0。不是根节点则继承父节点的加速度。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2025/01/1d2aad53d6d09d872211974a1b2f2a78.png"
                      alt="image-20250112201530219" style="zoom:50%;" 
                ></p>
<p><strong>流程</strong>：</p>
<ul>
<li>遍历链接的所有自由度（从 <code>dof_start</code> 到
<code>dof_end</code>）。</li>
<li>对每个自由度：
<ul>
<li>根据自由度的速度 <code>vel</code>，计算其对线加速度的贡献
<code>cdofd_vel * vel</code>。</li>
<li>计算其对角加速度的贡献 <code>cdofd_ang * vel</code>。</li>
</ul></li>
</ul>
<p>力和力矩的计算与加速度计算类似。且其中调用的都是<code>@ti.func</code>修饰的矩阵运算函数。</p>
<h3 id="inverse-link-force">5. Inverse Link Force</h3>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2025/01/fd8b099b6a637dd05e4f23af80006c17.png"
                      alt="image-20250112214627762" style="zoom:50%;" 
                ></p>
<p>从每个实体的末端链接开始，向父链接累积力。</p>
<h3 id="bias-force">6. Bias Force</h3>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2025/01/78f312339039b1b06fd607b03d7dedb2.png"
                      alt="image-20250112214627762" style="zoom:50%;" 
                ></p>
<p>基于链接的累积力和每个自由度的运动相关量，计算偏置力。</p>
<p><strong>分量解释</strong>：</p>
<ul>
<li><code>cdof_ang</code> 和 <code>cdof_vel</code>
是每个自由度的运动分量（角速度分量和线速度分量）。</li>
<li><code>cfrc_flat_ang</code> 和 <code>cfrc_flat_vel</code>
是链接的累积角力和线力。</li>
<li><strong>偏置力的计算</strong>：通过上述点积操作，将累积的力和自由度的运动相关联，得出自由度上的偏置力。</li>
</ul>
<h3 id="compute-dof-acceleration">7. Compute DOF Acceleration</h3>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2025/01/64e951eee65415b04beb10a07c3e3e11.png"
                      alt="image-20250112230444496" style="zoom:50%;" 
                ></p>
<p>对每个DOF，他要遍历添加所有其他DOF给它施加的约束力。</p>
<ul>
<li>将约束力 <code>qf_constraint</code> 添加到当前自由度的总力上。</li>
<li>再使用质量矩阵的逆<span
class="math inline">\(M^{-1}\)</span>和总力<code>force</code>计算加速度<code>acc</code>。</li>
</ul>
<h3 id="integrate">8. Integrate</h3>
<p>基于当前自由度的加速度和速度，计算并更新自由度的状态（包括位置和速度）。</p>
<p>基于加速度更新速度<span class="math inline">\(v\leftarrow
v+a\cdot\Delta t\)</span>：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2025/01/2d6f7202f4ff67623b46694830ac17af.png"
                      alt="image-20250112234806714" style="zoom:50%;" 
                ></p>
<p>更新位置：</p>
<ol type="1">
<li><p>旋转状态和旋转增量：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2025/01/d06241284fd7085371fba0452a44f680.png"
                      alt="image-20250113010301128" style="zoom:50%;" 
                ></p>
<p><code>rot</code> 代表刚体在全局坐标系中的当前旋转状态。</p>
<p><code>ang</code> 则是时间步内的旋转变化，由角速度直接导出。</p></li>
<li><p>旋转合并：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2025/01/65db9c9ae80ae40f5c6902151c642847.png"
                      alt="image-20250113011440843" style="zoom:50%;" 
                ></p>
<p>将旋转向量<span
class="math inline">\(\mathbf{ang}\)</span>转换为四元数。</p>
<p>再通过四元数乘法更新当前的旋转状态<code>rot</code>。</p></li>
<li><p>以上是FREE
JOINT的更新方式，非FREE的直接根据<code>vel</code>更新即可：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2025/01/b66c6d877a27982065be083dbdc8ba65.png"
                      alt="image-20250113013114786" style="zoom:50%;" 
                ></p></li>
</ol>
<h3 id="contraint-force">9. Contraint Force</h3>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2025/01/67563b73010d6175be9d09779402580a.png"
                      alt="image-20250113014423944" style="zoom:50%;" 
                ></p>
<p>以下详细对比下genesis和mujoco在碰撞检测中的实现：</p>
<ol type="1">
<li><p>Broad Phase:</p>
<p>在genesis和mujoco中，都使用了AABB对碰撞检测对进行一个快速的排除。但是它的具体的实现细节又有所不同。</p>
<p>在genesis中，使用的是<code>Sweep and Prune (SAP)</code>方式，它将所有物体AABB盒的Min点与Max点分别在XYZ轴上投影，如果在某一轴上不满足<code>Max1 &gt; Min2 &amp;&amp; Max2 &gt; Min1</code>则不会发生碰撞。</p>
<p>在mujoco中，使用的是<code>Bounding Volume Hierarchical Tree(BVH)</code>算法。它是通过二叉树来管理所有的AABB盒。在计算碰撞时，遍历二叉树以获取所有可能的碰撞对。</p></li>
<li><p>Narrow Phase:</p>
<p>窄相检测的目的是根据宽相检测检测出的碰撞对再进行细致的计算，获取碰撞接触点、法向量、穿透深度等信息。</p>
<p>窄相检测中，genesis使用的是<code>SDF</code>方法。根据物体的类别，<code>SPHERE</code>、<code>TERRAIN</code>、<code>CONVEX</code>或者其他，调用不同的函数。在<code>SDF</code>底层实现中，genesis使用的依然是遍历查询每个顶点，判断是否侵入另一个物体。</p>
<p>在mujoco中，定义了一个碰撞函数检测表：
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2025/01/20953839038b4920d64eae8984dc820a.png"
                      alt="image-20250113191309572" style="zoom:50%;" 
                ></p>
<p>不同于genesis全部计算<code>SDF</code>，mujoco中对于凸包与凸包间的碰撞，使用了<code>GJK</code>算法来判断凸包是否相交，如果检测到相交，再用<code>EPA</code>算法计算穿透深度和接触点。</p></li>
<li><p>Add Constraint:</p>
<p>在获取到碰撞信息后，genesis会通过<code>add_collision_constraints</code>函数将约束施加回去。mujoco中通过函数<code>mj_makeConstraint</code>添加约束。</p></li>
</ol>
<h2 id="performance-analysis">Performance Analysis</h2>
<h3 id="taichi-1">1. Taichi</h3>
<h4 id="data-structure">(1). data structure</h4>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2025/01/b560abfddc5ca20fc153337ab486947d.png"
                      alt="image-20250111171708819" style="zoom:50%;" 
                ></p>
<p>在genesis的初始化中，很多变量就以taichi的数据格式进行初始化了，便于后续高效处理。</p>
<h4 id="parallelize">(2). Parallelize</h4>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2025/01/6155ed5f4f4fa995ec096701602416a2.png"
                      alt="image-20250111171929017" style="zoom:50%;" 
                ></p>
<p>genesis使用了taichi的<code>loop_config</code>函数进行并行化的控制。其中<code>serialize</code>控制是否并行，如果将<code>serialize</code>设置为
<code>True</code>
，则for循环将串行运行。关于<code>_para_level</code>的定义在此：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2025/01/974d855b240efade15a0e0e9b4bdc38f.png"
                      alt="image-20250111172228892" style="zoom:50%;" 
                ></p>
<p>在使用CPU时不进行并行。GPU时根据场景是否分批次进行部分或全部的并行。</p>
<h3 id="hibernation">2. hibernation</h3>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pub-70fb49a5419e4021a1be66effc7bcf9e.r2.dev/2025/01/fb7c678e52495e3dccd93adad607920b.png"
                      alt="image-20250110215135068" style="zoom: 50%;" 
                ></p>
<p><strong>功能启用</strong>:</p>
<ul>
<li><code>hibernation</code> 的启用由 <code>self._use_hibernation</code>
参数控制。</li>
<li>当启用时，程序会在初始化中设定相关状态变量，例如
<code>self.dofs_state.hibernated</code> 和
<code>self.links_state.hibernated</code>
标记rigid_solverrigid_solver。</li>
</ul>
<p><strong>状态检测</strong>:</p>
<ul>
<li>判断刚体是否进入 hibernation
的依据是速度和加速度的阈值（<code>self._hibernation_thresh_vel</code> 和
<code>self._hibernation_thresh_acc</code>）。如果某个刚体的运动状态低于这些阈值，则会被标记为“休眠”状态rigid_solverrigid_solver。</li>
</ul>
<p><strong>休眠机制的作用</strong>:</p>
<ul>
<li>对于被标记为 hibernated
的刚体，程序会从后续的物理计算中剔除它们。这包括质量矩阵计算、动态求解以及碰撞检测等部分rigid_solver。</li>
<li>只有当这些刚体再次被外力或约束影响而超出阈值时，它们才会被重新唤醒并重新加入计算rigid_solver。</li>
</ul>
<p><strong>核心实现</strong>:</p>
<ul>
<li><code>self._func_hibernate()</code> 函数处理刚体是否应该进入
hibernation 的逻辑rigid_solver。</li>
<li><code>self._func_aggregate_awake_entities()</code>
则用于更新非休眠状态的实体列表，以确保只对活跃的刚体执行仿真rigid_solver。</li>
</ul>
<p><strong>性能优化</strong>:</p>
<ul>
<li>通过减少对静态或低动态实体的重复计算，hibernation
可以显著降低复杂场景中的计算开销。</li>
<li>适用于场景中存在大量静止或近似静止的物体的情况。</li>
</ul>
]]></content>
      <categories>
        <category>机器仿真</category>
      </categories>
      <tags>
        <tag>mujoco</tag>
        <tag>genesis</tag>
      </tags>
  </entry>
</search>
